// Code generated by go-swagger; DO NOT EDIT.

package address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAddressParams creates a new GetAddressParams object
// with the default values initialized.
func NewGetAddressParams() *GetAddressParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetAddressParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAddressParamsWithTimeout creates a new GetAddressParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAddressParamsWithTimeout(timeout time.Duration) *GetAddressParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetAddressParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewGetAddressParamsWithContext creates a new GetAddressParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAddressParamsWithContext(ctx context.Context) *GetAddressParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetAddressParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewGetAddressParamsWithHTTPClient creates a new GetAddressParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAddressParamsWithHTTPClient(client *http.Client) *GetAddressParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetAddressParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*GetAddressParams contains all the parameters to send to the API endpoint
for the get address operation typically these are written to a http.Request
*/
type GetAddressParams struct {

	/*AddressLine1
	  List of IDs

	*/
	AddressLine1 *string
	/*AddressLine2
	  List of IDs

	*/
	AddressLine2 *string
	/*City
	  List of IDs

	*/
	City *string
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*Name
	  List of IDs

	*/
	Name *string
	/*PostalCode
	  List of IDs

	*/
	PostalCode *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get address params
func (o *GetAddressParams) WithTimeout(timeout time.Duration) *GetAddressParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get address params
func (o *GetAddressParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get address params
func (o *GetAddressParams) WithContext(ctx context.Context) *GetAddressParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get address params
func (o *GetAddressParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get address params
func (o *GetAddressParams) WithHTTPClient(client *http.Client) *GetAddressParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get address params
func (o *GetAddressParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddressLine1 adds the addressLine1 to the get address params
func (o *GetAddressParams) WithAddressLine1(addressLine1 *string) *GetAddressParams {
	o.SetAddressLine1(addressLine1)
	return o
}

// SetAddressLine1 adds the addressLine1 to the get address params
func (o *GetAddressParams) SetAddressLine1(addressLine1 *string) {
	o.AddressLine1 = addressLine1
}

// WithAddressLine2 adds the addressLine2 to the get address params
func (o *GetAddressParams) WithAddressLine2(addressLine2 *string) *GetAddressParams {
	o.SetAddressLine2(addressLine2)
	return o
}

// SetAddressLine2 adds the addressLine2 to the get address params
func (o *GetAddressParams) SetAddressLine2(addressLine2 *string) {
	o.AddressLine2 = addressLine2
}

// WithCity adds the city to the get address params
func (o *GetAddressParams) WithCity(city *string) *GetAddressParams {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the get address params
func (o *GetAddressParams) SetCity(city *string) {
	o.City = city
}

// WithCount adds the count to the get address params
func (o *GetAddressParams) WithCount(count *int64) *GetAddressParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get address params
func (o *GetAddressParams) SetCount(count *int64) {
	o.Count = count
}

// WithFields adds the fields to the get address params
func (o *GetAddressParams) WithFields(fields *string) *GetAddressParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get address params
func (o *GetAddressParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the get address params
func (o *GetAddressParams) WithFrom(from *int64) *GetAddressParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get address params
func (o *GetAddressParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the get address params
func (o *GetAddressParams) WithID(id *string) *GetAddressParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get address params
func (o *GetAddressParams) SetID(id *string) {
	o.ID = id
}

// WithName adds the name to the get address params
func (o *GetAddressParams) WithName(name *string) *GetAddressParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get address params
func (o *GetAddressParams) SetName(name *string) {
	o.Name = name
}

// WithPostalCode adds the postalCode to the get address params
func (o *GetAddressParams) WithPostalCode(postalCode *string) *GetAddressParams {
	o.SetPostalCode(postalCode)
	return o
}

// SetPostalCode adds the postalCode to the get address params
func (o *GetAddressParams) SetPostalCode(postalCode *string) {
	o.PostalCode = postalCode
}

// WithSorting adds the sorting to the get address params
func (o *GetAddressParams) WithSorting(sorting *string) *GetAddressParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get address params
func (o *GetAddressParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *GetAddressParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddressLine1 != nil {

		// query param addressLine1
		var qrAddressLine1 string
		if o.AddressLine1 != nil {
			qrAddressLine1 = *o.AddressLine1
		}
		qAddressLine1 := qrAddressLine1
		if qAddressLine1 != "" {
			if err := r.SetQueryParam("addressLine1", qAddressLine1); err != nil {
				return err
			}
		}

	}

	if o.AddressLine2 != nil {

		// query param addressLine2
		var qrAddressLine2 string
		if o.AddressLine2 != nil {
			qrAddressLine2 = *o.AddressLine2
		}
		qAddressLine2 := qrAddressLine2
		if qAddressLine2 != "" {
			if err := r.SetQueryParam("addressLine2", qAddressLine2); err != nil {
				return err
			}
		}

	}

	if o.City != nil {

		// query param city
		var qrCity string
		if o.City != nil {
			qrCity = *o.City
		}
		qCity := qrCity
		if qCity != "" {
			if err := r.SetQueryParam("city", qCity); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.PostalCode != nil {

		// query param postalCode
		var qrPostalCode string
		if o.PostalCode != nil {
			qrPostalCode = *o.PostalCode
		}
		qPostalCode := qrPostalCode
		if qPostalCode != "" {
			if err := r.SetQueryParam("postalCode", qPostalCode); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
