// Code generated by go-swagger; DO NOT EDIT.

package orderline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new orderline API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for orderline API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteOrderOrderlineID bs e t a delete order line by ID
*/
func (a *Client) DeleteOrderOrderlineID(params *DeleteOrderOrderlineIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrderOrderlineIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteOrderOrderlineID",
		Method:             "DELETE",
		PathPattern:        "/order/orderline/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOrderOrderlineIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteProjectOrderlineID bs e t a delete order line by ID
*/
func (a *Client) DeleteProjectOrderlineID(params *DeleteProjectOrderlineIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectOrderlineIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteProjectOrderlineID",
		Method:             "DELETE",
		PathPattern:        "/project/orderline/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectOrderlineIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetOrderOrderlineID gets order line by ID
*/
func (a *Client) GetOrderOrderlineID(params *GetOrderOrderlineIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrderOrderlineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderOrderlineIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrderOrderlineID",
		Method:             "GET",
		PathPattern:        "/order/orderline/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrderOrderlineIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrderOrderlineIDOK), nil

}

/*
GetProjectOrderlineID bs e t a get order line by ID
*/
func (a *Client) GetProjectOrderlineID(params *GetProjectOrderlineIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectOrderlineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectOrderlineIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProjectOrderlineID",
		Method:             "GET",
		PathPattern:        "/project/orderline/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectOrderlineIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectOrderlineIDOK), nil

}

/*
PostOrderOrderline creates order line when creating several order lines use list for better performance
*/
func (a *Client) PostOrderOrderline(params *PostOrderOrderlineParams, authInfo runtime.ClientAuthInfoWriter) (*PostOrderOrderlineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrderOrderlineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrderOrderline",
		Method:             "POST",
		PathPattern:        "/order/orderline",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrderOrderlineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrderOrderlineCreated), nil

}

/*
PostOrderOrderlineList creates multiple order lines
*/
func (a *Client) PostOrderOrderlineList(params *PostOrderOrderlineListParams, authInfo runtime.ClientAuthInfoWriter) (*PostOrderOrderlineListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrderOrderlineListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrderOrderlineList",
		Method:             "POST",
		PathPattern:        "/order/orderline/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrderOrderlineListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrderOrderlineListCreated), nil

}

/*
PostProjectOrderline bs e t a create order line when creating several order lines use list for better performance
*/
func (a *Client) PostProjectOrderline(params *PostProjectOrderlineParams, authInfo runtime.ClientAuthInfoWriter) (*PostProjectOrderlineCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectOrderlineParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProjectOrderline",
		Method:             "POST",
		PathPattern:        "/project/orderline",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProjectOrderlineReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectOrderlineCreated), nil

}

/*
PostProjectOrderlineList bs e t a create multiple order lines
*/
func (a *Client) PostProjectOrderlineList(params *PostProjectOrderlineListParams, authInfo runtime.ClientAuthInfoWriter) (*PostProjectOrderlineListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectOrderlineListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProjectOrderlineList",
		Method:             "POST",
		PathPattern:        "/project/orderline/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProjectOrderlineListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectOrderlineListCreated), nil

}

/*
PutProjectOrderlineID bs e t a update project orderline
*/
func (a *Client) PutProjectOrderlineID(params *PutProjectOrderlineIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutProjectOrderlineIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectOrderlineIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutProjectOrderlineID",
		Method:             "PUT",
		PathPattern:        "/project/orderline/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProjectOrderlineIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutProjectOrderlineIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
