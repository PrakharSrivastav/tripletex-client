// Code generated by go-swagger; DO NOT EDIT.

package accommodation_allowance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new accommodation allowance API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accommodation allowance API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTravelExpenseAccommodationAllowanceID bs e t a delete accommodation allowance
*/
func (a *Client) DeleteTravelExpenseAccommodationAllowanceID(params *DeleteTravelExpenseAccommodationAllowanceIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTravelExpenseAccommodationAllowanceIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTravelExpenseAccommodationAllowanceID",
		Method:             "DELETE",
		PathPattern:        "/travelExpense/accommodationAllowance/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTravelExpenseAccommodationAllowanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetTravelExpenseAccommodationAllowance bs e t a find accommodation allowances corresponding with sent data
*/
func (a *Client) GetTravelExpenseAccommodationAllowance(params *GetTravelExpenseAccommodationAllowanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpenseAccommodationAllowanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpenseAccommodationAllowanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpenseAccommodationAllowance",
		Method:             "GET",
		PathPattern:        "/travelExpense/accommodationAllowance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpenseAccommodationAllowanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpenseAccommodationAllowanceOK), nil

}

/*
GetTravelExpenseAccommodationAllowanceID bs e t a get travel accommodation allowance by ID
*/
func (a *Client) GetTravelExpenseAccommodationAllowanceID(params *GetTravelExpenseAccommodationAllowanceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpenseAccommodationAllowanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpenseAccommodationAllowanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpenseAccommodationAllowanceID",
		Method:             "GET",
		PathPattern:        "/travelExpense/accommodationAllowance/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpenseAccommodationAllowanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpenseAccommodationAllowanceIDOK), nil

}

/*
PostTravelExpenseAccommodationAllowance bs e t a create accommodation allowance
*/
func (a *Client) PostTravelExpenseAccommodationAllowance(params *PostTravelExpenseAccommodationAllowanceParams, authInfo runtime.ClientAuthInfoWriter) (*PostTravelExpenseAccommodationAllowanceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTravelExpenseAccommodationAllowanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTravelExpenseAccommodationAllowance",
		Method:             "POST",
		PathPattern:        "/travelExpense/accommodationAllowance",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTravelExpenseAccommodationAllowanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTravelExpenseAccommodationAllowanceCreated), nil

}

/*
PutTravelExpenseAccommodationAllowanceID bs e t a update accommodation allowance
*/
func (a *Client) PutTravelExpenseAccommodationAllowanceID(params *PutTravelExpenseAccommodationAllowanceIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseAccommodationAllowanceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseAccommodationAllowanceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseAccommodationAllowanceID",
		Method:             "PUT",
		PathPattern:        "/travelExpense/accommodationAllowance/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseAccommodationAllowanceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseAccommodationAllowanceIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
