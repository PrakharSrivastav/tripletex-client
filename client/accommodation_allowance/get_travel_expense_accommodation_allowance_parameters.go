// Code generated by go-swagger; DO NOT EDIT.

package accommodation_allowance

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTravelExpenseAccommodationAllowanceParams creates a new GetTravelExpenseAccommodationAllowanceParams object
// with the default values initialized.
func NewGetTravelExpenseAccommodationAllowanceParams() *GetTravelExpenseAccommodationAllowanceParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseAccommodationAllowanceParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTravelExpenseAccommodationAllowanceParamsWithTimeout creates a new GetTravelExpenseAccommodationAllowanceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTravelExpenseAccommodationAllowanceParamsWithTimeout(timeout time.Duration) *GetTravelExpenseAccommodationAllowanceParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseAccommodationAllowanceParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewGetTravelExpenseAccommodationAllowanceParamsWithContext creates a new GetTravelExpenseAccommodationAllowanceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTravelExpenseAccommodationAllowanceParamsWithContext(ctx context.Context) *GetTravelExpenseAccommodationAllowanceParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseAccommodationAllowanceParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewGetTravelExpenseAccommodationAllowanceParamsWithHTTPClient creates a new GetTravelExpenseAccommodationAllowanceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTravelExpenseAccommodationAllowanceParamsWithHTTPClient(client *http.Client) *GetTravelExpenseAccommodationAllowanceParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseAccommodationAllowanceParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*GetTravelExpenseAccommodationAllowanceParams contains all the parameters to send to the API endpoint
for the get travel expense accommodation allowance operation typically these are written to a http.Request
*/
type GetTravelExpenseAccommodationAllowanceParams struct {

	/*Address
	  Containing

	*/
	Address *string
	/*AmountFrom
	  From and including

	*/
	AmountFrom *float64
	/*AmountTo
	  To and excluding

	*/
	AmountTo *float64
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*CountFrom
	  From and including

	*/
	CountFrom *int32
	/*CountTo
	  To and excluding

	*/
	CountTo *int32
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*Location
	  Containing

	*/
	Location *string
	/*RateCategoryID
	  Equals

	*/
	RateCategoryID *string
	/*RateFrom
	  From and including

	*/
	RateFrom *float64
	/*RateTo
	  To and excluding

	*/
	RateTo *float64
	/*RateTypeID
	  Equals

	*/
	RateTypeID *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*TravelExpenseID
	  Equals

	*/
	TravelExpenseID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithTimeout(timeout time.Duration) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithContext(ctx context.Context) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithHTTPClient(client *http.Client) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithAddress(address *string) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetAddress(address *string) {
	o.Address = address
}

// WithAmountFrom adds the amountFrom to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithAmountFrom(amountFrom *float64) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetAmountFrom(amountFrom)
	return o
}

// SetAmountFrom adds the amountFrom to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetAmountFrom(amountFrom *float64) {
	o.AmountFrom = amountFrom
}

// WithAmountTo adds the amountTo to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithAmountTo(amountTo *float64) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetAmountTo(amountTo)
	return o
}

// SetAmountTo adds the amountTo to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetAmountTo(amountTo *float64) {
	o.AmountTo = amountTo
}

// WithCount adds the count to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithCount(count *int64) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetCount(count *int64) {
	o.Count = count
}

// WithCountFrom adds the countFrom to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithCountFrom(countFrom *int32) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetCountFrom(countFrom)
	return o
}

// SetCountFrom adds the countFrom to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetCountFrom(countFrom *int32) {
	o.CountFrom = countFrom
}

// WithCountTo adds the countTo to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithCountTo(countTo *int32) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetCountTo(countTo)
	return o
}

// SetCountTo adds the countTo to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetCountTo(countTo *int32) {
	o.CountTo = countTo
}

// WithFields adds the fields to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithFields(fields *string) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithFrom(from *int64) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetFrom(from *int64) {
	o.From = from
}

// WithLocation adds the location to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithLocation(location *string) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetLocation(location *string) {
	o.Location = location
}

// WithRateCategoryID adds the rateCategoryID to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithRateCategoryID(rateCategoryID *string) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetRateCategoryID(rateCategoryID)
	return o
}

// SetRateCategoryID adds the rateCategoryId to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetRateCategoryID(rateCategoryID *string) {
	o.RateCategoryID = rateCategoryID
}

// WithRateFrom adds the rateFrom to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithRateFrom(rateFrom *float64) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetRateFrom(rateFrom)
	return o
}

// SetRateFrom adds the rateFrom to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetRateFrom(rateFrom *float64) {
	o.RateFrom = rateFrom
}

// WithRateTo adds the rateTo to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithRateTo(rateTo *float64) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetRateTo(rateTo)
	return o
}

// SetRateTo adds the rateTo to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetRateTo(rateTo *float64) {
	o.RateTo = rateTo
}

// WithRateTypeID adds the rateTypeID to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithRateTypeID(rateTypeID *string) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetRateTypeID(rateTypeID)
	return o
}

// SetRateTypeID adds the rateTypeId to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetRateTypeID(rateTypeID *string) {
	o.RateTypeID = rateTypeID
}

// WithSorting adds the sorting to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithSorting(sorting *string) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithTravelExpenseID adds the travelExpenseID to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) WithTravelExpenseID(travelExpenseID *string) *GetTravelExpenseAccommodationAllowanceParams {
	o.SetTravelExpenseID(travelExpenseID)
	return o
}

// SetTravelExpenseID adds the travelExpenseId to the get travel expense accommodation allowance params
func (o *GetTravelExpenseAccommodationAllowanceParams) SetTravelExpenseID(travelExpenseID *string) {
	o.TravelExpenseID = travelExpenseID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTravelExpenseAccommodationAllowanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// query param address
		var qrAddress string
		if o.Address != nil {
			qrAddress = *o.Address
		}
		qAddress := qrAddress
		if qAddress != "" {
			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}

	}

	if o.AmountFrom != nil {

		// query param amountFrom
		var qrAmountFrom float64
		if o.AmountFrom != nil {
			qrAmountFrom = *o.AmountFrom
		}
		qAmountFrom := swag.FormatFloat64(qrAmountFrom)
		if qAmountFrom != "" {
			if err := r.SetQueryParam("amountFrom", qAmountFrom); err != nil {
				return err
			}
		}

	}

	if o.AmountTo != nil {

		// query param amountTo
		var qrAmountTo float64
		if o.AmountTo != nil {
			qrAmountTo = *o.AmountTo
		}
		qAmountTo := swag.FormatFloat64(qrAmountTo)
		if qAmountTo != "" {
			if err := r.SetQueryParam("amountTo", qAmountTo); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CountFrom != nil {

		// query param countFrom
		var qrCountFrom int32
		if o.CountFrom != nil {
			qrCountFrom = *o.CountFrom
		}
		qCountFrom := swag.FormatInt32(qrCountFrom)
		if qCountFrom != "" {
			if err := r.SetQueryParam("countFrom", qCountFrom); err != nil {
				return err
			}
		}

	}

	if o.CountTo != nil {

		// query param countTo
		var qrCountTo int32
		if o.CountTo != nil {
			qrCountTo = *o.CountTo
		}
		qCountTo := swag.FormatInt32(qrCountTo)
		if qCountTo != "" {
			if err := r.SetQueryParam("countTo", qCountTo); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Location != nil {

		// query param location
		var qrLocation string
		if o.Location != nil {
			qrLocation = *o.Location
		}
		qLocation := qrLocation
		if qLocation != "" {
			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}

	}

	if o.RateCategoryID != nil {

		// query param rateCategoryId
		var qrRateCategoryID string
		if o.RateCategoryID != nil {
			qrRateCategoryID = *o.RateCategoryID
		}
		qRateCategoryID := qrRateCategoryID
		if qRateCategoryID != "" {
			if err := r.SetQueryParam("rateCategoryId", qRateCategoryID); err != nil {
				return err
			}
		}

	}

	if o.RateFrom != nil {

		// query param rateFrom
		var qrRateFrom float64
		if o.RateFrom != nil {
			qrRateFrom = *o.RateFrom
		}
		qRateFrom := swag.FormatFloat64(qrRateFrom)
		if qRateFrom != "" {
			if err := r.SetQueryParam("rateFrom", qRateFrom); err != nil {
				return err
			}
		}

	}

	if o.RateTo != nil {

		// query param rateTo
		var qrRateTo float64
		if o.RateTo != nil {
			qrRateTo = *o.RateTo
		}
		qRateTo := swag.FormatFloat64(qrRateTo)
		if qRateTo != "" {
			if err := r.SetQueryParam("rateTo", qRateTo); err != nil {
				return err
			}
		}

	}

	if o.RateTypeID != nil {

		// query param rateTypeId
		var qrRateTypeID string
		if o.RateTypeID != nil {
			qrRateTypeID = *o.RateTypeID
		}
		qRateTypeID := qrRateTypeID
		if qRateTypeID != "" {
			if err := r.SetQueryParam("rateTypeId", qRateTypeID); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.TravelExpenseID != nil {

		// query param travelExpenseId
		var qrTravelExpenseID string
		if o.TravelExpenseID != nil {
			qrTravelExpenseID = *o.TravelExpenseID
		}
		qTravelExpenseID := qrTravelExpenseID
		if qTravelExpenseID != "" {
			if err := r.SetQueryParam("travelExpenseId", qTravelExpenseID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
