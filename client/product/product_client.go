// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new product API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for product API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetProduct finds products corresponding with sent data
*/
func (a *Client) GetProduct(params *GetProductParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProduct",
		Method:             "GET",
		PathPattern:        "/product",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductOK), nil

}

/*
GetProductID gets product by ID
*/
func (a *Client) GetProductID(params *GetProductIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProductID",
		Method:             "GET",
		PathPattern:        "/product/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductIDOK), nil

}

/*
PostProduct creates new product
*/
func (a *Client) PostProduct(params *PostProductParams, authInfo runtime.ClientAuthInfoWriter) (*PostProductCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProductParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProduct",
		Method:             "POST",
		PathPattern:        "/product",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProductReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProductCreated), nil

}

/*
PutProductID updates product
*/
func (a *Client) PutProductID(params *PutProductIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutProductIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProductIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutProductID",
		Method:             "PUT",
		PathPattern:        "/product/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProductIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutProductIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
