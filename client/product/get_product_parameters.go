// Code generated by go-swagger; DO NOT EDIT.

package product

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProductParams creates a new GetProductParams object
// with the default values initialized.
func NewGetProductParams() *GetProductParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetProductParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProductParamsWithTimeout creates a new GetProductParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProductParamsWithTimeout(timeout time.Duration) *GetProductParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetProductParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewGetProductParamsWithContext creates a new GetProductParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProductParamsWithContext(ctx context.Context) *GetProductParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetProductParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewGetProductParamsWithHTTPClient creates a new GetProductParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProductParamsWithHTTPClient(client *http.Client) *GetProductParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetProductParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*GetProductParams contains all the parameters to send to the API endpoint
for the get product operation typically these are written to a http.Request
*/
type GetProductParams struct {

	/*AccountID
	  Equals

	*/
	AccountID *string
	/*CostExcludingVatCurrencyFrom
	  From and including

	*/
	CostExcludingVatCurrencyFrom *float64
	/*CostExcludingVatCurrencyTo
	  To and excluding

	*/
	CostExcludingVatCurrencyTo *float64
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*CurrencyID
	  Equals

	*/
	CurrencyID *string
	/*DepartmentID
	  Equals

	*/
	DepartmentID *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*IsInactive
	  Equals

	*/
	IsInactive *bool
	/*IsStockItem
	  Equals

	*/
	IsStockItem *bool
	/*Name
	  Containing

	*/
	Name *string
	/*Number
	  DEPRECATED. List of product numbers (Integer only)

	*/
	Number *string
	/*PriceExcludingVatCurrencyFrom
	  From and including

	*/
	PriceExcludingVatCurrencyFrom *float64
	/*PriceExcludingVatCurrencyTo
	  To and excluding

	*/
	PriceExcludingVatCurrencyTo *float64
	/*PriceIncludingVatCurrencyFrom
	  From and including

	*/
	PriceIncludingVatCurrencyFrom *float64
	/*PriceIncludingVatCurrencyTo
	  To and excluding

	*/
	PriceIncludingVatCurrencyTo *float64
	/*ProductNumber
	  List of valid product numbers

	*/
	ProductNumber []string
	/*ProductUnitID
	  Equals

	*/
	ProductUnitID *string
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*VatTypeID
	  Equals

	*/
	VatTypeID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get product params
func (o *GetProductParams) WithTimeout(timeout time.Duration) *GetProductParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get product params
func (o *GetProductParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get product params
func (o *GetProductParams) WithContext(ctx context.Context) *GetProductParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get product params
func (o *GetProductParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get product params
func (o *GetProductParams) WithHTTPClient(client *http.Client) *GetProductParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get product params
func (o *GetProductParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get product params
func (o *GetProductParams) WithAccountID(accountID *string) *GetProductParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get product params
func (o *GetProductParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithCostExcludingVatCurrencyFrom adds the costExcludingVatCurrencyFrom to the get product params
func (o *GetProductParams) WithCostExcludingVatCurrencyFrom(costExcludingVatCurrencyFrom *float64) *GetProductParams {
	o.SetCostExcludingVatCurrencyFrom(costExcludingVatCurrencyFrom)
	return o
}

// SetCostExcludingVatCurrencyFrom adds the costExcludingVatCurrencyFrom to the get product params
func (o *GetProductParams) SetCostExcludingVatCurrencyFrom(costExcludingVatCurrencyFrom *float64) {
	o.CostExcludingVatCurrencyFrom = costExcludingVatCurrencyFrom
}

// WithCostExcludingVatCurrencyTo adds the costExcludingVatCurrencyTo to the get product params
func (o *GetProductParams) WithCostExcludingVatCurrencyTo(costExcludingVatCurrencyTo *float64) *GetProductParams {
	o.SetCostExcludingVatCurrencyTo(costExcludingVatCurrencyTo)
	return o
}

// SetCostExcludingVatCurrencyTo adds the costExcludingVatCurrencyTo to the get product params
func (o *GetProductParams) SetCostExcludingVatCurrencyTo(costExcludingVatCurrencyTo *float64) {
	o.CostExcludingVatCurrencyTo = costExcludingVatCurrencyTo
}

// WithCount adds the count to the get product params
func (o *GetProductParams) WithCount(count *int64) *GetProductParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get product params
func (o *GetProductParams) SetCount(count *int64) {
	o.Count = count
}

// WithCurrencyID adds the currencyID to the get product params
func (o *GetProductParams) WithCurrencyID(currencyID *string) *GetProductParams {
	o.SetCurrencyID(currencyID)
	return o
}

// SetCurrencyID adds the currencyId to the get product params
func (o *GetProductParams) SetCurrencyID(currencyID *string) {
	o.CurrencyID = currencyID
}

// WithDepartmentID adds the departmentID to the get product params
func (o *GetProductParams) WithDepartmentID(departmentID *string) *GetProductParams {
	o.SetDepartmentID(departmentID)
	return o
}

// SetDepartmentID adds the departmentId to the get product params
func (o *GetProductParams) SetDepartmentID(departmentID *string) {
	o.DepartmentID = departmentID
}

// WithFields adds the fields to the get product params
func (o *GetProductParams) WithFields(fields *string) *GetProductParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get product params
func (o *GetProductParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the get product params
func (o *GetProductParams) WithFrom(from *int64) *GetProductParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get product params
func (o *GetProductParams) SetFrom(from *int64) {
	o.From = from
}

// WithIsInactive adds the isInactive to the get product params
func (o *GetProductParams) WithIsInactive(isInactive *bool) *GetProductParams {
	o.SetIsInactive(isInactive)
	return o
}

// SetIsInactive adds the isInactive to the get product params
func (o *GetProductParams) SetIsInactive(isInactive *bool) {
	o.IsInactive = isInactive
}

// WithIsStockItem adds the isStockItem to the get product params
func (o *GetProductParams) WithIsStockItem(isStockItem *bool) *GetProductParams {
	o.SetIsStockItem(isStockItem)
	return o
}

// SetIsStockItem adds the isStockItem to the get product params
func (o *GetProductParams) SetIsStockItem(isStockItem *bool) {
	o.IsStockItem = isStockItem
}

// WithName adds the name to the get product params
func (o *GetProductParams) WithName(name *string) *GetProductParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get product params
func (o *GetProductParams) SetName(name *string) {
	o.Name = name
}

// WithNumber adds the number to the get product params
func (o *GetProductParams) WithNumber(number *string) *GetProductParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the get product params
func (o *GetProductParams) SetNumber(number *string) {
	o.Number = number
}

// WithPriceExcludingVatCurrencyFrom adds the priceExcludingVatCurrencyFrom to the get product params
func (o *GetProductParams) WithPriceExcludingVatCurrencyFrom(priceExcludingVatCurrencyFrom *float64) *GetProductParams {
	o.SetPriceExcludingVatCurrencyFrom(priceExcludingVatCurrencyFrom)
	return o
}

// SetPriceExcludingVatCurrencyFrom adds the priceExcludingVatCurrencyFrom to the get product params
func (o *GetProductParams) SetPriceExcludingVatCurrencyFrom(priceExcludingVatCurrencyFrom *float64) {
	o.PriceExcludingVatCurrencyFrom = priceExcludingVatCurrencyFrom
}

// WithPriceExcludingVatCurrencyTo adds the priceExcludingVatCurrencyTo to the get product params
func (o *GetProductParams) WithPriceExcludingVatCurrencyTo(priceExcludingVatCurrencyTo *float64) *GetProductParams {
	o.SetPriceExcludingVatCurrencyTo(priceExcludingVatCurrencyTo)
	return o
}

// SetPriceExcludingVatCurrencyTo adds the priceExcludingVatCurrencyTo to the get product params
func (o *GetProductParams) SetPriceExcludingVatCurrencyTo(priceExcludingVatCurrencyTo *float64) {
	o.PriceExcludingVatCurrencyTo = priceExcludingVatCurrencyTo
}

// WithPriceIncludingVatCurrencyFrom adds the priceIncludingVatCurrencyFrom to the get product params
func (o *GetProductParams) WithPriceIncludingVatCurrencyFrom(priceIncludingVatCurrencyFrom *float64) *GetProductParams {
	o.SetPriceIncludingVatCurrencyFrom(priceIncludingVatCurrencyFrom)
	return o
}

// SetPriceIncludingVatCurrencyFrom adds the priceIncludingVatCurrencyFrom to the get product params
func (o *GetProductParams) SetPriceIncludingVatCurrencyFrom(priceIncludingVatCurrencyFrom *float64) {
	o.PriceIncludingVatCurrencyFrom = priceIncludingVatCurrencyFrom
}

// WithPriceIncludingVatCurrencyTo adds the priceIncludingVatCurrencyTo to the get product params
func (o *GetProductParams) WithPriceIncludingVatCurrencyTo(priceIncludingVatCurrencyTo *float64) *GetProductParams {
	o.SetPriceIncludingVatCurrencyTo(priceIncludingVatCurrencyTo)
	return o
}

// SetPriceIncludingVatCurrencyTo adds the priceIncludingVatCurrencyTo to the get product params
func (o *GetProductParams) SetPriceIncludingVatCurrencyTo(priceIncludingVatCurrencyTo *float64) {
	o.PriceIncludingVatCurrencyTo = priceIncludingVatCurrencyTo
}

// WithProductNumber adds the productNumber to the get product params
func (o *GetProductParams) WithProductNumber(productNumber []string) *GetProductParams {
	o.SetProductNumber(productNumber)
	return o
}

// SetProductNumber adds the productNumber to the get product params
func (o *GetProductParams) SetProductNumber(productNumber []string) {
	o.ProductNumber = productNumber
}

// WithProductUnitID adds the productUnitID to the get product params
func (o *GetProductParams) WithProductUnitID(productUnitID *string) *GetProductParams {
	o.SetProductUnitID(productUnitID)
	return o
}

// SetProductUnitID adds the productUnitId to the get product params
func (o *GetProductParams) SetProductUnitID(productUnitID *string) {
	o.ProductUnitID = productUnitID
}

// WithSorting adds the sorting to the get product params
func (o *GetProductParams) WithSorting(sorting *string) *GetProductParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get product params
func (o *GetProductParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithVatTypeID adds the vatTypeID to the get product params
func (o *GetProductParams) WithVatTypeID(vatTypeID *string) *GetProductParams {
	o.SetVatTypeID(vatTypeID)
	return o
}

// SetVatTypeID adds the vatTypeId to the get product params
func (o *GetProductParams) SetVatTypeID(vatTypeID *string) {
	o.VatTypeID = vatTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetProductParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	if o.CostExcludingVatCurrencyFrom != nil {

		// query param costExcludingVatCurrencyFrom
		var qrCostExcludingVatCurrencyFrom float64
		if o.CostExcludingVatCurrencyFrom != nil {
			qrCostExcludingVatCurrencyFrom = *o.CostExcludingVatCurrencyFrom
		}
		qCostExcludingVatCurrencyFrom := swag.FormatFloat64(qrCostExcludingVatCurrencyFrom)
		if qCostExcludingVatCurrencyFrom != "" {
			if err := r.SetQueryParam("costExcludingVatCurrencyFrom", qCostExcludingVatCurrencyFrom); err != nil {
				return err
			}
		}

	}

	if o.CostExcludingVatCurrencyTo != nil {

		// query param costExcludingVatCurrencyTo
		var qrCostExcludingVatCurrencyTo float64
		if o.CostExcludingVatCurrencyTo != nil {
			qrCostExcludingVatCurrencyTo = *o.CostExcludingVatCurrencyTo
		}
		qCostExcludingVatCurrencyTo := swag.FormatFloat64(qrCostExcludingVatCurrencyTo)
		if qCostExcludingVatCurrencyTo != "" {
			if err := r.SetQueryParam("costExcludingVatCurrencyTo", qCostExcludingVatCurrencyTo); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CurrencyID != nil {

		// query param currencyId
		var qrCurrencyID string
		if o.CurrencyID != nil {
			qrCurrencyID = *o.CurrencyID
		}
		qCurrencyID := qrCurrencyID
		if qCurrencyID != "" {
			if err := r.SetQueryParam("currencyId", qCurrencyID); err != nil {
				return err
			}
		}

	}

	if o.DepartmentID != nil {

		// query param departmentId
		var qrDepartmentID string
		if o.DepartmentID != nil {
			qrDepartmentID = *o.DepartmentID
		}
		qDepartmentID := qrDepartmentID
		if qDepartmentID != "" {
			if err := r.SetQueryParam("departmentId", qDepartmentID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.IsInactive != nil {

		// query param isInactive
		var qrIsInactive bool
		if o.IsInactive != nil {
			qrIsInactive = *o.IsInactive
		}
		qIsInactive := swag.FormatBool(qrIsInactive)
		if qIsInactive != "" {
			if err := r.SetQueryParam("isInactive", qIsInactive); err != nil {
				return err
			}
		}

	}

	if o.IsStockItem != nil {

		// query param isStockItem
		var qrIsStockItem bool
		if o.IsStockItem != nil {
			qrIsStockItem = *o.IsStockItem
		}
		qIsStockItem := swag.FormatBool(qrIsStockItem)
		if qIsStockItem != "" {
			if err := r.SetQueryParam("isStockItem", qIsStockItem); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Number != nil {

		// query param number
		var qrNumber string
		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {
			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}

	}

	if o.PriceExcludingVatCurrencyFrom != nil {

		// query param priceExcludingVatCurrencyFrom
		var qrPriceExcludingVatCurrencyFrom float64
		if o.PriceExcludingVatCurrencyFrom != nil {
			qrPriceExcludingVatCurrencyFrom = *o.PriceExcludingVatCurrencyFrom
		}
		qPriceExcludingVatCurrencyFrom := swag.FormatFloat64(qrPriceExcludingVatCurrencyFrom)
		if qPriceExcludingVatCurrencyFrom != "" {
			if err := r.SetQueryParam("priceExcludingVatCurrencyFrom", qPriceExcludingVatCurrencyFrom); err != nil {
				return err
			}
		}

	}

	if o.PriceExcludingVatCurrencyTo != nil {

		// query param priceExcludingVatCurrencyTo
		var qrPriceExcludingVatCurrencyTo float64
		if o.PriceExcludingVatCurrencyTo != nil {
			qrPriceExcludingVatCurrencyTo = *o.PriceExcludingVatCurrencyTo
		}
		qPriceExcludingVatCurrencyTo := swag.FormatFloat64(qrPriceExcludingVatCurrencyTo)
		if qPriceExcludingVatCurrencyTo != "" {
			if err := r.SetQueryParam("priceExcludingVatCurrencyTo", qPriceExcludingVatCurrencyTo); err != nil {
				return err
			}
		}

	}

	if o.PriceIncludingVatCurrencyFrom != nil {

		// query param priceIncludingVatCurrencyFrom
		var qrPriceIncludingVatCurrencyFrom float64
		if o.PriceIncludingVatCurrencyFrom != nil {
			qrPriceIncludingVatCurrencyFrom = *o.PriceIncludingVatCurrencyFrom
		}
		qPriceIncludingVatCurrencyFrom := swag.FormatFloat64(qrPriceIncludingVatCurrencyFrom)
		if qPriceIncludingVatCurrencyFrom != "" {
			if err := r.SetQueryParam("priceIncludingVatCurrencyFrom", qPriceIncludingVatCurrencyFrom); err != nil {
				return err
			}
		}

	}

	if o.PriceIncludingVatCurrencyTo != nil {

		// query param priceIncludingVatCurrencyTo
		var qrPriceIncludingVatCurrencyTo float64
		if o.PriceIncludingVatCurrencyTo != nil {
			qrPriceIncludingVatCurrencyTo = *o.PriceIncludingVatCurrencyTo
		}
		qPriceIncludingVatCurrencyTo := swag.FormatFloat64(qrPriceIncludingVatCurrencyTo)
		if qPriceIncludingVatCurrencyTo != "" {
			if err := r.SetQueryParam("priceIncludingVatCurrencyTo", qPriceIncludingVatCurrencyTo); err != nil {
				return err
			}
		}

	}

	valuesProductNumber := o.ProductNumber

	joinedProductNumber := swag.JoinByFormat(valuesProductNumber, "multi")
	// query array param productNumber
	if err := r.SetQueryParam("productNumber", joinedProductNumber...); err != nil {
		return err
	}

	if o.ProductUnitID != nil {

		// query param productUnitId
		var qrProductUnitID string
		if o.ProductUnitID != nil {
			qrProductUnitID = *o.ProductUnitID
		}
		qProductUnitID := qrProductUnitID
		if qProductUnitID != "" {
			if err := r.SetQueryParam("productUnitId", qProductUnitID); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.VatTypeID != nil {

		// query param vatTypeId
		var qrVatTypeID string
		if o.VatTypeID != nil {
			qrVatTypeID = *o.VatTypeID
		}
		qVatTypeID := qrVatTypeID
		if qVatTypeID != "" {
			if err := r.SetQueryParam("vatTypeId", qVatTypeID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
