// Code generated by go-swagger; DO NOT EDIT.

package reconciliation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutBankReconciliationFetchFromBankParams creates a new PutBankReconciliationFetchFromBankParams object
// with the default values initialized.
func NewPutBankReconciliationFetchFromBankParams() *PutBankReconciliationFetchFromBankParams {
	var ()
	return &PutBankReconciliationFetchFromBankParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutBankReconciliationFetchFromBankParamsWithTimeout creates a new PutBankReconciliationFetchFromBankParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutBankReconciliationFetchFromBankParamsWithTimeout(timeout time.Duration) *PutBankReconciliationFetchFromBankParams {
	var ()
	return &PutBankReconciliationFetchFromBankParams{

		timeout: timeout,
	}
}

// NewPutBankReconciliationFetchFromBankParamsWithContext creates a new PutBankReconciliationFetchFromBankParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutBankReconciliationFetchFromBankParamsWithContext(ctx context.Context) *PutBankReconciliationFetchFromBankParams {
	var ()
	return &PutBankReconciliationFetchFromBankParams{

		Context: ctx,
	}
}

// NewPutBankReconciliationFetchFromBankParamsWithHTTPClient creates a new PutBankReconciliationFetchFromBankParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutBankReconciliationFetchFromBankParamsWithHTTPClient(client *http.Client) *PutBankReconciliationFetchFromBankParams {
	var ()
	return &PutBankReconciliationFetchFromBankParams{
		HTTPClient: client,
	}
}

/*PutBankReconciliationFetchFromBankParams contains all the parameters to send to the API endpoint
for the put bank reconciliation fetch from bank operation typically these are written to a http.Request
*/
type PutBankReconciliationFetchFromBankParams struct {

	/*AccountID
	  Element ID

	*/
	AccountID int32
	/*AccountingPeriodID
	  Element ID

	*/
	AccountingPeriodID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) WithTimeout(timeout time.Duration) *PutBankReconciliationFetchFromBankParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) WithContext(ctx context.Context) *PutBankReconciliationFetchFromBankParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) WithHTTPClient(client *http.Client) *PutBankReconciliationFetchFromBankParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) WithAccountID(accountID int32) *PutBankReconciliationFetchFromBankParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) SetAccountID(accountID int32) {
	o.AccountID = accountID
}

// WithAccountingPeriodID adds the accountingPeriodID to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) WithAccountingPeriodID(accountingPeriodID int32) *PutBankReconciliationFetchFromBankParams {
	o.SetAccountingPeriodID(accountingPeriodID)
	return o
}

// SetAccountingPeriodID adds the accountingPeriodId to the put bank reconciliation fetch from bank params
func (o *PutBankReconciliationFetchFromBankParams) SetAccountingPeriodID(accountingPeriodID int32) {
	o.AccountingPeriodID = accountingPeriodID
}

// WriteToRequest writes these params to a swagger request
func (o *PutBankReconciliationFetchFromBankParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param accountId
	qrAccountID := o.AccountID
	qAccountID := swag.FormatInt32(qrAccountID)
	if qAccountID != "" {
		if err := r.SetQueryParam("accountId", qAccountID); err != nil {
			return err
		}
	}

	// query param accountingPeriodId
	qrAccountingPeriodID := o.AccountingPeriodID
	qAccountingPeriodID := swag.FormatInt32(qrAccountingPeriodID)
	if qAccountingPeriodID != "" {
		if err := r.SetQueryParam("accountingPeriodId", qAccountingPeriodID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
