// Code generated by go-swagger; DO NOT EDIT.

package passenger

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new passenger API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for passenger API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTravelExpensePassengerID bs e t a delete passenger
*/
func (a *Client) DeleteTravelExpensePassengerID(params *DeleteTravelExpensePassengerIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTravelExpensePassengerIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTravelExpensePassengerID",
		Method:             "DELETE",
		PathPattern:        "/travelExpense/passenger/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTravelExpensePassengerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetTravelExpensePassenger bs e t a find passengers corresponding with sent data
*/
func (a *Client) GetTravelExpensePassenger(params *GetTravelExpensePassengerParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpensePassengerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpensePassengerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpensePassenger",
		Method:             "GET",
		PathPattern:        "/travelExpense/passenger",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpensePassengerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpensePassengerOK), nil

}

/*
GetTravelExpensePassengerID bs e t a get passenger by ID
*/
func (a *Client) GetTravelExpensePassengerID(params *GetTravelExpensePassengerIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpensePassengerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpensePassengerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpensePassengerID",
		Method:             "GET",
		PathPattern:        "/travelExpense/passenger/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpensePassengerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpensePassengerIDOK), nil

}

/*
PostTravelExpensePassenger bs e t a create passenger
*/
func (a *Client) PostTravelExpensePassenger(params *PostTravelExpensePassengerParams, authInfo runtime.ClientAuthInfoWriter) (*PostTravelExpensePassengerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTravelExpensePassengerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTravelExpensePassenger",
		Method:             "POST",
		PathPattern:        "/travelExpense/passenger",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTravelExpensePassengerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTravelExpensePassengerCreated), nil

}

/*
PutTravelExpensePassengerID bs e t a update passenger
*/
func (a *Client) PutTravelExpensePassengerID(params *PutTravelExpensePassengerIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpensePassengerIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpensePassengerIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpensePassengerID",
		Method:             "PUT",
		PathPattern:        "/travelExpense/passenger/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpensePassengerIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpensePassengerIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
