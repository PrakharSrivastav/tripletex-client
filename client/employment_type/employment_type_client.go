// Code generated by go-swagger; DO NOT EDIT.

package employment_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employment type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employment type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEmployeeEmploymentEmploymentType bs e t a find all employment type ids
*/
func (a *Client) GetEmployeeEmploymentEmploymentType(params *GetEmployeeEmploymentEmploymentTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentEmploymentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentEmploymentTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentEmploymentType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentEmploymentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentEmploymentTypeOK), nil

}

/*
GetEmployeeEmploymentEmploymentTypeMaritimeEmploymentType bs e t a find all maritime employment type ids
*/
func (a *Client) GetEmployeeEmploymentEmploymentTypeMaritimeEmploymentType(params *GetEmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentEmploymentTypeMaritimeEmploymentType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/maritimeEmploymentType",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentEmploymentTypeMaritimeEmploymentTypeOK), nil

}

/*
GetEmployeeEmploymentEmploymentTypeSalaryType bs e t a find all salary type ids
*/
func (a *Client) GetEmployeeEmploymentEmploymentTypeSalaryType(params *GetEmployeeEmploymentEmploymentTypeSalaryTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentEmploymentTypeSalaryTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentEmploymentTypeSalaryTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentEmploymentTypeSalaryType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/salaryType",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentEmploymentTypeSalaryTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentEmploymentTypeSalaryTypeOK), nil

}

/*
GetEmployeeEmploymentEmploymentTypeScheduleType bs e t a find all schedule type ids
*/
func (a *Client) GetEmployeeEmploymentEmploymentTypeScheduleType(params *GetEmployeeEmploymentEmploymentTypeScheduleTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentEmploymentTypeScheduleTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentEmploymentTypeScheduleTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentEmploymentTypeScheduleType",
		Method:             "GET",
		PathPattern:        "/employee/employment/employmentType/scheduleType",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentEmploymentTypeScheduleTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentEmploymentTypeScheduleTypeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
