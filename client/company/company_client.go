// Code generated by go-swagger; DO NOT EDIT.

package company

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import strfmt "github.com/go-openapi/strfmt"

// New creates a new company API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for company API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCompanyDivisions ds e p r e c a t e d find divisions
*/
func (a *Client) GetCompanyDivisions(params *GetCompanyDivisionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompanyDivisionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompanyDivisionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCompanyDivisions",
		Method:             "GET",
		PathPattern:        "/company/divisions",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompanyDivisionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompanyDivisionsOK), nil

}

/*
GetCompanyID finds company by ID
*/
func (a *Client) GetCompanyID(params *GetCompanyIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompanyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompanyIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCompanyID",
		Method:             "GET",
		PathPattern:        "/company/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompanyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompanyIDOK), nil

}

/*
GetCompanyWithLoginAccess returns client customers with accountant auditor relation where the current user has login access proxy login
*/
func (a *Client) GetCompanyWithLoginAccess(params *GetCompanyWithLoginAccessParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompanyWithLoginAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompanyWithLoginAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCompanyWithLoginAccess",
		Method:             "GET",
		PathPattern:        "/company/withLoginAccess",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCompanyWithLoginAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompanyWithLoginAccessOK), nil

}

/*
PutCompany updates company information
*/
func (a *Client) PutCompany(params *PutCompanyParams, authInfo runtime.ClientAuthInfoWriter) (*PutCompanyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCompanyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCompany",
		Method:             "PUT",
		PathPattern:        "/company",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCompanyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCompanyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
