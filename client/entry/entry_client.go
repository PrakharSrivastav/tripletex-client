// Code generated by go-swagger; DO NOT EDIT.

package entry

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new entry API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for entry API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTimesheetEntryID deletes timesheet entry by ID
*/
func (a *Client) DeleteTimesheetEntryID(params *DeleteTimesheetEntryIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTimesheetEntryIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTimesheetEntryID",
		Method:             "DELETE",
		PathPattern:        "/timesheet/entry/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTimesheetEntryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetTimesheetEntry finds timesheet entry corresponding with sent data
*/
func (a *Client) GetTimesheetEntry(params *GetTimesheetEntryParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimesheetEntryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimesheetEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTimesheetEntry",
		Method:             "GET",
		PathPattern:        "/timesheet/entry",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTimesheetEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTimesheetEntryOK), nil

}

/*
GetTimesheetEntryID finds timesheet entry by ID
*/
func (a *Client) GetTimesheetEntryID(params *GetTimesheetEntryIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimesheetEntryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimesheetEntryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTimesheetEntryID",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTimesheetEntryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTimesheetEntryIDOK), nil

}

/*
GetTimesheetEntryRecentActivities finds recently used timesheet activities
*/
func (a *Client) GetTimesheetEntryRecentActivities(params *GetTimesheetEntryRecentActivitiesParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimesheetEntryRecentActivitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimesheetEntryRecentActivitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTimesheetEntryRecentActivities",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/recentActivities",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTimesheetEntryRecentActivitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTimesheetEntryRecentActivitiesOK), nil

}

/*
GetTimesheetEntryRecentProjects finds projects with recent activities timesheet entry registered
*/
func (a *Client) GetTimesheetEntryRecentProjects(params *GetTimesheetEntryRecentProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimesheetEntryRecentProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimesheetEntryRecentProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTimesheetEntryRecentProjects",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/recentProjects",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTimesheetEntryRecentProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTimesheetEntryRecentProjectsOK), nil

}

/*
GetTimesheetEntryTotalHours finds total hours registered on an employee in a specific period
*/
func (a *Client) GetTimesheetEntryTotalHours(params *GetTimesheetEntryTotalHoursParams, authInfo runtime.ClientAuthInfoWriter) (*GetTimesheetEntryTotalHoursOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTimesheetEntryTotalHoursParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTimesheetEntryTotalHours",
		Method:             "GET",
		PathPattern:        "/timesheet/entry/totalHours",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTimesheetEntryTotalHoursReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTimesheetEntryTotalHoursOK), nil

}

/*
PostTimesheetEntry adds new timesheet entry only one entry per employee date activity project combination is supported
*/
func (a *Client) PostTimesheetEntry(params *PostTimesheetEntryParams, authInfo runtime.ClientAuthInfoWriter) (*PostTimesheetEntryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTimesheetEntryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTimesheetEntry",
		Method:             "POST",
		PathPattern:        "/timesheet/entry",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTimesheetEntryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTimesheetEntryCreated), nil

}

/*
PostTimesheetEntryList adds new timesheet entry multiple objects for several users can be sent in the same request
*/
func (a *Client) PostTimesheetEntryList(params *PostTimesheetEntryListParams, authInfo runtime.ClientAuthInfoWriter) (*PostTimesheetEntryListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTimesheetEntryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTimesheetEntryList",
		Method:             "POST",
		PathPattern:        "/timesheet/entry/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTimesheetEntryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTimesheetEntryListCreated), nil

}

/*
PutTimesheetEntryID updates timesheet entry by ID note timesheet entry object fields which are present but not set or set to 0 will be nulled
*/
func (a *Client) PutTimesheetEntryID(params *PutTimesheetEntryIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTimesheetEntryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTimesheetEntryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTimesheetEntryID",
		Method:             "PUT",
		PathPattern:        "/timesheet/entry/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTimesheetEntryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTimesheetEntryIDOK), nil

}

/*
PutTimesheetEntryList updates timesheet entry multiple objects for different users can be sent in the same request
*/
func (a *Client) PutTimesheetEntryList(params *PutTimesheetEntryListParams, authInfo runtime.ClientAuthInfoWriter) (*PutTimesheetEntryListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTimesheetEntryListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTimesheetEntryList",
		Method:             "PUT",
		PathPattern:        "/timesheet/entry/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTimesheetEntryListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTimesheetEntryListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
