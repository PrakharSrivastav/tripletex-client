// Code generated by go-swagger; DO NOT EDIT.

package participant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new participant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for participant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteProjectParticipantList bs e t a delete project participants
*/
func (a *Client) DeleteProjectParticipantList(params *DeleteProjectParticipantListParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParticipantListParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteProjectParticipantList",
		Method:             "DELETE",
		PathPattern:        "/project/participant/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteProjectParticipantListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetProjectParticipantID bs e t a find project participant by ID
*/
func (a *Client) GetProjectParticipantID(params *GetProjectParticipantIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectParticipantIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProjectParticipantID",
		Method:             "GET",
		PathPattern:        "/project/participant/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectParticipantIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectParticipantIDOK), nil

}

/*
PostProjectParticipant bs e t a add new project participant
*/
func (a *Client) PostProjectParticipant(params *PostProjectParticipantParams, authInfo runtime.ClientAuthInfoWriter) (*PostProjectParticipantCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectParticipantParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProjectParticipant",
		Method:             "POST",
		PathPattern:        "/project/participant",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProjectParticipantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectParticipantCreated), nil

}

/*
PostProjectParticipantList bs e t a register new projects multiple projects for different users can be sent in the same request
*/
func (a *Client) PostProjectParticipantList(params *PostProjectParticipantListParams, authInfo runtime.ClientAuthInfoWriter) (*PostProjectParticipantListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectParticipantListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProjectParticipantList",
		Method:             "POST",
		PathPattern:        "/project/participant/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProjectParticipantListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectParticipantListCreated), nil

}

/*
PutProjectParticipantID bs e t a update project participant
*/
func (a *Client) PutProjectParticipantID(params *PutProjectParticipantIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutProjectParticipantIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectParticipantIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutProjectParticipantID",
		Method:             "PUT",
		PathPattern:        "/project/participant/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProjectParticipantIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutProjectParticipantIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
