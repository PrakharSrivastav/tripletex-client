// Code generated by go-swagger; DO NOT EDIT.

package standard_time

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new standard time API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for standard time API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEmployeeStandardTime bs e t a find all standard times for employee
*/
func (a *Client) GetEmployeeStandardTime(params *GetEmployeeStandardTimeParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeStandardTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeStandardTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeStandardTime",
		Method:             "GET",
		PathPattern:        "/employee/standardTime",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeStandardTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeStandardTimeOK), nil

}

/*
GetEmployeeStandardTimeID bs e t a find standard time by ID
*/
func (a *Client) GetEmployeeStandardTimeID(params *GetEmployeeStandardTimeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeStandardTimeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeStandardTimeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeStandardTimeID",
		Method:             "GET",
		PathPattern:        "/employee/standardTime/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeStandardTimeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeStandardTimeIDOK), nil

}

/*
PostEmployeeStandardTime bs e t a create standard time
*/
func (a *Client) PostEmployeeStandardTime(params *PostEmployeeStandardTimeParams, authInfo runtime.ClientAuthInfoWriter) (*PostEmployeeStandardTimeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEmployeeStandardTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEmployeeStandardTime",
		Method:             "POST",
		PathPattern:        "/employee/standardTime",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEmployeeStandardTimeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEmployeeStandardTimeCreated), nil

}

/*
PutEmployeeStandardTimeID bs e t a update standard time
*/
func (a *Client) PutEmployeeStandardTimeID(params *PutEmployeeStandardTimeIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutEmployeeStandardTimeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEmployeeStandardTimeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEmployeeStandardTimeID",
		Method:             "PUT",
		PathPattern:        "/employee/standardTime/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEmployeeStandardTimeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEmployeeStandardTimeIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
