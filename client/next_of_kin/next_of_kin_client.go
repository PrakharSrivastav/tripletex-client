// Code generated by go-swagger; DO NOT EDIT.

package next_of_kin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new next of kin API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for next of kin API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEmployeeNextOfKin finds all next of kin for employee
*/
func (a *Client) GetEmployeeNextOfKin(params *GetEmployeeNextOfKinParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeNextOfKinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeNextOfKinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeNextOfKin",
		Method:             "GET",
		PathPattern:        "/employee/nextOfKin",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeNextOfKinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeNextOfKinOK), nil

}

/*
GetEmployeeNextOfKinID bs e t a find next of kin by ID
*/
func (a *Client) GetEmployeeNextOfKinID(params *GetEmployeeNextOfKinIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeNextOfKinIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeNextOfKinIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeNextOfKinID",
		Method:             "GET",
		PathPattern:        "/employee/nextOfKin/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeNextOfKinIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeNextOfKinIDOK), nil

}

/*
PostEmployeeNextOfKin bs e t a create next of kin
*/
func (a *Client) PostEmployeeNextOfKin(params *PostEmployeeNextOfKinParams, authInfo runtime.ClientAuthInfoWriter) (*PostEmployeeNextOfKinCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEmployeeNextOfKinParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEmployeeNextOfKin",
		Method:             "POST",
		PathPattern:        "/employee/nextOfKin",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEmployeeNextOfKinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEmployeeNextOfKinCreated), nil

}

/*
PutEmployeeNextOfKinID bs e t a update next of kin
*/
func (a *Client) PutEmployeeNextOfKinID(params *PutEmployeeNextOfKinIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutEmployeeNextOfKinIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEmployeeNextOfKinIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEmployeeNextOfKinID",
		Method:             "PUT",
		PathPattern:        "/employee/nextOfKin/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEmployeeNextOfKinIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEmployeeNextOfKinIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
