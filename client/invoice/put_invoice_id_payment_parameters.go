// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutInvoiceIDPaymentParams creates a new PutInvoiceIDPaymentParams object
// with the default values initialized.
func NewPutInvoiceIDPaymentParams() *PutInvoiceIDPaymentParams {
	var ()
	return &PutInvoiceIDPaymentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutInvoiceIDPaymentParamsWithTimeout creates a new PutInvoiceIDPaymentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutInvoiceIDPaymentParamsWithTimeout(timeout time.Duration) *PutInvoiceIDPaymentParams {
	var ()
	return &PutInvoiceIDPaymentParams{

		timeout: timeout,
	}
}

// NewPutInvoiceIDPaymentParamsWithContext creates a new PutInvoiceIDPaymentParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutInvoiceIDPaymentParamsWithContext(ctx context.Context) *PutInvoiceIDPaymentParams {
	var ()
	return &PutInvoiceIDPaymentParams{

		Context: ctx,
	}
}

// NewPutInvoiceIDPaymentParamsWithHTTPClient creates a new PutInvoiceIDPaymentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutInvoiceIDPaymentParamsWithHTTPClient(client *http.Client) *PutInvoiceIDPaymentParams {
	var ()
	return &PutInvoiceIDPaymentParams{
		HTTPClient: client,
	}
}

/*PutInvoiceIDPaymentParams contains all the parameters to send to the API endpoint
for the put invoice ID payment operation typically these are written to a http.Request
*/
type PutInvoiceIDPaymentParams struct {

	/*ID
	  Invoice id

	*/
	ID int32
	/*PaidAmount
	  Amount paid by customer in the company currency, typically NOK.

	*/
	PaidAmount float64
	/*PaidAmountCurrency
	  Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.

	*/
	PaidAmountCurrency *float64
	/*PaymentDate
	  Payment date

	*/
	PaymentDate string
	/*PaymentTypeID
	  PaymentType id

	*/
	PaymentTypeID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithTimeout(timeout time.Duration) *PutInvoiceIDPaymentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithContext(ctx context.Context) *PutInvoiceIDPaymentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithHTTPClient(client *http.Client) *PutInvoiceIDPaymentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithID(id int32) *PutInvoiceIDPaymentParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetID(id int32) {
	o.ID = id
}

// WithPaidAmount adds the paidAmount to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithPaidAmount(paidAmount float64) *PutInvoiceIDPaymentParams {
	o.SetPaidAmount(paidAmount)
	return o
}

// SetPaidAmount adds the paidAmount to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetPaidAmount(paidAmount float64) {
	o.PaidAmount = paidAmount
}

// WithPaidAmountCurrency adds the paidAmountCurrency to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithPaidAmountCurrency(paidAmountCurrency *float64) *PutInvoiceIDPaymentParams {
	o.SetPaidAmountCurrency(paidAmountCurrency)
	return o
}

// SetPaidAmountCurrency adds the paidAmountCurrency to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetPaidAmountCurrency(paidAmountCurrency *float64) {
	o.PaidAmountCurrency = paidAmountCurrency
}

// WithPaymentDate adds the paymentDate to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithPaymentDate(paymentDate string) *PutInvoiceIDPaymentParams {
	o.SetPaymentDate(paymentDate)
	return o
}

// SetPaymentDate adds the paymentDate to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetPaymentDate(paymentDate string) {
	o.PaymentDate = paymentDate
}

// WithPaymentTypeID adds the paymentTypeID to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) WithPaymentTypeID(paymentTypeID int32) *PutInvoiceIDPaymentParams {
	o.SetPaymentTypeID(paymentTypeID)
	return o
}

// SetPaymentTypeID adds the paymentTypeId to the put invoice ID payment params
func (o *PutInvoiceIDPaymentParams) SetPaymentTypeID(paymentTypeID int32) {
	o.PaymentTypeID = paymentTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *PutInvoiceIDPaymentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	// query param paidAmount
	qrPaidAmount := o.PaidAmount
	qPaidAmount := swag.FormatFloat64(qrPaidAmount)
	if qPaidAmount != "" {
		if err := r.SetQueryParam("paidAmount", qPaidAmount); err != nil {
			return err
		}
	}

	if o.PaidAmountCurrency != nil {

		// query param paidAmountCurrency
		var qrPaidAmountCurrency float64
		if o.PaidAmountCurrency != nil {
			qrPaidAmountCurrency = *o.PaidAmountCurrency
		}
		qPaidAmountCurrency := swag.FormatFloat64(qrPaidAmountCurrency)
		if qPaidAmountCurrency != "" {
			if err := r.SetQueryParam("paidAmountCurrency", qPaidAmountCurrency); err != nil {
				return err
			}
		}

	}

	// query param paymentDate
	qrPaymentDate := o.PaymentDate
	qPaymentDate := qrPaymentDate
	if qPaymentDate != "" {
		if err := r.SetQueryParam("paymentDate", qPaymentDate); err != nil {
			return err
		}
	}

	// query param paymentTypeId
	qrPaymentTypeID := o.PaymentTypeID
	qPaymentTypeID := swag.FormatInt32(qrPaymentTypeID)
	if qPaymentTypeID != "" {
		if err := r.SetQueryParam("paymentTypeId", qPaymentTypeID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
