// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new invoice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for invoice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetInvoice finds invoices corresponding with sent data includes charged outgoing invoices only
*/
func (a *Client) GetInvoice(params *GetInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvoice",
		Method:             "GET",
		PathPattern:        "/invoice",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvoiceOK), nil

}

/*
GetInvoiceID gets invoice by ID
*/
func (a *Client) GetInvoiceID(params *GetInvoiceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvoiceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvoiceID",
		Method:             "GET",
		PathPattern:        "/invoice/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvoiceIDOK), nil

}

/*
GetInvoiceInvoiceIDPdf gets invoice document by invoice ID
*/
func (a *Client) GetInvoiceInvoiceIDPdf(params *GetInvoiceInvoiceIDPdfParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvoiceInvoiceIDPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceInvoiceIDPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvoiceInvoiceIDPdf",
		Method:             "GET",
		PathPattern:        "/invoice/{invoiceId}/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceInvoiceIDPdfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvoiceInvoiceIDPdfOK), nil

}

/*
PostInvoice creates invoice
*/
func (a *Client) PostInvoice(params *PostInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*PostInvoiceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostInvoice",
		Method:             "POST",
		PathPattern:        "/invoice",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostInvoiceCreated), nil

}

/*
PutInvoiceIDCreateCreditNote bs e t a creates a new invoice representing a credit memo that nullifies the given invoice updates this invoice and any pre existing inverse invoice
*/
func (a *Client) PutInvoiceIDCreateCreditNote(params *PutInvoiceIDCreateCreditNoteParams, authInfo runtime.ClientAuthInfoWriter) (*PutInvoiceIDCreateCreditNoteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInvoiceIDCreateCreditNoteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutInvoiceIDCreateCreditNote",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:createCreditNote",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInvoiceIDCreateCreditNoteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutInvoiceIDCreateCreditNoteOK), nil

}

/*
PutInvoiceIDCreateReminder bs e t a create invoice reminder and sends it by the given dispatch type supports the reminder types s o f t r e m i n d e r r e m i n d e r and n o t i c e o f d e b t c o l l e c t i o n dispatch type n e t s p r i n t must have type n o t i c e o f d e b t c o l l e c t i o n s m s and n e t s p r i n t must be activated prior to usage in the API
*/
func (a *Client) PutInvoiceIDCreateReminder(params *PutInvoiceIDCreateReminderParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInvoiceIDCreateReminderParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutInvoiceIDCreateReminder",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:createReminder",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInvoiceIDCreateReminderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutInvoiceIDPayment updates invoice the invoice is updated with payment information the amount is in the invoice s currency
*/
func (a *Client) PutInvoiceIDPayment(params *PutInvoiceIDPaymentParams, authInfo runtime.ClientAuthInfoWriter) (*PutInvoiceIDPaymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInvoiceIDPaymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutInvoiceIDPayment",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:payment",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInvoiceIDPaymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutInvoiceIDPaymentOK), nil

}

/*
PutInvoiceIDSend bs e t a send invoice by ID and send type optionally override email recipient
*/
func (a *Client) PutInvoiceIDSend(params *PutInvoiceIDSendParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutInvoiceIDSendParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutInvoiceIDSend",
		Method:             "PUT",
		PathPattern:        "/invoice/{id}/:send",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutInvoiceIDSendReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
