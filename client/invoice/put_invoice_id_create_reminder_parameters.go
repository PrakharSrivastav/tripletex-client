// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutInvoiceIDCreateReminderParams creates a new PutInvoiceIDCreateReminderParams object
// with the default values initialized.
func NewPutInvoiceIDCreateReminderParams() *PutInvoiceIDCreateReminderParams {
	var (
		includeChargeDefault   = bool(false)
		includeInterestDefault = bool(false)
	)
	return &PutInvoiceIDCreateReminderParams{
		IncludeCharge:   &includeChargeDefault,
		IncludeInterest: &includeInterestDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPutInvoiceIDCreateReminderParamsWithTimeout creates a new PutInvoiceIDCreateReminderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutInvoiceIDCreateReminderParamsWithTimeout(timeout time.Duration) *PutInvoiceIDCreateReminderParams {
	var (
		includeChargeDefault   = bool(false)
		includeInterestDefault = bool(false)
	)
	return &PutInvoiceIDCreateReminderParams{
		IncludeCharge:   &includeChargeDefault,
		IncludeInterest: &includeInterestDefault,

		timeout: timeout,
	}
}

// NewPutInvoiceIDCreateReminderParamsWithContext creates a new PutInvoiceIDCreateReminderParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutInvoiceIDCreateReminderParamsWithContext(ctx context.Context) *PutInvoiceIDCreateReminderParams {
	var (
		includeChargeDefault   = bool(false)
		includeInterestDefault = bool(false)
	)
	return &PutInvoiceIDCreateReminderParams{
		IncludeCharge:   &includeChargeDefault,
		IncludeInterest: &includeInterestDefault,

		Context: ctx,
	}
}

// NewPutInvoiceIDCreateReminderParamsWithHTTPClient creates a new PutInvoiceIDCreateReminderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutInvoiceIDCreateReminderParamsWithHTTPClient(client *http.Client) *PutInvoiceIDCreateReminderParams {
	var (
		includeChargeDefault   = bool(false)
		includeInterestDefault = bool(false)
	)
	return &PutInvoiceIDCreateReminderParams{
		IncludeCharge:   &includeChargeDefault,
		IncludeInterest: &includeInterestDefault,
		HTTPClient:      client,
	}
}

/*PutInvoiceIDCreateReminderParams contains all the parameters to send to the API endpoint
for the put invoice ID create reminder operation typically these are written to a http.Request
*/
type PutInvoiceIDCreateReminderParams struct {

	/*Date
	  yyyy-MM-dd. Defaults to today.

	*/
	Date string
	/*DispatchType
	  dispatchType

	*/
	DispatchType string
	/*ID
	  Element ID

	*/
	ID int32
	/*IncludeCharge
	  Equals

	*/
	IncludeCharge *bool
	/*IncludeInterest
	  Equals

	*/
	IncludeInterest *bool
	/*SmsNumber
	  SMS number (must be a valid Norwegian telephone number)

	*/
	SmsNumber *string
	/*Type
	  type

	*/
	Type string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithTimeout(timeout time.Duration) *PutInvoiceIDCreateReminderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithContext(ctx context.Context) *PutInvoiceIDCreateReminderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithHTTPClient(client *http.Client) *PutInvoiceIDCreateReminderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDate adds the date to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithDate(date string) *PutInvoiceIDCreateReminderParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetDate(date string) {
	o.Date = date
}

// WithDispatchType adds the dispatchType to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithDispatchType(dispatchType string) *PutInvoiceIDCreateReminderParams {
	o.SetDispatchType(dispatchType)
	return o
}

// SetDispatchType adds the dispatchType to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetDispatchType(dispatchType string) {
	o.DispatchType = dispatchType
}

// WithID adds the id to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithID(id int32) *PutInvoiceIDCreateReminderParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetID(id int32) {
	o.ID = id
}

// WithIncludeCharge adds the includeCharge to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithIncludeCharge(includeCharge *bool) *PutInvoiceIDCreateReminderParams {
	o.SetIncludeCharge(includeCharge)
	return o
}

// SetIncludeCharge adds the includeCharge to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetIncludeCharge(includeCharge *bool) {
	o.IncludeCharge = includeCharge
}

// WithIncludeInterest adds the includeInterest to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithIncludeInterest(includeInterest *bool) *PutInvoiceIDCreateReminderParams {
	o.SetIncludeInterest(includeInterest)
	return o
}

// SetIncludeInterest adds the includeInterest to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetIncludeInterest(includeInterest *bool) {
	o.IncludeInterest = includeInterest
}

// WithSmsNumber adds the smsNumber to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithSmsNumber(smsNumber *string) *PutInvoiceIDCreateReminderParams {
	o.SetSmsNumber(smsNumber)
	return o
}

// SetSmsNumber adds the smsNumber to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetSmsNumber(smsNumber *string) {
	o.SmsNumber = smsNumber
}

// WithType adds the typeVar to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) WithType(typeVar string) *PutInvoiceIDCreateReminderParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the put invoice ID create reminder params
func (o *PutInvoiceIDCreateReminderParams) SetType(typeVar string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *PutInvoiceIDCreateReminderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param date
	qrDate := o.Date
	qDate := qrDate
	if qDate != "" {
		if err := r.SetQueryParam("date", qDate); err != nil {
			return err
		}
	}

	// query param dispatchType
	qrDispatchType := o.DispatchType
	qDispatchType := qrDispatchType
	if qDispatchType != "" {
		if err := r.SetQueryParam("dispatchType", qDispatchType); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.IncludeCharge != nil {

		// query param includeCharge
		var qrIncludeCharge bool
		if o.IncludeCharge != nil {
			qrIncludeCharge = *o.IncludeCharge
		}
		qIncludeCharge := swag.FormatBool(qrIncludeCharge)
		if qIncludeCharge != "" {
			if err := r.SetQueryParam("includeCharge", qIncludeCharge); err != nil {
				return err
			}
		}

	}

	if o.IncludeInterest != nil {

		// query param includeInterest
		var qrIncludeInterest bool
		if o.IncludeInterest != nil {
			qrIncludeInterest = *o.IncludeInterest
		}
		qIncludeInterest := swag.FormatBool(qrIncludeInterest)
		if qIncludeInterest != "" {
			if err := r.SetQueryParam("includeInterest", qIncludeInterest); err != nil {
				return err
			}
		}

	}

	if o.SmsNumber != nil {

		// query param smsNumber
		var qrSmsNumber string
		if o.SmsNumber != nil {
			qrSmsNumber = *o.SmsNumber
		}
		qSmsNumber := qrSmsNumber
		if qSmsNumber != "" {
			if err := r.SetQueryParam("smsNumber", qSmsNumber); err != nil {
				return err
			}
		}

	}

	// query param type
	qrType := o.Type
	qType := qrType
	if qType != "" {
		if err := r.SetQueryParam("type", qType); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
