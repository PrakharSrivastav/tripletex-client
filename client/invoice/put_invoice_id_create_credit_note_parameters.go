// Code generated by go-swagger; DO NOT EDIT.

package invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutInvoiceIDCreateCreditNoteParams creates a new PutInvoiceIDCreateCreditNoteParams object
// with the default values initialized.
func NewPutInvoiceIDCreateCreditNoteParams() *PutInvoiceIDCreateCreditNoteParams {
	var ()
	return &PutInvoiceIDCreateCreditNoteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutInvoiceIDCreateCreditNoteParamsWithTimeout creates a new PutInvoiceIDCreateCreditNoteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutInvoiceIDCreateCreditNoteParamsWithTimeout(timeout time.Duration) *PutInvoiceIDCreateCreditNoteParams {
	var ()
	return &PutInvoiceIDCreateCreditNoteParams{

		timeout: timeout,
	}
}

// NewPutInvoiceIDCreateCreditNoteParamsWithContext creates a new PutInvoiceIDCreateCreditNoteParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutInvoiceIDCreateCreditNoteParamsWithContext(ctx context.Context) *PutInvoiceIDCreateCreditNoteParams {
	var ()
	return &PutInvoiceIDCreateCreditNoteParams{

		Context: ctx,
	}
}

// NewPutInvoiceIDCreateCreditNoteParamsWithHTTPClient creates a new PutInvoiceIDCreateCreditNoteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutInvoiceIDCreateCreditNoteParamsWithHTTPClient(client *http.Client) *PutInvoiceIDCreateCreditNoteParams {
	var ()
	return &PutInvoiceIDCreateCreditNoteParams{
		HTTPClient: client,
	}
}

/*PutInvoiceIDCreateCreditNoteParams contains all the parameters to send to the API endpoint
for the put invoice ID create credit note operation typically these are written to a http.Request
*/
type PutInvoiceIDCreateCreditNoteParams struct {

	/*Comment
	  Comment

	*/
	Comment *string
	/*CreditNoteEmail
	  The credit note will be sent electronically if this field is filled out

	*/
	CreditNoteEmail *string
	/*Date
	  Credit note date

	*/
	Date string
	/*ID
	  Invoice id

	*/
	ID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) WithTimeout(timeout time.Duration) *PutInvoiceIDCreateCreditNoteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) WithContext(ctx context.Context) *PutInvoiceIDCreateCreditNoteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) WithHTTPClient(client *http.Client) *PutInvoiceIDCreateCreditNoteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComment adds the comment to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) WithComment(comment *string) *PutInvoiceIDCreateCreditNoteParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithCreditNoteEmail adds the creditNoteEmail to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) WithCreditNoteEmail(creditNoteEmail *string) *PutInvoiceIDCreateCreditNoteParams {
	o.SetCreditNoteEmail(creditNoteEmail)
	return o
}

// SetCreditNoteEmail adds the creditNoteEmail to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) SetCreditNoteEmail(creditNoteEmail *string) {
	o.CreditNoteEmail = creditNoteEmail
}

// WithDate adds the date to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) WithDate(date string) *PutInvoiceIDCreateCreditNoteParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) SetDate(date string) {
	o.Date = date
}

// WithID adds the id to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) WithID(id int32) *PutInvoiceIDCreateCreditNoteParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put invoice ID create credit note params
func (o *PutInvoiceIDCreateCreditNoteParams) SetID(id int32) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *PutInvoiceIDCreateCreditNoteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Comment != nil {

		// query param comment
		var qrComment string
		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {
			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}

	}

	if o.CreditNoteEmail != nil {

		// query param creditNoteEmail
		var qrCreditNoteEmail string
		if o.CreditNoteEmail != nil {
			qrCreditNoteEmail = *o.CreditNoteEmail
		}
		qCreditNoteEmail := qrCreditNoteEmail
		if qCreditNoteEmail != "" {
			if err := r.SetQueryParam("creditNoteEmail", qCreditNoteEmail); err != nil {
				return err
			}
		}

	}

	// query param date
	qrDate := o.Date
	qDate := qrDate
	if qDate != "" {
		if err := r.SetQueryParam("date", qDate); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
