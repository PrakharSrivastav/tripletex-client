// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new voucher API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for voucher API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLedgerVoucherID bs e t a delete voucher by ID
*/
func (a *Client) DeleteLedgerVoucherID(params *DeleteLedgerVoucherIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLedgerVoucherIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLedgerVoucherID",
		Method:             "DELETE",
		PathPattern:        "/ledger/voucher/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLedgerVoucherIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetLedgerVoucher finds vouchers corresponding with sent data
*/
func (a *Client) GetLedgerVoucher(params *GetLedgerVoucherParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerVoucherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerVoucherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerVoucher",
		Method:             "GET",
		PathPattern:        "/ledger/voucher",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerVoucherReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerVoucherOK), nil

}

/*
GetLedgerVoucherID gets voucher by ID
*/
func (a *Client) GetLedgerVoucherID(params *GetLedgerVoucherIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerVoucherIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerVoucherIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerVoucherID",
		Method:             "GET",
		PathPattern:        "/ledger/voucher/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerVoucherIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerVoucherIDOK), nil

}

/*
GetLedgerVoucherNonPosted bs e t a find non posted vouchers
*/
func (a *Client) GetLedgerVoucherNonPosted(params *GetLedgerVoucherNonPostedParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerVoucherNonPostedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerVoucherNonPostedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerVoucherNonPosted",
		Method:             "GET",
		PathPattern:        "/ledger/voucher/nonPosted",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerVoucherNonPostedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerVoucherNonPostedOK), nil

}

/*
GetLedgerVoucherVoucherIDPdf gets attachment by voucher ID
*/
func (a *Client) GetLedgerVoucherVoucherIDPdf(params *GetLedgerVoucherVoucherIDPdfParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerVoucherVoucherIDPdfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerVoucherVoucherIDPdfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerVoucherVoucherIDPdf",
		Method:             "GET",
		PathPattern:        "/ledger/voucher/{voucherId}/pdf",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerVoucherVoucherIDPdfReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerVoucherVoucherIDPdfOK), nil

}

/*
PostLedgerVoucher adds new voucher i m p o r t a n t also creates postings only the gross amounts will be used
*/
func (a *Client) PostLedgerVoucher(params *PostLedgerVoucherParams, authInfo runtime.ClientAuthInfoWriter) (*PostLedgerVoucherCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerVoucherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerVoucher",
		Method:             "POST",
		PathPattern:        "/ledger/voucher",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerVoucherReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLedgerVoucherCreated), nil

}

/*
PostLedgerVoucherImportDocument bs e t a upload a document to create one or more vouchers valid document formats are p d f p n g j p e g t i f f and e h f send as multipart form
*/
func (a *Client) PostLedgerVoucherImportDocument(params *PostLedgerVoucherImportDocumentParams, authInfo runtime.ClientAuthInfoWriter) (*PostLedgerVoucherImportDocumentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerVoucherImportDocumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerVoucherImportDocument",
		Method:             "POST",
		PathPattern:        "/ledger/voucher/importDocument",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerVoucherImportDocumentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLedgerVoucherImportDocumentCreated), nil

}

/*
PostLedgerVoucherImportGbat10 imports g b a t10 send as multipart form
*/
func (a *Client) PostLedgerVoucherImportGbat10(params *PostLedgerVoucherImportGbat10Params, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerVoucherImportGbat10Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerVoucherImportGbat10",
		Method:             "POST",
		PathPattern:        "/ledger/voucher/importGbat10",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerVoucherImportGbat10Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PostLedgerVoucherVoucherIDPdfFileName uploads attachment to voucher send as multipart form
*/
func (a *Client) PostLedgerVoucherVoucherIDPdfFileName(params *PostLedgerVoucherVoucherIDPdfFileNameParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerVoucherVoucherIDPdfFileNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerVoucherVoucherIDPdfFileName",
		Method:             "POST",
		PathPattern:        "/ledger/voucher/{voucherId}/pdf/{fileName}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerVoucherVoucherIDPdfFileNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutLedgerVoucherID bs e t a update voucher postings with gui row 0 will be deleted and regenerated
*/
func (a *Client) PutLedgerVoucherID(params *PutLedgerVoucherIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerVoucherIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerVoucherIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerVoucherID",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerVoucherIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerVoucherIDOK), nil

}

/*
PutLedgerVoucherIDReverse reverses the voucher and returns the reversed voucher supports reversing most voucher types except salary transactions
*/
func (a *Client) PutLedgerVoucherIDReverse(params *PutLedgerVoucherIDReverseParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerVoucherIDReverseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerVoucherIDReverseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerVoucherIDReverse",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}/:reverse",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerVoucherIDReverseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerVoucherIDReverseOK), nil

}

/*
PutLedgerVoucherIDSendToInbox bs e t a send voucher to inbox
*/
func (a *Client) PutLedgerVoucherIDSendToInbox(params *PutLedgerVoucherIDSendToInboxParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerVoucherIDSendToInboxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerVoucherIDSendToInboxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerVoucherIDSendToInbox",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}/:sendToInbox",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerVoucherIDSendToInboxReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerVoucherIDSendToInboxOK), nil

}

/*
PutLedgerVoucherIDSendToLedger bs e t a send voucher to ledger
*/
func (a *Client) PutLedgerVoucherIDSendToLedger(params *PutLedgerVoucherIDSendToLedgerParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerVoucherIDSendToLedgerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerVoucherIDSendToLedgerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerVoucherIDSendToLedger",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/{id}/:sendToLedger",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerVoucherIDSendToLedgerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerVoucherIDSendToLedgerOK), nil

}

/*
PutLedgerVoucherList bs e t a update multiple vouchers postings with gui row 0 will be deleted and regenerated
*/
func (a *Client) PutLedgerVoucherList(params *PutLedgerVoucherListParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerVoucherListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerVoucherListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerVoucherList",
		Method:             "PUT",
		PathPattern:        "/ledger/voucher/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerVoucherListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerVoucherListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
