// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLedgerVoucherVoucherIDPdfParams creates a new GetLedgerVoucherVoucherIDPdfParams object
// with the default values initialized.
func NewGetLedgerVoucherVoucherIDPdfParams() *GetLedgerVoucherVoucherIDPdfParams {
	var ()
	return &GetLedgerVoucherVoucherIDPdfParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLedgerVoucherVoucherIDPdfParamsWithTimeout creates a new GetLedgerVoucherVoucherIDPdfParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLedgerVoucherVoucherIDPdfParamsWithTimeout(timeout time.Duration) *GetLedgerVoucherVoucherIDPdfParams {
	var ()
	return &GetLedgerVoucherVoucherIDPdfParams{

		timeout: timeout,
	}
}

// NewGetLedgerVoucherVoucherIDPdfParamsWithContext creates a new GetLedgerVoucherVoucherIDPdfParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLedgerVoucherVoucherIDPdfParamsWithContext(ctx context.Context) *GetLedgerVoucherVoucherIDPdfParams {
	var ()
	return &GetLedgerVoucherVoucherIDPdfParams{

		Context: ctx,
	}
}

// NewGetLedgerVoucherVoucherIDPdfParamsWithHTTPClient creates a new GetLedgerVoucherVoucherIDPdfParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLedgerVoucherVoucherIDPdfParamsWithHTTPClient(client *http.Client) *GetLedgerVoucherVoucherIDPdfParams {
	var ()
	return &GetLedgerVoucherVoucherIDPdfParams{
		HTTPClient: client,
	}
}

/*GetLedgerVoucherVoucherIDPdfParams contains all the parameters to send to the API endpoint
for the get ledger voucher voucher ID pdf operation typically these are written to a http.Request
*/
type GetLedgerVoucherVoucherIDPdfParams struct {

	/*VoucherID
	  Voucher ID from which PDF is downloaded.

	*/
	VoucherID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) WithTimeout(timeout time.Duration) *GetLedgerVoucherVoucherIDPdfParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) WithContext(ctx context.Context) *GetLedgerVoucherVoucherIDPdfParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) WithHTTPClient(client *http.Client) *GetLedgerVoucherVoucherIDPdfParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithVoucherID adds the voucherID to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) WithVoucherID(voucherID int32) *GetLedgerVoucherVoucherIDPdfParams {
	o.SetVoucherID(voucherID)
	return o
}

// SetVoucherID adds the voucherId to the get ledger voucher voucher ID pdf params
func (o *GetLedgerVoucherVoucherIDPdfParams) SetVoucherID(voucherID int32) {
	o.VoucherID = voucherID
}

// WriteToRequest writes these params to a swagger request
func (o *GetLedgerVoucherVoucherIDPdfParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param voucherId
	if err := r.SetPathParam("voucherId", swag.FormatInt32(o.VoucherID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
