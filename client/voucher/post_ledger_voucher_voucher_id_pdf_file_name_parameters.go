// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostLedgerVoucherVoucherIDPdfFileNameParams creates a new PostLedgerVoucherVoucherIDPdfFileNameParams object
// with the default values initialized.
func NewPostLedgerVoucherVoucherIDPdfFileNameParams() *PostLedgerVoucherVoucherIDPdfFileNameParams {
	var ()
	return &PostLedgerVoucherVoucherIDPdfFileNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostLedgerVoucherVoucherIDPdfFileNameParamsWithTimeout creates a new PostLedgerVoucherVoucherIDPdfFileNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostLedgerVoucherVoucherIDPdfFileNameParamsWithTimeout(timeout time.Duration) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	var ()
	return &PostLedgerVoucherVoucherIDPdfFileNameParams{

		timeout: timeout,
	}
}

// NewPostLedgerVoucherVoucherIDPdfFileNameParamsWithContext creates a new PostLedgerVoucherVoucherIDPdfFileNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostLedgerVoucherVoucherIDPdfFileNameParamsWithContext(ctx context.Context) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	var ()
	return &PostLedgerVoucherVoucherIDPdfFileNameParams{

		Context: ctx,
	}
}

// NewPostLedgerVoucherVoucherIDPdfFileNameParamsWithHTTPClient creates a new PostLedgerVoucherVoucherIDPdfFileNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostLedgerVoucherVoucherIDPdfFileNameParamsWithHTTPClient(client *http.Client) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	var ()
	return &PostLedgerVoucherVoucherIDPdfFileNameParams{
		HTTPClient: client,
	}
}

/*PostLedgerVoucherVoucherIDPdfFileNameParams contains all the parameters to send to the API endpoint
for the post ledger voucher voucher ID pdf file name operation typically these are written to a http.Request
*/
type PostLedgerVoucherVoucherIDPdfFileNameParams struct {

	/*File
	  The file

	*/
	File runtime.NamedReadCloser
	/*FileName
	  File name to store the pdf under. Will not be the same as the filename on the file returned.

	*/
	FileName string
	/*VoucherID
	  Voucher ID to upload PDF to.

	*/
	VoucherID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) WithTimeout(timeout time.Duration) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) WithContext(ctx context.Context) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) WithHTTPClient(client *http.Client) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) WithFile(file runtime.NamedReadCloser) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithFileName adds the fileName to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) WithFileName(fileName string) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	o.SetFileName(fileName)
	return o
}

// SetFileName adds the fileName to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) SetFileName(fileName string) {
	o.FileName = fileName
}

// WithVoucherID adds the voucherID to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) WithVoucherID(voucherID int32) *PostLedgerVoucherVoucherIDPdfFileNameParams {
	o.SetVoucherID(voucherID)
	return o
}

// SetVoucherID adds the voucherId to the post ledger voucher voucher ID pdf file name params
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) SetVoucherID(voucherID int32) {
	o.VoucherID = voucherID
}

// WriteToRequest writes these params to a swagger request
func (o *PostLedgerVoucherVoucherIDPdfFileNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// path param fileName
	if err := r.SetPathParam("fileName", o.FileName); err != nil {
		return err
	}

	// path param voucherId
	if err := r.SetPathParam("voucherId", swag.FormatInt32(o.VoucherID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
