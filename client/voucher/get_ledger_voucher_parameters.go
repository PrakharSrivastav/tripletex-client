// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLedgerVoucherParams creates a new GetLedgerVoucherParams object
// with the default values initialized.
func NewGetLedgerVoucherParams() *GetLedgerVoucherParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetLedgerVoucherParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetLedgerVoucherParamsWithTimeout creates a new GetLedgerVoucherParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetLedgerVoucherParamsWithTimeout(timeout time.Duration) *GetLedgerVoucherParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetLedgerVoucherParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewGetLedgerVoucherParamsWithContext creates a new GetLedgerVoucherParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetLedgerVoucherParamsWithContext(ctx context.Context) *GetLedgerVoucherParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetLedgerVoucherParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewGetLedgerVoucherParamsWithHTTPClient creates a new GetLedgerVoucherParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetLedgerVoucherParamsWithHTTPClient(client *http.Client) *GetLedgerVoucherParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetLedgerVoucherParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*GetLedgerVoucherParams contains all the parameters to send to the API endpoint
for the get ledger voucher operation typically these are written to a http.Request
*/
type GetLedgerVoucherParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*DateFrom
	  From and including

	*/
	DateFrom string
	/*DateTo
	  To and excluding

	*/
	DateTo string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*Number
	  List of IDs

	*/
	Number *string
	/*NumberFrom
	  From and including

	*/
	NumberFrom *int32
	/*NumberTo
	  To and excluding

	*/
	NumberTo *int32
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*TypeID
	  List of IDs

	*/
	TypeID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithTimeout(timeout time.Duration) *GetLedgerVoucherParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithContext(ctx context.Context) *GetLedgerVoucherParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithHTTPClient(client *http.Client) *GetLedgerVoucherParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithCount(count *int64) *GetLedgerVoucherParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetCount(count *int64) {
	o.Count = count
}

// WithDateFrom adds the dateFrom to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithDateFrom(dateFrom string) *GetLedgerVoucherParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetDateFrom(dateFrom string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithDateTo(dateTo string) *GetLedgerVoucherParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetDateTo(dateTo string) {
	o.DateTo = dateTo
}

// WithFields adds the fields to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithFields(fields *string) *GetLedgerVoucherParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithFrom(from *int64) *GetLedgerVoucherParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithID(id *string) *GetLedgerVoucherParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetID(id *string) {
	o.ID = id
}

// WithNumber adds the number to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithNumber(number *string) *GetLedgerVoucherParams {
	o.SetNumber(number)
	return o
}

// SetNumber adds the number to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetNumber(number *string) {
	o.Number = number
}

// WithNumberFrom adds the numberFrom to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithNumberFrom(numberFrom *int32) *GetLedgerVoucherParams {
	o.SetNumberFrom(numberFrom)
	return o
}

// SetNumberFrom adds the numberFrom to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetNumberFrom(numberFrom *int32) {
	o.NumberFrom = numberFrom
}

// WithNumberTo adds the numberTo to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithNumberTo(numberTo *int32) *GetLedgerVoucherParams {
	o.SetNumberTo(numberTo)
	return o
}

// SetNumberTo adds the numberTo to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetNumberTo(numberTo *int32) {
	o.NumberTo = numberTo
}

// WithSorting adds the sorting to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithSorting(sorting *string) *GetLedgerVoucherParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithTypeID adds the typeID to the get ledger voucher params
func (o *GetLedgerVoucherParams) WithTypeID(typeID *string) *GetLedgerVoucherParams {
	o.SetTypeID(typeID)
	return o
}

// SetTypeID adds the typeId to the get ledger voucher params
func (o *GetLedgerVoucherParams) SetTypeID(typeID *string) {
	o.TypeID = typeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetLedgerVoucherParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	// query param dateFrom
	qrDateFrom := o.DateFrom
	qDateFrom := qrDateFrom
	if qDateFrom != "" {
		if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
			return err
		}
	}

	// query param dateTo
	qrDateTo := o.DateTo
	qDateTo := qrDateTo
	if qDateTo != "" {
		if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
			return err
		}
	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Number != nil {

		// query param number
		var qrNumber string
		if o.Number != nil {
			qrNumber = *o.Number
		}
		qNumber := qrNumber
		if qNumber != "" {
			if err := r.SetQueryParam("number", qNumber); err != nil {
				return err
			}
		}

	}

	if o.NumberFrom != nil {

		// query param numberFrom
		var qrNumberFrom int32
		if o.NumberFrom != nil {
			qrNumberFrom = *o.NumberFrom
		}
		qNumberFrom := swag.FormatInt32(qrNumberFrom)
		if qNumberFrom != "" {
			if err := r.SetQueryParam("numberFrom", qNumberFrom); err != nil {
				return err
			}
		}

	}

	if o.NumberTo != nil {

		// query param numberTo
		var qrNumberTo int32
		if o.NumberTo != nil {
			qrNumberTo = *o.NumberTo
		}
		qNumberTo := swag.FormatInt32(qrNumberTo)
		if qNumberTo != "" {
			if err := r.SetQueryParam("numberTo", qNumberTo); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.TypeID != nil {

		// query param typeId
		var qrTypeID string
		if o.TypeID != nil {
			qrTypeID = *o.TypeID
		}
		qTypeID := qrTypeID
		if qTypeID != "" {
			if err := r.SetQueryParam("typeId", qTypeID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
