// Code generated by go-swagger; DO NOT EDIT.

package voucher

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPostLedgerVoucherImportDocumentParams creates a new PostLedgerVoucherImportDocumentParams object
// with the default values initialized.
func NewPostLedgerVoucherImportDocumentParams() *PostLedgerVoucherImportDocumentParams {
	var (
		splitDefault = bool(false)
	)
	return &PostLedgerVoucherImportDocumentParams{
		Split: &splitDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPostLedgerVoucherImportDocumentParamsWithTimeout creates a new PostLedgerVoucherImportDocumentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostLedgerVoucherImportDocumentParamsWithTimeout(timeout time.Duration) *PostLedgerVoucherImportDocumentParams {
	var (
		splitDefault = bool(false)
	)
	return &PostLedgerVoucherImportDocumentParams{
		Split: &splitDefault,

		timeout: timeout,
	}
}

// NewPostLedgerVoucherImportDocumentParamsWithContext creates a new PostLedgerVoucherImportDocumentParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostLedgerVoucherImportDocumentParamsWithContext(ctx context.Context) *PostLedgerVoucherImportDocumentParams {
	var (
		splitDefault = bool(false)
	)
	return &PostLedgerVoucherImportDocumentParams{
		Split: &splitDefault,

		Context: ctx,
	}
}

// NewPostLedgerVoucherImportDocumentParamsWithHTTPClient creates a new PostLedgerVoucherImportDocumentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostLedgerVoucherImportDocumentParamsWithHTTPClient(client *http.Client) *PostLedgerVoucherImportDocumentParams {
	var (
		splitDefault = bool(false)
	)
	return &PostLedgerVoucherImportDocumentParams{
		Split:      &splitDefault,
		HTTPClient: client,
	}
}

/*PostLedgerVoucherImportDocumentParams contains all the parameters to send to the API endpoint
for the post ledger voucher import document operation typically these are written to a http.Request
*/
type PostLedgerVoucherImportDocumentParams struct {

	/*Description
	  Optional description to use for the voucher(s). If omitted the file name will be used.

	*/
	Description *string
	/*File
	  The file

	*/
	File runtime.NamedReadCloser
	/*Split
	  If the document consists of several pages, should the document be split into one voucher per page?

	*/
	Split *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) WithTimeout(timeout time.Duration) *PostLedgerVoucherImportDocumentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) WithContext(ctx context.Context) *PostLedgerVoucherImportDocumentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) WithHTTPClient(client *http.Client) *PostLedgerVoucherImportDocumentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) WithDescription(description *string) *PostLedgerVoucherImportDocumentParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) SetDescription(description *string) {
	o.Description = description
}

// WithFile adds the file to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) WithFile(file runtime.NamedReadCloser) *PostLedgerVoucherImportDocumentParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithSplit adds the split to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) WithSplit(split *bool) *PostLedgerVoucherImportDocumentParams {
	o.SetSplit(split)
	return o
}

// SetSplit adds the split to the post ledger voucher import document params
func (o *PostLedgerVoucherImportDocumentParams) SetSplit(split *bool) {
	o.Split = split
}

// WriteToRequest writes these params to a swagger request
func (o *PostLedgerVoucherImportDocumentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// form param description
		var frDescription string
		if o.Description != nil {
			frDescription = *o.Description
		}
		fDescription := frDescription
		if fDescription != "" {
			if err := r.SetFormParam("description", fDescription); err != nil {
				return err
			}
		}

	}

	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	if o.Split != nil {

		// query param split
		var qrSplit bool
		if o.Split != nil {
			qrSplit = *o.Split
		}
		qSplit := swag.FormatBool(qrSplit)
		if qSplit != "" {
			if err := r.SetQueryParam("split", qSplit); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
