// Code generated by go-swagger; DO NOT EDIT.

package rate_category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTravelExpenseRateCategoryParams creates a new GetTravelExpenseRateCategoryParams object
// with the default values initialized.
func NewGetTravelExpenseRateCategoryParams() *GetTravelExpenseRateCategoryParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateCategoryParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTravelExpenseRateCategoryParamsWithTimeout creates a new GetTravelExpenseRateCategoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTravelExpenseRateCategoryParamsWithTimeout(timeout time.Duration) *GetTravelExpenseRateCategoryParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateCategoryParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewGetTravelExpenseRateCategoryParamsWithContext creates a new GetTravelExpenseRateCategoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTravelExpenseRateCategoryParamsWithContext(ctx context.Context) *GetTravelExpenseRateCategoryParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateCategoryParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewGetTravelExpenseRateCategoryParamsWithHTTPClient creates a new GetTravelExpenseRateCategoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTravelExpenseRateCategoryParamsWithHTTPClient(client *http.Client) *GetTravelExpenseRateCategoryParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateCategoryParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*GetTravelExpenseRateCategoryParams contains all the parameters to send to the API endpoint
for the get travel expense rate category operation typically these are written to a http.Request
*/
type GetTravelExpenseRateCategoryParams struct {

	/*AmeldingWageCode
	  Containing

	*/
	AmeldingWageCode *string
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*DateFrom
	  From and including

	*/
	DateFrom *string
	/*DateTo
	  To and excluding

	*/
	DateTo *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*IsRequiresOvernightAccommodation
	  Equals

	*/
	IsRequiresOvernightAccommodation *bool
	/*IsValidAccommodation
	  Equals

	*/
	IsValidAccommodation *bool
	/*IsValidDayTrip
	  Equals

	*/
	IsValidDayTrip *bool
	/*IsValidDomestic
	  Equals

	*/
	IsValidDomestic *bool
	/*Name
	  Containing

	*/
	Name *string
	/*RequiresZone
	  Equals

	*/
	RequiresZone *bool
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*TravelReportRateCategoryGroupID
	  Equals

	*/
	TravelReportRateCategoryGroupID *int32
	/*Type
	  Equals

	*/
	Type *string
	/*WageCodeNumber
	  Equals

	*/
	WageCodeNumber *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithTimeout(timeout time.Duration) *GetTravelExpenseRateCategoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithContext(ctx context.Context) *GetTravelExpenseRateCategoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithHTTPClient(client *http.Client) *GetTravelExpenseRateCategoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmeldingWageCode adds the ameldingWageCode to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithAmeldingWageCode(ameldingWageCode *string) *GetTravelExpenseRateCategoryParams {
	o.SetAmeldingWageCode(ameldingWageCode)
	return o
}

// SetAmeldingWageCode adds the ameldingWageCode to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetAmeldingWageCode(ameldingWageCode *string) {
	o.AmeldingWageCode = ameldingWageCode
}

// WithCount adds the count to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithCount(count *int64) *GetTravelExpenseRateCategoryParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetCount(count *int64) {
	o.Count = count
}

// WithDateFrom adds the dateFrom to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithDateFrom(dateFrom *string) *GetTravelExpenseRateCategoryParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetDateFrom(dateFrom *string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithDateTo(dateTo *string) *GetTravelExpenseRateCategoryParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetDateTo(dateTo *string) {
	o.DateTo = dateTo
}

// WithFields adds the fields to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithFields(fields *string) *GetTravelExpenseRateCategoryParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithFrom(from *int64) *GetTravelExpenseRateCategoryParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetFrom(from *int64) {
	o.From = from
}

// WithIsRequiresOvernightAccommodation adds the isRequiresOvernightAccommodation to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithIsRequiresOvernightAccommodation(isRequiresOvernightAccommodation *bool) *GetTravelExpenseRateCategoryParams {
	o.SetIsRequiresOvernightAccommodation(isRequiresOvernightAccommodation)
	return o
}

// SetIsRequiresOvernightAccommodation adds the isRequiresOvernightAccommodation to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetIsRequiresOvernightAccommodation(isRequiresOvernightAccommodation *bool) {
	o.IsRequiresOvernightAccommodation = isRequiresOvernightAccommodation
}

// WithIsValidAccommodation adds the isValidAccommodation to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithIsValidAccommodation(isValidAccommodation *bool) *GetTravelExpenseRateCategoryParams {
	o.SetIsValidAccommodation(isValidAccommodation)
	return o
}

// SetIsValidAccommodation adds the isValidAccommodation to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetIsValidAccommodation(isValidAccommodation *bool) {
	o.IsValidAccommodation = isValidAccommodation
}

// WithIsValidDayTrip adds the isValidDayTrip to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithIsValidDayTrip(isValidDayTrip *bool) *GetTravelExpenseRateCategoryParams {
	o.SetIsValidDayTrip(isValidDayTrip)
	return o
}

// SetIsValidDayTrip adds the isValidDayTrip to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetIsValidDayTrip(isValidDayTrip *bool) {
	o.IsValidDayTrip = isValidDayTrip
}

// WithIsValidDomestic adds the isValidDomestic to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithIsValidDomestic(isValidDomestic *bool) *GetTravelExpenseRateCategoryParams {
	o.SetIsValidDomestic(isValidDomestic)
	return o
}

// SetIsValidDomestic adds the isValidDomestic to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetIsValidDomestic(isValidDomestic *bool) {
	o.IsValidDomestic = isValidDomestic
}

// WithName adds the name to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithName(name *string) *GetTravelExpenseRateCategoryParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetName(name *string) {
	o.Name = name
}

// WithRequiresZone adds the requiresZone to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithRequiresZone(requiresZone *bool) *GetTravelExpenseRateCategoryParams {
	o.SetRequiresZone(requiresZone)
	return o
}

// SetRequiresZone adds the requiresZone to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetRequiresZone(requiresZone *bool) {
	o.RequiresZone = requiresZone
}

// WithSorting adds the sorting to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithSorting(sorting *string) *GetTravelExpenseRateCategoryParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithTravelReportRateCategoryGroupID adds the travelReportRateCategoryGroupID to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithTravelReportRateCategoryGroupID(travelReportRateCategoryGroupID *int32) *GetTravelExpenseRateCategoryParams {
	o.SetTravelReportRateCategoryGroupID(travelReportRateCategoryGroupID)
	return o
}

// SetTravelReportRateCategoryGroupID adds the travelReportRateCategoryGroupId to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetTravelReportRateCategoryGroupID(travelReportRateCategoryGroupID *int32) {
	o.TravelReportRateCategoryGroupID = travelReportRateCategoryGroupID
}

// WithType adds the typeVar to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithType(typeVar *string) *GetTravelExpenseRateCategoryParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithWageCodeNumber adds the wageCodeNumber to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) WithWageCodeNumber(wageCodeNumber *string) *GetTravelExpenseRateCategoryParams {
	o.SetWageCodeNumber(wageCodeNumber)
	return o
}

// SetWageCodeNumber adds the wageCodeNumber to the get travel expense rate category params
func (o *GetTravelExpenseRateCategoryParams) SetWageCodeNumber(wageCodeNumber *string) {
	o.WageCodeNumber = wageCodeNumber
}

// WriteToRequest writes these params to a swagger request
func (o *GetTravelExpenseRateCategoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AmeldingWageCode != nil {

		// query param ameldingWageCode
		var qrAmeldingWageCode string
		if o.AmeldingWageCode != nil {
			qrAmeldingWageCode = *o.AmeldingWageCode
		}
		qAmeldingWageCode := qrAmeldingWageCode
		if qAmeldingWageCode != "" {
			if err := r.SetQueryParam("ameldingWageCode", qAmeldingWageCode); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.DateFrom != nil {

		// query param dateFrom
		var qrDateFrom string
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom
		if qDateFrom != "" {
			if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param dateTo
		var qrDateTo string
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo
		if qDateTo != "" {
			if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.IsRequiresOvernightAccommodation != nil {

		// query param isRequiresOvernightAccommodation
		var qrIsRequiresOvernightAccommodation bool
		if o.IsRequiresOvernightAccommodation != nil {
			qrIsRequiresOvernightAccommodation = *o.IsRequiresOvernightAccommodation
		}
		qIsRequiresOvernightAccommodation := swag.FormatBool(qrIsRequiresOvernightAccommodation)
		if qIsRequiresOvernightAccommodation != "" {
			if err := r.SetQueryParam("isRequiresOvernightAccommodation", qIsRequiresOvernightAccommodation); err != nil {
				return err
			}
		}

	}

	if o.IsValidAccommodation != nil {

		// query param isValidAccommodation
		var qrIsValidAccommodation bool
		if o.IsValidAccommodation != nil {
			qrIsValidAccommodation = *o.IsValidAccommodation
		}
		qIsValidAccommodation := swag.FormatBool(qrIsValidAccommodation)
		if qIsValidAccommodation != "" {
			if err := r.SetQueryParam("isValidAccommodation", qIsValidAccommodation); err != nil {
				return err
			}
		}

	}

	if o.IsValidDayTrip != nil {

		// query param isValidDayTrip
		var qrIsValidDayTrip bool
		if o.IsValidDayTrip != nil {
			qrIsValidDayTrip = *o.IsValidDayTrip
		}
		qIsValidDayTrip := swag.FormatBool(qrIsValidDayTrip)
		if qIsValidDayTrip != "" {
			if err := r.SetQueryParam("isValidDayTrip", qIsValidDayTrip); err != nil {
				return err
			}
		}

	}

	if o.IsValidDomestic != nil {

		// query param isValidDomestic
		var qrIsValidDomestic bool
		if o.IsValidDomestic != nil {
			qrIsValidDomestic = *o.IsValidDomestic
		}
		qIsValidDomestic := swag.FormatBool(qrIsValidDomestic)
		if qIsValidDomestic != "" {
			if err := r.SetQueryParam("isValidDomestic", qIsValidDomestic); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.RequiresZone != nil {

		// query param requiresZone
		var qrRequiresZone bool
		if o.RequiresZone != nil {
			qrRequiresZone = *o.RequiresZone
		}
		qRequiresZone := swag.FormatBool(qrRequiresZone)
		if qRequiresZone != "" {
			if err := r.SetQueryParam("requiresZone", qRequiresZone); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.TravelReportRateCategoryGroupID != nil {

		// query param travelReportRateCategoryGroupId
		var qrTravelReportRateCategoryGroupID int32
		if o.TravelReportRateCategoryGroupID != nil {
			qrTravelReportRateCategoryGroupID = *o.TravelReportRateCategoryGroupID
		}
		qTravelReportRateCategoryGroupID := swag.FormatInt32(qrTravelReportRateCategoryGroupID)
		if qTravelReportRateCategoryGroupID != "" {
			if err := r.SetQueryParam("travelReportRateCategoryGroupId", qTravelReportRateCategoryGroupID); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.WageCodeNumber != nil {

		// query param wageCodeNumber
		var qrWageCodeNumber string
		if o.WageCodeNumber != nil {
			qrWageCodeNumber = *o.WageCodeNumber
		}
		qWageCodeNumber := qrWageCodeNumber
		if qWageCodeNumber != "" {
			if err := r.SetQueryParam("wageCodeNumber", qWageCodeNumber); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
