// Code generated by go-swagger; DO NOT EDIT.

package accounting_period

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new accounting period API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for accounting period API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetLedgerAccountingPeriod finds accounting periods corresponding with sent data
*/
func (a *Client) GetLedgerAccountingPeriod(params *GetLedgerAccountingPeriodParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerAccountingPeriodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerAccountingPeriodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerAccountingPeriod",
		Method:             "GET",
		PathPattern:        "/ledger/accountingPeriod",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerAccountingPeriodReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerAccountingPeriodOK), nil

}

/*
GetLedgerAccountingPeriodID gets accounting period by ID
*/
func (a *Client) GetLedgerAccountingPeriodID(params *GetLedgerAccountingPeriodIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerAccountingPeriodIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerAccountingPeriodIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerAccountingPeriodID",
		Method:             "GET",
		PathPattern:        "/ledger/accountingPeriod/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerAccountingPeriodIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerAccountingPeriodIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
