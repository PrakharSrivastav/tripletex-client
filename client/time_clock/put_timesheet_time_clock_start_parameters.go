// Code generated by go-swagger; DO NOT EDIT.

package time_clock

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPutTimesheetTimeClockStartParams creates a new PutTimesheetTimeClockStartParams object
// with the default values initialized.
func NewPutTimesheetTimeClockStartParams() *PutTimesheetTimeClockStartParams {
	var (
		projectIDDefault = int32(0)
	)
	return &PutTimesheetTimeClockStartParams{
		ProjectID: &projectIDDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPutTimesheetTimeClockStartParamsWithTimeout creates a new PutTimesheetTimeClockStartParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutTimesheetTimeClockStartParamsWithTimeout(timeout time.Duration) *PutTimesheetTimeClockStartParams {
	var (
		projectIDDefault = int32(0)
	)
	return &PutTimesheetTimeClockStartParams{
		ProjectID: &projectIDDefault,

		timeout: timeout,
	}
}

// NewPutTimesheetTimeClockStartParamsWithContext creates a new PutTimesheetTimeClockStartParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutTimesheetTimeClockStartParamsWithContext(ctx context.Context) *PutTimesheetTimeClockStartParams {
	var (
		projectIdDefault = int32(0)
	)
	return &PutTimesheetTimeClockStartParams{
		ProjectID: &projectIdDefault,

		Context: ctx,
	}
}

// NewPutTimesheetTimeClockStartParamsWithHTTPClient creates a new PutTimesheetTimeClockStartParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutTimesheetTimeClockStartParamsWithHTTPClient(client *http.Client) *PutTimesheetTimeClockStartParams {
	var (
		projectIdDefault = int32(0)
	)
	return &PutTimesheetTimeClockStartParams{
		ProjectID:  &projectIdDefault,
		HTTPClient: client,
	}
}

/*PutTimesheetTimeClockStartParams contains all the parameters to send to the API endpoint
for the put timesheet time clock start operation typically these are written to a http.Request
*/
type PutTimesheetTimeClockStartParams struct {

	/*ActivityID
	  Activity ID

	*/
	ActivityID int32
	/*Date
	  Optional. Default is todayâ€™s date

	*/
	Date *string
	/*EmployeeID
	  Employee ID. Defaults to ID of token owner.

	*/
	EmployeeID *int32
	/*ProjectID
	  Project ID

	*/
	ProjectID *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) WithTimeout(timeout time.Duration) *PutTimesheetTimeClockStartParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) WithContext(ctx context.Context) *PutTimesheetTimeClockStartParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) WithHTTPClient(client *http.Client) *PutTimesheetTimeClockStartParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActivityID adds the activityID to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) WithActivityID(activityID int32) *PutTimesheetTimeClockStartParams {
	o.SetActivityID(activityID)
	return o
}

// SetActivityID adds the activityId to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) SetActivityID(activityID int32) {
	o.ActivityID = activityID
}

// WithDate adds the date to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) WithDate(date *string) *PutTimesheetTimeClockStartParams {
	o.SetDate(date)
	return o
}

// SetDate adds the date to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) SetDate(date *string) {
	o.Date = date
}

// WithEmployeeID adds the employeeID to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) WithEmployeeID(employeeID *int32) *PutTimesheetTimeClockStartParams {
	o.SetEmployeeID(employeeID)
	return o
}

// SetEmployeeID adds the employeeId to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) SetEmployeeID(employeeID *int32) {
	o.EmployeeID = employeeID
}

// WithProjectID adds the projectID to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) WithProjectID(projectID *int32) *PutTimesheetTimeClockStartParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the put timesheet time clock start params
func (o *PutTimesheetTimeClockStartParams) SetProjectID(projectID *int32) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *PutTimesheetTimeClockStartParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param activityId
	qrActivityID := o.ActivityID
	qActivityID := swag.FormatInt32(qrActivityID)
	if qActivityID != "" {
		if err := r.SetQueryParam("activityId", qActivityID); err != nil {
			return err
		}
	}

	if o.Date != nil {

		// query param date
		var qrDate string
		if o.Date != nil {
			qrDate = *o.Date
		}
		qDate := qrDate
		if qDate != "" {
			if err := r.SetQueryParam("date", qDate); err != nil {
				return err
			}
		}

	}

	if o.EmployeeID != nil {

		// query param employeeId
		var qrEmployeeID int32
		if o.EmployeeID != nil {
			qrEmployeeID = *o.EmployeeID
		}
		qEmployeeID := swag.FormatInt32(qrEmployeeID)
		if qEmployeeID != "" {
			if err := r.SetQueryParam("employeeId", qEmployeeID); err != nil {
				return err
			}
		}

	}

	if o.ProjectID != nil {

		// query param projectId
		var qrProjectID int32
		if o.ProjectID != nil {
			qrProjectID = *o.ProjectID
		}
		qProjectID := swag.FormatInt32(qrProjectID)
		if qProjectID != "" {
			if err := r.SetQueryParam("projectId", qProjectID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
