// Code generated by go-swagger; DO NOT EDIT.

package match

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new match API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for match API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteBankReconciliationMatchID bs e t a delete a bank reconciliation match by ID
*/
func (a *Client) DeleteBankReconciliationMatchID(params *DeleteBankReconciliationMatchIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBankReconciliationMatchIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBankReconciliationMatchID",
		Method:             "DELETE",
		PathPattern:        "/bank/reconciliation/match/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBankReconciliationMatchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetBankReconciliationMatch bs e t a find bank reconciliation match corresponding with sent data
*/
func (a *Client) GetBankReconciliationMatch(params *GetBankReconciliationMatchParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankReconciliationMatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankReconciliationMatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankReconciliationMatch",
		Method:             "GET",
		PathPattern:        "/bank/reconciliation/match",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankReconciliationMatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankReconciliationMatchOK), nil

}

/*
GetBankReconciliationMatchID bs e t a get bank reconciliation match by ID
*/
func (a *Client) GetBankReconciliationMatchID(params *GetBankReconciliationMatchIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankReconciliationMatchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankReconciliationMatchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankReconciliationMatchID",
		Method:             "GET",
		PathPattern:        "/bank/reconciliation/match/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankReconciliationMatchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankReconciliationMatchIDOK), nil

}

/*
PostBankReconciliationMatch bs e t a create a bank reconciliation match
*/
func (a *Client) PostBankReconciliationMatch(params *PostBankReconciliationMatchParams, authInfo runtime.ClientAuthInfoWriter) (*PostBankReconciliationMatchCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBankReconciliationMatchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBankReconciliationMatch",
		Method:             "POST",
		PathPattern:        "/bank/reconciliation/match",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBankReconciliationMatchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBankReconciliationMatchCreated), nil

}

/*
PutBankReconciliationMatchID bs e t a update a bank reconciliation match by ID
*/
func (a *Client) PutBankReconciliationMatchID(params *PutBankReconciliationMatchIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutBankReconciliationMatchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBankReconciliationMatchIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutBankReconciliationMatchID",
		Method:             "PUT",
		PathPattern:        "/bank/reconciliation/match/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBankReconciliationMatchIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutBankReconciliationMatchIDOK), nil

}

/*
PutBankReconciliationMatchSuggest bs e t a suggest matches for a bank reconciliation by ID
*/
func (a *Client) PutBankReconciliationMatchSuggest(params *PutBankReconciliationMatchSuggestParams, authInfo runtime.ClientAuthInfoWriter) (*PutBankReconciliationMatchSuggestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutBankReconciliationMatchSuggestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutBankReconciliationMatchSuggest",
		Method:             "PUT",
		PathPattern:        "/bank/reconciliation/match/:suggest",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutBankReconciliationMatchSuggestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutBankReconciliationMatchSuggestOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
