// Code generated by go-swagger; DO NOT EDIT.

package employee

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEmployeeParams creates a new GetEmployeeParams object
// with the default values initialized.
func NewGetEmployeeParams() *GetEmployeeParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		includeContactsDefault = bool(false)
	)
	return &GetEmployeeParams{
		Count:           &countDefault,
		From:            &fromDefault,
		IncludeContacts: &includeContactsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEmployeeParamsWithTimeout creates a new GetEmployeeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEmployeeParamsWithTimeout(timeout time.Duration) *GetEmployeeParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		includeContactsDefault = bool(false)
	)
	return &GetEmployeeParams{
		Count:           &countDefault,
		From:            &fromDefault,
		IncludeContacts: &includeContactsDefault,

		timeout: timeout,
	}
}

// NewGetEmployeeParamsWithContext creates a new GetEmployeeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEmployeeParamsWithContext(ctx context.Context) *GetEmployeeParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		includeContactsDefault = bool(false)
	)
	return &GetEmployeeParams{
		Count:           &countDefault,
		From:            &fromDefault,
		IncludeContacts: &includeContactsDefault,

		Context: ctx,
	}
}

// NewGetEmployeeParamsWithHTTPClient creates a new GetEmployeeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEmployeeParamsWithHTTPClient(client *http.Client) *GetEmployeeParams {
	var (
		countDefault           = int64(1000)
		fromDefault            = int64(0)
		includeContactsDefault = bool(false)
	)
	return &GetEmployeeParams{
		Count:           &countDefault,
		From:            &fromDefault,
		IncludeContacts: &includeContactsDefault,
		HTTPClient:      client,
	}
}

/*GetEmployeeParams contains all the parameters to send to the API endpoint
for the get employee operation typically these are written to a http.Request
*/
type GetEmployeeParams struct {

	/*AllowInformationRegistration
	  Equals

	*/
	AllowInformationRegistration *bool
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*DepartmentID
	  List of IDs

	*/
	DepartmentID *string
	/*EmployeeNumber
	  Containing

	*/
	EmployeeNumber *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*FirstName
	  Containing

	*/
	FirstName *string
	/*From
	  From index

	*/
	From *int64
	/*ID
	  List of IDs

	*/
	ID *string
	/*IncludeContacts
	  Equals

	*/
	IncludeContacts *bool
	/*LastName
	  Containing

	*/
	LastName *string
	/*OnlyProjectManagers
	  Equals

	*/
	OnlyProjectManagers *bool
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get employee params
func (o *GetEmployeeParams) WithTimeout(timeout time.Duration) *GetEmployeeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get employee params
func (o *GetEmployeeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get employee params
func (o *GetEmployeeParams) WithContext(ctx context.Context) *GetEmployeeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get employee params
func (o *GetEmployeeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get employee params
func (o *GetEmployeeParams) WithHTTPClient(client *http.Client) *GetEmployeeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get employee params
func (o *GetEmployeeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowInformationRegistration adds the allowInformationRegistration to the get employee params
func (o *GetEmployeeParams) WithAllowInformationRegistration(allowInformationRegistration *bool) *GetEmployeeParams {
	o.SetAllowInformationRegistration(allowInformationRegistration)
	return o
}

// SetAllowInformationRegistration adds the allowInformationRegistration to the get employee params
func (o *GetEmployeeParams) SetAllowInformationRegistration(allowInformationRegistration *bool) {
	o.AllowInformationRegistration = allowInformationRegistration
}

// WithCount adds the count to the get employee params
func (o *GetEmployeeParams) WithCount(count *int64) *GetEmployeeParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get employee params
func (o *GetEmployeeParams) SetCount(count *int64) {
	o.Count = count
}

// WithDepartmentID adds the departmentID to the get employee params
func (o *GetEmployeeParams) WithDepartmentID(departmentID *string) *GetEmployeeParams {
	o.SetDepartmentID(departmentID)
	return o
}

// SetDepartmentID adds the departmentId to the get employee params
func (o *GetEmployeeParams) SetDepartmentID(departmentID *string) {
	o.DepartmentID = departmentID
}

// WithEmployeeNumber adds the employeeNumber to the get employee params
func (o *GetEmployeeParams) WithEmployeeNumber(employeeNumber *string) *GetEmployeeParams {
	o.SetEmployeeNumber(employeeNumber)
	return o
}

// SetEmployeeNumber adds the employeeNumber to the get employee params
func (o *GetEmployeeParams) SetEmployeeNumber(employeeNumber *string) {
	o.EmployeeNumber = employeeNumber
}

// WithFields adds the fields to the get employee params
func (o *GetEmployeeParams) WithFields(fields *string) *GetEmployeeParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get employee params
func (o *GetEmployeeParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFirstName adds the firstName to the get employee params
func (o *GetEmployeeParams) WithFirstName(firstName *string) *GetEmployeeParams {
	o.SetFirstName(firstName)
	return o
}

// SetFirstName adds the firstName to the get employee params
func (o *GetEmployeeParams) SetFirstName(firstName *string) {
	o.FirstName = firstName
}

// WithFrom adds the from to the get employee params
func (o *GetEmployeeParams) WithFrom(from *int64) *GetEmployeeParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get employee params
func (o *GetEmployeeParams) SetFrom(from *int64) {
	o.From = from
}

// WithID adds the id to the get employee params
func (o *GetEmployeeParams) WithID(id *string) *GetEmployeeParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get employee params
func (o *GetEmployeeParams) SetID(id *string) {
	o.ID = id
}

// WithIncludeContacts adds the includeContacts to the get employee params
func (o *GetEmployeeParams) WithIncludeContacts(includeContacts *bool) *GetEmployeeParams {
	o.SetIncludeContacts(includeContacts)
	return o
}

// SetIncludeContacts adds the includeContacts to the get employee params
func (o *GetEmployeeParams) SetIncludeContacts(includeContacts *bool) {
	o.IncludeContacts = includeContacts
}

// WithLastName adds the lastName to the get employee params
func (o *GetEmployeeParams) WithLastName(lastName *string) *GetEmployeeParams {
	o.SetLastName(lastName)
	return o
}

// SetLastName adds the lastName to the get employee params
func (o *GetEmployeeParams) SetLastName(lastName *string) {
	o.LastName = lastName
}

// WithOnlyProjectManagers adds the onlyProjectManagers to the get employee params
func (o *GetEmployeeParams) WithOnlyProjectManagers(onlyProjectManagers *bool) *GetEmployeeParams {
	o.SetOnlyProjectManagers(onlyProjectManagers)
	return o
}

// SetOnlyProjectManagers adds the onlyProjectManagers to the get employee params
func (o *GetEmployeeParams) SetOnlyProjectManagers(onlyProjectManagers *bool) {
	o.OnlyProjectManagers = onlyProjectManagers
}

// WithSorting adds the sorting to the get employee params
func (o *GetEmployeeParams) WithSorting(sorting *string) *GetEmployeeParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get employee params
func (o *GetEmployeeParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *GetEmployeeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowInformationRegistration != nil {

		// query param allowInformationRegistration
		var qrAllowInformationRegistration bool
		if o.AllowInformationRegistration != nil {
			qrAllowInformationRegistration = *o.AllowInformationRegistration
		}
		qAllowInformationRegistration := swag.FormatBool(qrAllowInformationRegistration)
		if qAllowInformationRegistration != "" {
			if err := r.SetQueryParam("allowInformationRegistration", qAllowInformationRegistration); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.DepartmentID != nil {

		// query param departmentId
		var qrDepartmentID string
		if o.DepartmentID != nil {
			qrDepartmentID = *o.DepartmentID
		}
		qDepartmentID := qrDepartmentID
		if qDepartmentID != "" {
			if err := r.SetQueryParam("departmentId", qDepartmentID); err != nil {
				return err
			}
		}

	}

	if o.EmployeeNumber != nil {

		// query param employeeNumber
		var qrEmployeeNumber string
		if o.EmployeeNumber != nil {
			qrEmployeeNumber = *o.EmployeeNumber
		}
		qEmployeeNumber := qrEmployeeNumber
		if qEmployeeNumber != "" {
			if err := r.SetQueryParam("employeeNumber", qEmployeeNumber); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.FirstName != nil {

		// query param firstName
		var qrFirstName string
		if o.FirstName != nil {
			qrFirstName = *o.FirstName
		}
		qFirstName := qrFirstName
		if qFirstName != "" {
			if err := r.SetQueryParam("firstName", qFirstName); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.IncludeContacts != nil {

		// query param includeContacts
		var qrIncludeContacts bool
		if o.IncludeContacts != nil {
			qrIncludeContacts = *o.IncludeContacts
		}
		qIncludeContacts := swag.FormatBool(qrIncludeContacts)
		if qIncludeContacts != "" {
			if err := r.SetQueryParam("includeContacts", qIncludeContacts); err != nil {
				return err
			}
		}

	}

	if o.LastName != nil {

		// query param lastName
		var qrLastName string
		if o.LastName != nil {
			qrLastName = *o.LastName
		}
		qLastName := qrLastName
		if qLastName != "" {
			if err := r.SetQueryParam("lastName", qLastName); err != nil {
				return err
			}
		}

	}

	if o.OnlyProjectManagers != nil {

		// query param onlyProjectManagers
		var qrOnlyProjectManagers bool
		if o.OnlyProjectManagers != nil {
			qrOnlyProjectManagers = *o.OnlyProjectManagers
		}
		qOnlyProjectManagers := swag.FormatBool(qrOnlyProjectManagers)
		if qOnlyProjectManagers != "" {
			if err := r.SetQueryParam("onlyProjectManagers", qOnlyProjectManagers); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
