// Code generated by go-swagger; DO NOT EDIT.

package rate

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTravelExpenseRateParams creates a new GetTravelExpenseRateParams object
// with the default values initialized.
func NewGetTravelExpenseRateParams() *GetTravelExpenseRateParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTravelExpenseRateParamsWithTimeout creates a new GetTravelExpenseRateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTravelExpenseRateParamsWithTimeout(timeout time.Duration) *GetTravelExpenseRateParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewGetTravelExpenseRateParamsWithContext creates a new GetTravelExpenseRateParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTravelExpenseRateParamsWithContext(ctx context.Context) *GetTravelExpenseRateParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewGetTravelExpenseRateParamsWithHTTPClient creates a new GetTravelExpenseRateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTravelExpenseRateParamsWithHTTPClient(client *http.Client) *GetTravelExpenseRateParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseRateParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*GetTravelExpenseRateParams contains all the parameters to send to the API endpoint
for the get travel expense rate operation typically these are written to a http.Request
*/
type GetTravelExpenseRateParams struct {

	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*DateFrom
	  From and including

	*/
	DateFrom *string
	/*DateTo
	  To and excluding

	*/
	DateTo *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*IsValidAccommodation
	  Equals

	*/
	IsValidAccommodation *bool
	/*IsValidDayTrip
	  Equals

	*/
	IsValidDayTrip *bool
	/*IsValidDomestic
	  Equals

	*/
	IsValidDomestic *bool
	/*IsValidForeignTravel
	  Equals

	*/
	IsValidForeignTravel *bool
	/*RateCategoryID
	  Equals

	*/
	RateCategoryID *string
	/*RequiresOvernightAccommodation
	  Equals

	*/
	RequiresOvernightAccommodation *bool
	/*RequiresZone
	  Equals

	*/
	RequiresZone *bool
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*Type
	  Equals

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithTimeout(timeout time.Duration) *GetTravelExpenseRateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithContext(ctx context.Context) *GetTravelExpenseRateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithHTTPClient(client *http.Client) *GetTravelExpenseRateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithCount(count *int64) *GetTravelExpenseRateParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetCount(count *int64) {
	o.Count = count
}

// WithDateFrom adds the dateFrom to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithDateFrom(dateFrom *string) *GetTravelExpenseRateParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetDateFrom(dateFrom *string) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithDateTo(dateTo *string) *GetTravelExpenseRateParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetDateTo(dateTo *string) {
	o.DateTo = dateTo
}

// WithFields adds the fields to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithFields(fields *string) *GetTravelExpenseRateParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithFrom(from *int64) *GetTravelExpenseRateParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetFrom(from *int64) {
	o.From = from
}

// WithIsValidAccommodation adds the isValidAccommodation to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithIsValidAccommodation(isValidAccommodation *bool) *GetTravelExpenseRateParams {
	o.SetIsValidAccommodation(isValidAccommodation)
	return o
}

// SetIsValidAccommodation adds the isValidAccommodation to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetIsValidAccommodation(isValidAccommodation *bool) {
	o.IsValidAccommodation = isValidAccommodation
}

// WithIsValidDayTrip adds the isValidDayTrip to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithIsValidDayTrip(isValidDayTrip *bool) *GetTravelExpenseRateParams {
	o.SetIsValidDayTrip(isValidDayTrip)
	return o
}

// SetIsValidDayTrip adds the isValidDayTrip to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetIsValidDayTrip(isValidDayTrip *bool) {
	o.IsValidDayTrip = isValidDayTrip
}

// WithIsValidDomestic adds the isValidDomestic to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithIsValidDomestic(isValidDomestic *bool) *GetTravelExpenseRateParams {
	o.SetIsValidDomestic(isValidDomestic)
	return o
}

// SetIsValidDomestic adds the isValidDomestic to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetIsValidDomestic(isValidDomestic *bool) {
	o.IsValidDomestic = isValidDomestic
}

// WithIsValidForeignTravel adds the isValidForeignTravel to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithIsValidForeignTravel(isValidForeignTravel *bool) *GetTravelExpenseRateParams {
	o.SetIsValidForeignTravel(isValidForeignTravel)
	return o
}

// SetIsValidForeignTravel adds the isValidForeignTravel to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetIsValidForeignTravel(isValidForeignTravel *bool) {
	o.IsValidForeignTravel = isValidForeignTravel
}

// WithRateCategoryID adds the rateCategoryID to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithRateCategoryID(rateCategoryID *string) *GetTravelExpenseRateParams {
	o.SetRateCategoryID(rateCategoryID)
	return o
}

// SetRateCategoryID adds the rateCategoryId to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetRateCategoryID(rateCategoryID *string) {
	o.RateCategoryID = rateCategoryID
}

// WithRequiresOvernightAccommodation adds the requiresOvernightAccommodation to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithRequiresOvernightAccommodation(requiresOvernightAccommodation *bool) *GetTravelExpenseRateParams {
	o.SetRequiresOvernightAccommodation(requiresOvernightAccommodation)
	return o
}

// SetRequiresOvernightAccommodation adds the requiresOvernightAccommodation to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetRequiresOvernightAccommodation(requiresOvernightAccommodation *bool) {
	o.RequiresOvernightAccommodation = requiresOvernightAccommodation
}

// WithRequiresZone adds the requiresZone to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithRequiresZone(requiresZone *bool) *GetTravelExpenseRateParams {
	o.SetRequiresZone(requiresZone)
	return o
}

// SetRequiresZone adds the requiresZone to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetRequiresZone(requiresZone *bool) {
	o.RequiresZone = requiresZone
}

// WithSorting adds the sorting to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithSorting(sorting *string) *GetTravelExpenseRateParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithType adds the typeVar to the get travel expense rate params
func (o *GetTravelExpenseRateParams) WithType(typeVar *string) *GetTravelExpenseRateParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get travel expense rate params
func (o *GetTravelExpenseRateParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetTravelExpenseRateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.DateFrom != nil {

		// query param dateFrom
		var qrDateFrom string
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom
		if qDateFrom != "" {
			if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param dateTo
		var qrDateTo string
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo
		if qDateTo != "" {
			if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.IsValidAccommodation != nil {

		// query param isValidAccommodation
		var qrIsValidAccommodation bool
		if o.IsValidAccommodation != nil {
			qrIsValidAccommodation = *o.IsValidAccommodation
		}
		qIsValidAccommodation := swag.FormatBool(qrIsValidAccommodation)
		if qIsValidAccommodation != "" {
			if err := r.SetQueryParam("isValidAccommodation", qIsValidAccommodation); err != nil {
				return err
			}
		}

	}

	if o.IsValidDayTrip != nil {

		// query param isValidDayTrip
		var qrIsValidDayTrip bool
		if o.IsValidDayTrip != nil {
			qrIsValidDayTrip = *o.IsValidDayTrip
		}
		qIsValidDayTrip := swag.FormatBool(qrIsValidDayTrip)
		if qIsValidDayTrip != "" {
			if err := r.SetQueryParam("isValidDayTrip", qIsValidDayTrip); err != nil {
				return err
			}
		}

	}

	if o.IsValidDomestic != nil {

		// query param isValidDomestic
		var qrIsValidDomestic bool
		if o.IsValidDomestic != nil {
			qrIsValidDomestic = *o.IsValidDomestic
		}
		qIsValidDomestic := swag.FormatBool(qrIsValidDomestic)
		if qIsValidDomestic != "" {
			if err := r.SetQueryParam("isValidDomestic", qIsValidDomestic); err != nil {
				return err
			}
		}

	}

	if o.IsValidForeignTravel != nil {

		// query param isValidForeignTravel
		var qrIsValidForeignTravel bool
		if o.IsValidForeignTravel != nil {
			qrIsValidForeignTravel = *o.IsValidForeignTravel
		}
		qIsValidForeignTravel := swag.FormatBool(qrIsValidForeignTravel)
		if qIsValidForeignTravel != "" {
			if err := r.SetQueryParam("isValidForeignTravel", qIsValidForeignTravel); err != nil {
				return err
			}
		}

	}

	if o.RateCategoryID != nil {

		// query param rateCategoryId
		var qrRateCategoryID string
		if o.RateCategoryID != nil {
			qrRateCategoryID = *o.RateCategoryID
		}
		qRateCategoryID := qrRateCategoryID
		if qRateCategoryID != "" {
			if err := r.SetQueryParam("rateCategoryId", qRateCategoryID); err != nil {
				return err
			}
		}

	}

	if o.RequiresOvernightAccommodation != nil {

		// query param requiresOvernightAccommodation
		var qrRequiresOvernightAccommodation bool
		if o.RequiresOvernightAccommodation != nil {
			qrRequiresOvernightAccommodation = *o.RequiresOvernightAccommodation
		}
		qRequiresOvernightAccommodation := swag.FormatBool(qrRequiresOvernightAccommodation)
		if qRequiresOvernightAccommodation != "" {
			if err := r.SetQueryParam("requiresOvernightAccommodation", qRequiresOvernightAccommodation); err != nil {
				return err
			}
		}

	}

	if o.RequiresZone != nil {

		// query param requiresZone
		var qrRequiresZone bool
		if o.RequiresZone != nil {
			qrRequiresZone = *o.RequiresZone
		}
		qRequiresZone := swag.FormatBool(qrRequiresZone)
		if qRequiresZone != "" {
			if err := r.SetQueryParam("requiresZone", qRequiresZone); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
