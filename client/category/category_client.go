// Code generated by go-swagger; DO NOT EDIT.

package category

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new category API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for category API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetCustomerCategory finds customer supplier categories corresponding with sent data
*/
func (a *Client) GetCustomerCategory(params *GetCustomerCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomerCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomerCategory",
		Method:             "GET",
		PathPattern:        "/customer/category",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomerCategoryOK), nil

}

/*
GetCustomerCategoryID finds customer supplier category by ID
*/
func (a *Client) GetCustomerCategoryID(params *GetCustomerCategoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCustomerCategoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerCategoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetCustomerCategoryID",
		Method:             "GET",
		PathPattern:        "/customer/category/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerCategoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCustomerCategoryIDOK), nil

}

/*
GetProjectCategory finds project categories corresponding with sent data
*/
func (a *Client) GetProjectCategory(params *GetProjectCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProjectCategory",
		Method:             "GET",
		PathPattern:        "/project/category",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectCategoryOK), nil

}

/*
GetProjectCategoryID finds project category by ID
*/
func (a *Client) GetProjectCategoryID(params *GetProjectCategoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectCategoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectCategoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProjectCategoryID",
		Method:             "GET",
		PathPattern:        "/project/category/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProjectCategoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProjectCategoryIDOK), nil

}

/*
PostCustomerCategory adds new customer supplier category
*/
func (a *Client) PostCustomerCategory(params *PostCustomerCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*PostCustomerCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomerCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostCustomerCategory",
		Method:             "POST",
		PathPattern:        "/customer/category",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomerCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostCustomerCategoryCreated), nil

}

/*
PostProjectCategory adds new project category
*/
func (a *Client) PostProjectCategory(params *PostProjectCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*PostProjectCategoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostProjectCategory",
		Method:             "POST",
		PathPattern:        "/project/category",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostProjectCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostProjectCategoryCreated), nil

}

/*
PutCustomerCategoryID updates customer supplier category
*/
func (a *Client) PutCustomerCategoryID(params *PutCustomerCategoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutCustomerCategoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCustomerCategoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutCustomerCategoryID",
		Method:             "PUT",
		PathPattern:        "/customer/category/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutCustomerCategoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCustomerCategoryIDOK), nil

}

/*
PutProjectCategoryID updates project category
*/
func (a *Client) PutProjectCategoryID(params *PutProjectCategoryIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutProjectCategoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectCategoryIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutProjectCategoryID",
		Method:             "PUT",
		PathPattern:        "/project/category/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutProjectCategoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutProjectCategoryIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
