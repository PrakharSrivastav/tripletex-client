// Code generated by go-swagger; DO NOT EDIT.

package division

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new division API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for division API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetDivision bs e t a get divisions
*/
func (a *Client) GetDivision(params *GetDivisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetDivisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDivisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDivision",
		Method:             "GET",
		PathPattern:        "/division",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDivisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDivisionOK), nil

}

/*
PostDivision bs e t a create division
*/
func (a *Client) PostDivision(params *PostDivisionParams, authInfo runtime.ClientAuthInfoWriter) (*PostDivisionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDivisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDivision",
		Method:             "POST",
		PathPattern:        "/division",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDivisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDivisionCreated), nil

}

/*
PostDivisionList bs e t a create divisions
*/
func (a *Client) PostDivisionList(params *PostDivisionListParams, authInfo runtime.ClientAuthInfoWriter) (*PostDivisionListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDivisionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDivisionList",
		Method:             "POST",
		PathPattern:        "/division/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDivisionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDivisionListCreated), nil

}

/*
PutDivisionID bs e t a update division information
*/
func (a *Client) PutDivisionID(params *PutDivisionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDivisionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDivisionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDivisionID",
		Method:             "PUT",
		PathPattern:        "/division/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDivisionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDivisionIDOK), nil

}

/*
PutDivisionList bs e t a update multiple divisions
*/
func (a *Client) PutDivisionList(params *PutDivisionListParams, authInfo runtime.ClientAuthInfoWriter) (*PutDivisionListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDivisionListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDivisionList",
		Method:             "PUT",
		PathPattern:        "/division/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDivisionListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDivisionListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
