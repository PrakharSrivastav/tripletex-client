// Code generated by go-swagger; DO NOT EDIT.

package posting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new posting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for posting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetLedgerPosting finds postings corresponding with sent data
*/
func (a *Client) GetLedgerPosting(params *GetLedgerPostingParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerPostingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerPostingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerPosting",
		Method:             "GET",
		PathPattern:        "/ledger/posting",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerPostingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerPostingOK), nil

}

/*
GetLedgerPostingID finds postings by ID
*/
func (a *Client) GetLedgerPostingID(params *GetLedgerPostingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerPostingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerPostingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerPostingID",
		Method:             "GET",
		PathPattern:        "/ledger/posting/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerPostingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerPostingIDOK), nil

}

/*
GetLedgerPostingOpenPost finds open posts corresponding with sent data
*/
func (a *Client) GetLedgerPostingOpenPost(params *GetLedgerPostingOpenPostParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerPostingOpenPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerPostingOpenPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerPostingOpenPost",
		Method:             "GET",
		PathPattern:        "/ledger/posting/openPost",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerPostingOpenPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerPostingOpenPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
