// Code generated by go-swagger; DO NOT EDIT.

package statement

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new statement API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for statement API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteBankStatementID bs e t a delete bank statement by ID
*/
func (a *Client) DeleteBankStatementID(params *DeleteBankStatementIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBankStatementIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBankStatementID",
		Method:             "DELETE",
		PathPattern:        "/bank/statement/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBankStatementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetBankStatement bs e t a find bank statement corresponding with sent data
*/
func (a *Client) GetBankStatement(params *GetBankStatementParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankStatementOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankStatementParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankStatement",
		Method:             "GET",
		PathPattern:        "/bank/statement",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankStatementReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankStatementOK), nil

}

/*
GetBankStatementID bs e t a get bank statement
*/
func (a *Client) GetBankStatementID(params *GetBankStatementIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankStatementIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankStatementIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankStatementID",
		Method:             "GET",
		PathPattern:        "/bank/statement/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankStatementIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankStatementIDOK), nil

}

/*
PostBankStatementImport bs e t a upload bank statement file
*/
func (a *Client) PostBankStatementImport(params *PostBankStatementImportParams, authInfo runtime.ClientAuthInfoWriter) (*PostBankStatementImportCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBankStatementImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostBankStatementImport",
		Method:             "POST",
		PathPattern:        "/bank/statement/import",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBankStatementImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostBankStatementImportCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
