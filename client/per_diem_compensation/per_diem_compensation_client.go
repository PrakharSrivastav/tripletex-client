// Code generated by go-swagger; DO NOT EDIT.

package per_diem_compensation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new per diem compensation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for per diem compensation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTravelExpensePerDiemCompensationID bs e t a delete per diem compensation
*/
func (a *Client) DeleteTravelExpensePerDiemCompensationID(params *DeleteTravelExpensePerDiemCompensationIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTravelExpensePerDiemCompensationIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTravelExpensePerDiemCompensationID",
		Method:             "DELETE",
		PathPattern:        "/travelExpense/perDiemCompensation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTravelExpensePerDiemCompensationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetTravelExpensePerDiemCompensation bs e t a find per diem compensations corresponding with sent data
*/
func (a *Client) GetTravelExpensePerDiemCompensation(params *GetTravelExpensePerDiemCompensationParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpensePerDiemCompensationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpensePerDiemCompensationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpensePerDiemCompensation",
		Method:             "GET",
		PathPattern:        "/travelExpense/perDiemCompensation",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpensePerDiemCompensationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpensePerDiemCompensationOK), nil

}

/*
GetTravelExpensePerDiemCompensationID bs e t a get per diem compensation by ID
*/
func (a *Client) GetTravelExpensePerDiemCompensationID(params *GetTravelExpensePerDiemCompensationIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpensePerDiemCompensationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpensePerDiemCompensationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpensePerDiemCompensationID",
		Method:             "GET",
		PathPattern:        "/travelExpense/perDiemCompensation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpensePerDiemCompensationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpensePerDiemCompensationIDOK), nil

}

/*
PostTravelExpensePerDiemCompensation bs e t a create per diem compensation
*/
func (a *Client) PostTravelExpensePerDiemCompensation(params *PostTravelExpensePerDiemCompensationParams, authInfo runtime.ClientAuthInfoWriter) (*PostTravelExpensePerDiemCompensationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTravelExpensePerDiemCompensationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTravelExpensePerDiemCompensation",
		Method:             "POST",
		PathPattern:        "/travelExpense/perDiemCompensation",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTravelExpensePerDiemCompensationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTravelExpensePerDiemCompensationCreated), nil

}

/*
PutTravelExpensePerDiemCompensationID bs e t a update per diem compensation
*/
func (a *Client) PutTravelExpensePerDiemCompensationID(params *PutTravelExpensePerDiemCompensationIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpensePerDiemCompensationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpensePerDiemCompensationIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpensePerDiemCompensationID",
		Method:             "PUT",
		PathPattern:        "/travelExpense/perDiemCompensation/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpensePerDiemCompensationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpensePerDiemCompensationIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
