// Code generated by go-swagger; DO NOT EDIT.

package order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetOrder finds orders corresponding with sent data
*/
func (a *Client) GetOrder(params *GetOrderParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrder",
		Method:             "GET",
		PathPattern:        "/order",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrderOK), nil

}

/*
GetOrderID gets order by ID
*/
func (a *Client) GetOrderID(params *GetOrderIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrderID",
		Method:             "GET",
		PathPattern:        "/order/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrderIDOK), nil

}

/*
PostOrder creates order
*/
func (a *Client) PostOrder(params *PostOrderParams, authInfo runtime.ClientAuthInfoWriter) (*PostOrderCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostOrder",
		Method:             "POST",
		PathPattern:        "/order",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostOrderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrderCreated), nil

}

/*
PutOrderID updates order
*/
func (a *Client) PutOrderID(params *PutOrderIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutOrderIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOrderIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutOrderID",
		Method:             "PUT",
		PathPattern:        "/order/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutOrderIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrderIDOK), nil

}

/*
PutOrderIDInvoice creates new invoice from order
*/
func (a *Client) PutOrderIDInvoice(params *PutOrderIDInvoiceParams, authInfo runtime.ClientAuthInfoWriter) (*PutOrderIDInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutOrderIDInvoiceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutOrderIDInvoice",
		Method:             "PUT",
		PathPattern:        "/order/{id}/:invoice",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutOrderIDInvoiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutOrderIDInvoiceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
