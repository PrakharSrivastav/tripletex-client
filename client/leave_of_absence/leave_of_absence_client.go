// Code generated by go-swagger; DO NOT EDIT.

package leave_of_absence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new leave of absence API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for leave of absence API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEmployeeEmploymentLeaveOfAbsenceID bs e t a find leave of absence by ID
*/
func (a *Client) GetEmployeeEmploymentLeaveOfAbsenceID(params *GetEmployeeEmploymentLeaveOfAbsenceIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentLeaveOfAbsenceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentLeaveOfAbsenceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentLeaveOfAbsenceID",
		Method:             "GET",
		PathPattern:        "/employee/employment/leaveOfAbsence/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentLeaveOfAbsenceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentLeaveOfAbsenceIDOK), nil

}

/*
PostEmployeeEmploymentLeaveOfAbsence bs e t a create leave of absence
*/
func (a *Client) PostEmployeeEmploymentLeaveOfAbsence(params *PostEmployeeEmploymentLeaveOfAbsenceParams, authInfo runtime.ClientAuthInfoWriter) (*PostEmployeeEmploymentLeaveOfAbsenceCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEmployeeEmploymentLeaveOfAbsenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEmployeeEmploymentLeaveOfAbsence",
		Method:             "POST",
		PathPattern:        "/employee/employment/leaveOfAbsence",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEmployeeEmploymentLeaveOfAbsenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEmployeeEmploymentLeaveOfAbsenceCreated), nil

}

/*
PostEmployeeEmploymentLeaveOfAbsenceList bs e t a create multiple leave of absences
*/
func (a *Client) PostEmployeeEmploymentLeaveOfAbsenceList(params *PostEmployeeEmploymentLeaveOfAbsenceListParams, authInfo runtime.ClientAuthInfoWriter) (*PostEmployeeEmploymentLeaveOfAbsenceListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEmployeeEmploymentLeaveOfAbsenceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEmployeeEmploymentLeaveOfAbsenceList",
		Method:             "POST",
		PathPattern:        "/employee/employment/leaveOfAbsence/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEmployeeEmploymentLeaveOfAbsenceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEmployeeEmploymentLeaveOfAbsenceListCreated), nil

}

/*
PutEmployeeEmploymentLeaveOfAbsenceID bs e t a update leave of absence
*/
func (a *Client) PutEmployeeEmploymentLeaveOfAbsenceID(params *PutEmployeeEmploymentLeaveOfAbsenceIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutEmployeeEmploymentLeaveOfAbsenceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEmployeeEmploymentLeaveOfAbsenceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEmployeeEmploymentLeaveOfAbsenceID",
		Method:             "PUT",
		PathPattern:        "/employee/employment/leaveOfAbsence/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEmployeeEmploymentLeaveOfAbsenceIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEmployeeEmploymentLeaveOfAbsenceIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
