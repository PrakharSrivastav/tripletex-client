// Code generated by go-swagger; DO NOT EDIT.

package subscription

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new subscription API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscription API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteEventSubscriptionID bs e t a delete the given subscription
*/
func (a *Client) DeleteEventSubscriptionID(params *DeleteEventSubscriptionIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventSubscriptionIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEventSubscriptionID",
		Method:             "DELETE",
		PathPattern:        "/event/subscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEventSubscriptionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetEventSubscription bs e t a find all ongoing subscriptions
*/
func (a *Client) GetEventSubscription(params *GetEventSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEventSubscription",
		Method:             "GET",
		PathPattern:        "/event/subscription",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventSubscriptionOK), nil

}

/*
GetEventSubscriptionID bs e t a get subscription by ID
*/
func (a *Client) GetEventSubscriptionID(params *GetEventSubscriptionIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventSubscriptionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventSubscriptionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEventSubscriptionID",
		Method:             "GET",
		PathPattern:        "/event/subscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventSubscriptionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventSubscriptionIDOK), nil

}

/*
PostEventSubscription bs e t a create a new subscription for current employee token
*/
func (a *Client) PostEventSubscription(params *PostEventSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*PostEventSubscriptionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEventSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEventSubscription",
		Method:             "POST",
		PathPattern:        "/event/subscription",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEventSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEventSubscriptionCreated), nil

}

/*
PutEventSubscriptionID bs e t a change a current subscription based on id
*/
func (a *Client) PutEventSubscriptionID(params *PutEventSubscriptionIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutEventSubscriptionIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEventSubscriptionIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEventSubscriptionID",
		Method:             "PUT",
		PathPattern:        "/event/subscription/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEventSubscriptionIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEventSubscriptionIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
