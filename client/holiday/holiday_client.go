// Code generated by go-swagger; DO NOT EDIT.

package holiday

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new holiday API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for holiday API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSalarySettingsHolidayList bs e t a delete multiple holiday settings of current logged in company
*/
func (a *Client) DeleteSalarySettingsHolidayList(params *DeleteSalarySettingsHolidayListParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSalarySettingsHolidayListParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSalarySettingsHolidayList",
		Method:             "DELETE",
		PathPattern:        "/salary/settings/holiday/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSalarySettingsHolidayListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetSalarySettingsHoliday bs e t a find holiday settings of current logged in company
*/
func (a *Client) GetSalarySettingsHoliday(params *GetSalarySettingsHolidayParams, authInfo runtime.ClientAuthInfoWriter) (*GetSalarySettingsHolidayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSalarySettingsHolidayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSalarySettingsHoliday",
		Method:             "GET",
		PathPattern:        "/salary/settings/holiday",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSalarySettingsHolidayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSalarySettingsHolidayOK), nil

}

/*
PostSalarySettingsHoliday bs e t a create a holiday setting of current logged in company
*/
func (a *Client) PostSalarySettingsHoliday(params *PostSalarySettingsHolidayParams, authInfo runtime.ClientAuthInfoWriter) (*PostSalarySettingsHolidayCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSalarySettingsHolidayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSalarySettingsHoliday",
		Method:             "POST",
		PathPattern:        "/salary/settings/holiday",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSalarySettingsHolidayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSalarySettingsHolidayCreated), nil

}

/*
PostSalarySettingsHolidayList bs e t a create multiple holiday settings of current logged in company
*/
func (a *Client) PostSalarySettingsHolidayList(params *PostSalarySettingsHolidayListParams, authInfo runtime.ClientAuthInfoWriter) (*PostSalarySettingsHolidayListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSalarySettingsHolidayListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSalarySettingsHolidayList",
		Method:             "POST",
		PathPattern:        "/salary/settings/holiday/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSalarySettingsHolidayListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSalarySettingsHolidayListCreated), nil

}

/*
PutSalarySettingsHolidayID bs e t a update a holiday setting of current logged in company
*/
func (a *Client) PutSalarySettingsHolidayID(params *PutSalarySettingsHolidayIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutSalarySettingsHolidayIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSalarySettingsHolidayIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSalarySettingsHolidayID",
		Method:             "PUT",
		PathPattern:        "/salary/settings/holiday/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSalarySettingsHolidayIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSalarySettingsHolidayIDOK), nil

}

/*
PutSalarySettingsHolidayList bs e t a update multiple holiday settings of current logged in company
*/
func (a *Client) PutSalarySettingsHolidayList(params *PutSalarySettingsHolidayListParams, authInfo runtime.ClientAuthInfoWriter) (*PutSalarySettingsHolidayListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSalarySettingsHolidayListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSalarySettingsHolidayList",
		Method:             "PUT",
		PathPattern:        "/salary/settings/holiday/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutSalarySettingsHolidayListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSalarySettingsHolidayListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
