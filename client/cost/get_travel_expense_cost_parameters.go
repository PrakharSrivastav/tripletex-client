// Code generated by go-swagger; DO NOT EDIT.

package cost

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTravelExpenseCostParams creates a new GetTravelExpenseCostParams object
// with the default values initialized.
func NewGetTravelExpenseCostParams() *GetTravelExpenseCostParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseCostParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTravelExpenseCostParamsWithTimeout creates a new GetTravelExpenseCostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTravelExpenseCostParamsWithTimeout(timeout time.Duration) *GetTravelExpenseCostParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseCostParams{
		Count: &countDefault,
		From:  &fromDefault,

		timeout: timeout,
	}
}

// NewGetTravelExpenseCostParamsWithContext creates a new GetTravelExpenseCostParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTravelExpenseCostParamsWithContext(ctx context.Context) *GetTravelExpenseCostParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseCostParams{
		Count: &countDefault,
		From:  &fromDefault,

		Context: ctx,
	}
}

// NewGetTravelExpenseCostParamsWithHTTPClient creates a new GetTravelExpenseCostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTravelExpenseCostParamsWithHTTPClient(client *http.Client) *GetTravelExpenseCostParams {
	var (
		countDefault = int64(1000)
		fromDefault  = int64(0)
	)
	return &GetTravelExpenseCostParams{
		Count:      &countDefault,
		From:       &fromDefault,
		HTTPClient: client,
	}
}

/*GetTravelExpenseCostParams contains all the parameters to send to the API endpoint
for the get travel expense cost operation typically these are written to a http.Request
*/
type GetTravelExpenseCostParams struct {

	/*Address
	  Containing

	*/
	Address *string
	/*AmountFrom
	  From and including

	*/
	AmountFrom *float64
	/*AmountTo
	  To and excluding

	*/
	AmountTo *float64
	/*Count
	  Number of elements to return

	*/
	Count *int64
	/*CountFrom
	  From and including

	*/
	CountFrom *int32
	/*CountTo
	  To and excluding

	*/
	CountTo *int32
	/*CurrencyID
	  Equals

	*/
	CurrencyID *string
	/*Fields
	  Fields filter pattern

	*/
	Fields *string
	/*From
	  From index

	*/
	From *int64
	/*Location
	  Containing

	*/
	Location *string
	/*RateFrom
	  From and including

	*/
	RateFrom *float64
	/*RateTo
	  To and excluding

	*/
	RateTo *float64
	/*Sorting
	  Sorting pattern

	*/
	Sorting *string
	/*TravelExpenseID
	  Equals

	*/
	TravelExpenseID *string
	/*VatTypeID
	  Equals

	*/
	VatTypeID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithTimeout(timeout time.Duration) *GetTravelExpenseCostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithContext(ctx context.Context) *GetTravelExpenseCostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithHTTPClient(client *http.Client) *GetTravelExpenseCostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithAddress(address *string) *GetTravelExpenseCostParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetAddress(address *string) {
	o.Address = address
}

// WithAmountFrom adds the amountFrom to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithAmountFrom(amountFrom *float64) *GetTravelExpenseCostParams {
	o.SetAmountFrom(amountFrom)
	return o
}

// SetAmountFrom adds the amountFrom to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetAmountFrom(amountFrom *float64) {
	o.AmountFrom = amountFrom
}

// WithAmountTo adds the amountTo to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithAmountTo(amountTo *float64) *GetTravelExpenseCostParams {
	o.SetAmountTo(amountTo)
	return o
}

// SetAmountTo adds the amountTo to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetAmountTo(amountTo *float64) {
	o.AmountTo = amountTo
}

// WithCount adds the count to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithCount(count *int64) *GetTravelExpenseCostParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetCount(count *int64) {
	o.Count = count
}

// WithCountFrom adds the countFrom to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithCountFrom(countFrom *int32) *GetTravelExpenseCostParams {
	o.SetCountFrom(countFrom)
	return o
}

// SetCountFrom adds the countFrom to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetCountFrom(countFrom *int32) {
	o.CountFrom = countFrom
}

// WithCountTo adds the countTo to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithCountTo(countTo *int32) *GetTravelExpenseCostParams {
	o.SetCountTo(countTo)
	return o
}

// SetCountTo adds the countTo to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetCountTo(countTo *int32) {
	o.CountTo = countTo
}

// WithCurrencyID adds the currencyID to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithCurrencyID(currencyID *string) *GetTravelExpenseCostParams {
	o.SetCurrencyID(currencyID)
	return o
}

// SetCurrencyID adds the currencyId to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetCurrencyID(currencyID *string) {
	o.CurrencyID = currencyID
}

// WithFields adds the fields to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithFields(fields *string) *GetTravelExpenseCostParams {
	o.SetFields(fields)
	return o
}

// SetFields adds the fields to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetFields(fields *string) {
	o.Fields = fields
}

// WithFrom adds the from to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithFrom(from *int64) *GetTravelExpenseCostParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetFrom(from *int64) {
	o.From = from
}

// WithLocation adds the location to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithLocation(location *string) *GetTravelExpenseCostParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetLocation(location *string) {
	o.Location = location
}

// WithRateFrom adds the rateFrom to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithRateFrom(rateFrom *float64) *GetTravelExpenseCostParams {
	o.SetRateFrom(rateFrom)
	return o
}

// SetRateFrom adds the rateFrom to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetRateFrom(rateFrom *float64) {
	o.RateFrom = rateFrom
}

// WithRateTo adds the rateTo to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithRateTo(rateTo *float64) *GetTravelExpenseCostParams {
	o.SetRateTo(rateTo)
	return o
}

// SetRateTo adds the rateTo to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetRateTo(rateTo *float64) {
	o.RateTo = rateTo
}

// WithSorting adds the sorting to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithSorting(sorting *string) *GetTravelExpenseCostParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithTravelExpenseID adds the travelExpenseID to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithTravelExpenseID(travelExpenseID *string) *GetTravelExpenseCostParams {
	o.SetTravelExpenseID(travelExpenseID)
	return o
}

// SetTravelExpenseID adds the travelExpenseId to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetTravelExpenseID(travelExpenseID *string) {
	o.TravelExpenseID = travelExpenseID
}

// WithVatTypeID adds the vatTypeID to the get travel expense cost params
func (o *GetTravelExpenseCostParams) WithVatTypeID(vatTypeID *string) *GetTravelExpenseCostParams {
	o.SetVatTypeID(vatTypeID)
	return o
}

// SetVatTypeID adds the vatTypeId to the get travel expense cost params
func (o *GetTravelExpenseCostParams) SetVatTypeID(vatTypeID *string) {
	o.VatTypeID = vatTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTravelExpenseCostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// query param address
		var qrAddress string
		if o.Address != nil {
			qrAddress = *o.Address
		}
		qAddress := qrAddress
		if qAddress != "" {
			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}

	}

	if o.AmountFrom != nil {

		// query param amountFrom
		var qrAmountFrom float64
		if o.AmountFrom != nil {
			qrAmountFrom = *o.AmountFrom
		}
		qAmountFrom := swag.FormatFloat64(qrAmountFrom)
		if qAmountFrom != "" {
			if err := r.SetQueryParam("amountFrom", qAmountFrom); err != nil {
				return err
			}
		}

	}

	if o.AmountTo != nil {

		// query param amountTo
		var qrAmountTo float64
		if o.AmountTo != nil {
			qrAmountTo = *o.AmountTo
		}
		qAmountTo := swag.FormatFloat64(qrAmountTo)
		if qAmountTo != "" {
			if err := r.SetQueryParam("amountTo", qAmountTo); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.CountFrom != nil {

		// query param countFrom
		var qrCountFrom int32
		if o.CountFrom != nil {
			qrCountFrom = *o.CountFrom
		}
		qCountFrom := swag.FormatInt32(qrCountFrom)
		if qCountFrom != "" {
			if err := r.SetQueryParam("countFrom", qCountFrom); err != nil {
				return err
			}
		}

	}

	if o.CountTo != nil {

		// query param countTo
		var qrCountTo int32
		if o.CountTo != nil {
			qrCountTo = *o.CountTo
		}
		qCountTo := swag.FormatInt32(qrCountTo)
		if qCountTo != "" {
			if err := r.SetQueryParam("countTo", qCountTo); err != nil {
				return err
			}
		}

	}

	if o.CurrencyID != nil {

		// query param currencyId
		var qrCurrencyID string
		if o.CurrencyID != nil {
			qrCurrencyID = *o.CurrencyID
		}
		qCurrencyID := qrCurrencyID
		if qCurrencyID != "" {
			if err := r.SetQueryParam("currencyId", qCurrencyID); err != nil {
				return err
			}
		}

	}

	if o.Fields != nil {

		// query param fields
		var qrFields string
		if o.Fields != nil {
			qrFields = *o.Fields
		}
		qFields := qrFields
		if qFields != "" {
			if err := r.SetQueryParam("fields", qFields); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param from
		var qrFrom int64
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := swag.FormatInt64(qrFrom)
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	if o.Location != nil {

		// query param location
		var qrLocation string
		if o.Location != nil {
			qrLocation = *o.Location
		}
		qLocation := qrLocation
		if qLocation != "" {
			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}

	}

	if o.RateFrom != nil {

		// query param rateFrom
		var qrRateFrom float64
		if o.RateFrom != nil {
			qrRateFrom = *o.RateFrom
		}
		qRateFrom := swag.FormatFloat64(qrRateFrom)
		if qRateFrom != "" {
			if err := r.SetQueryParam("rateFrom", qRateFrom); err != nil {
				return err
			}
		}

	}

	if o.RateTo != nil {

		// query param rateTo
		var qrRateTo float64
		if o.RateTo != nil {
			qrRateTo = *o.RateTo
		}
		qRateTo := swag.FormatFloat64(qrRateTo)
		if qRateTo != "" {
			if err := r.SetQueryParam("rateTo", qRateTo); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if o.TravelExpenseID != nil {

		// query param travelExpenseId
		var qrTravelExpenseID string
		if o.TravelExpenseID != nil {
			qrTravelExpenseID = *o.TravelExpenseID
		}
		qTravelExpenseID := qrTravelExpenseID
		if qTravelExpenseID != "" {
			if err := r.SetQueryParam("travelExpenseId", qTravelExpenseID); err != nil {
				return err
			}
		}

	}

	if o.VatTypeID != nil {

		// query param vatTypeId
		var qrVatTypeID string
		if o.VatTypeID != nil {
			qrVatTypeID = *o.VatTypeID
		}
		qVatTypeID := qrVatTypeID
		if qVatTypeID != "" {
			if err := r.SetQueryParam("vatTypeId", qVatTypeID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
