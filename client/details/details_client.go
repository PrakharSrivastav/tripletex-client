// Code generated by go-swagger; DO NOT EDIT.

package details

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new details API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for details API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEmployeeEmploymentDetails bs e t a find all employmentdetails for employment
*/
func (a *Client) GetEmployeeEmploymentDetails(params *GetEmployeeEmploymentDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentDetails",
		Method:             "GET",
		PathPattern:        "/employee/employment/details",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentDetailsOK), nil

}

/*
GetEmployeeEmploymentDetailsID bs e t a find employment details by ID
*/
func (a *Client) GetEmployeeEmploymentDetailsID(params *GetEmployeeEmploymentDetailsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentDetailsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentDetailsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentDetailsID",
		Method:             "GET",
		PathPattern:        "/employee/employment/details/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentDetailsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentDetailsIDOK), nil

}

/*
GetInvoiceDetails finds project invoice details corresponding with sent data
*/
func (a *Client) GetInvoiceDetails(params *GetInvoiceDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvoiceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvoiceDetails",
		Method:             "GET",
		PathPattern:        "/invoice/details",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvoiceDetailsOK), nil

}

/*
GetInvoiceDetailsID bs e t a get project invoice details by ID
*/
func (a *Client) GetInvoiceDetailsID(params *GetInvoiceDetailsIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvoiceDetailsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceDetailsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvoiceDetailsID",
		Method:             "GET",
		PathPattern:        "/invoice/details/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoiceDetailsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvoiceDetailsIDOK), nil

}

/*
PostEmployeeEmploymentDetails bs e t a create employment details
*/
func (a *Client) PostEmployeeEmploymentDetails(params *PostEmployeeEmploymentDetailsParams, authInfo runtime.ClientAuthInfoWriter) (*PostEmployeeEmploymentDetailsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEmployeeEmploymentDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEmployeeEmploymentDetails",
		Method:             "POST",
		PathPattern:        "/employee/employment/details",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEmployeeEmploymentDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEmployeeEmploymentDetailsCreated), nil

}

/*
PutEmployeeEmploymentDetailsID bs e t a update employment details
*/
func (a *Client) PutEmployeeEmploymentDetailsID(params *PutEmployeeEmploymentDetailsIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutEmployeeEmploymentDetailsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEmployeeEmploymentDetailsIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEmployeeEmploymentDetailsID",
		Method:             "PUT",
		PathPattern:        "/employee/employment/details/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEmployeeEmploymentDetailsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEmployeeEmploymentDetailsIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
