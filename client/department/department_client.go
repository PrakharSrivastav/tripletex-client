// Code generated by go-swagger; DO NOT EDIT.

package department

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new department API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for department API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetDepartment finds department corresponding with sent data
*/
func (a *Client) GetDepartment(params *GetDepartmentParams, authInfo runtime.ClientAuthInfoWriter) (*GetDepartmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDepartmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDepartment",
		Method:             "GET",
		PathPattern:        "/department",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDepartmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDepartmentOK), nil

}

/*
GetDepartmentID gets department by ID
*/
func (a *Client) GetDepartmentID(params *GetDepartmentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetDepartmentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDepartmentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDepartmentID",
		Method:             "GET",
		PathPattern:        "/department/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDepartmentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDepartmentIDOK), nil

}

/*
PostDepartment bs e t a add new department
*/
func (a *Client) PostDepartment(params *PostDepartmentParams, authInfo runtime.ClientAuthInfoWriter) (*PostDepartmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDepartmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDepartment",
		Method:             "POST",
		PathPattern:        "/department",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDepartmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDepartmentCreated), nil

}

/*
PostDepartmentList bs e t a register new departments
*/
func (a *Client) PostDepartmentList(params *PostDepartmentListParams, authInfo runtime.ClientAuthInfoWriter) (*PostDepartmentListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDepartmentListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDepartmentList",
		Method:             "POST",
		PathPattern:        "/department/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDepartmentListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDepartmentListCreated), nil

}

/*
PutDepartmentID bs e t a update department
*/
func (a *Client) PutDepartmentID(params *PutDepartmentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutDepartmentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDepartmentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDepartmentID",
		Method:             "PUT",
		PathPattern:        "/department/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDepartmentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDepartmentIDOK), nil

}

/*
PutDepartmentList bs e t a update multiple departments
*/
func (a *Client) PutDepartmentList(params *PutDepartmentListParams, authInfo runtime.ClientAuthInfoWriter) (*PutDepartmentListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDepartmentListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutDepartmentList",
		Method:             "PUT",
		PathPattern:        "/department/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDepartmentListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutDepartmentListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
