// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLedgerAccountID bs e t a delete account
*/
func (a *Client) DeleteLedgerAccountID(params *DeleteLedgerAccountIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLedgerAccountIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLedgerAccountID",
		Method:             "DELETE",
		PathPattern:        "/ledger/account/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLedgerAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteLedgerAccountList bs e t a delete multiple accounts
*/
func (a *Client) DeleteLedgerAccountList(params *DeleteLedgerAccountListParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLedgerAccountListParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLedgerAccountList",
		Method:             "DELETE",
		PathPattern:        "/ledger/account/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLedgerAccountListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetLedgerAccount finds accounts corresponding with sent data
*/
func (a *Client) GetLedgerAccount(params *GetLedgerAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerAccount",
		Method:             "GET",
		PathPattern:        "/ledger/account",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerAccountOK), nil

}

/*
GetLedgerAccountID gets account by ID
*/
func (a *Client) GetLedgerAccountID(params *GetLedgerAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerAccountID",
		Method:             "GET",
		PathPattern:        "/ledger/account/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerAccountIDOK), nil

}

/*
PostLedgerAccount bs e t a create a new account
*/
func (a *Client) PostLedgerAccount(params *PostLedgerAccountParams, authInfo runtime.ClientAuthInfoWriter) (*PostLedgerAccountCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerAccount",
		Method:             "POST",
		PathPattern:        "/ledger/account",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLedgerAccountCreated), nil

}

/*
PostLedgerAccountList bs e t a create several accounts
*/
func (a *Client) PostLedgerAccountList(params *PostLedgerAccountListParams, authInfo runtime.ClientAuthInfoWriter) (*PostLedgerAccountListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerAccountListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerAccountList",
		Method:             "POST",
		PathPattern:        "/ledger/account/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerAccountListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLedgerAccountListCreated), nil

}

/*
PutLedgerAccountID bs e t a update account
*/
func (a *Client) PutLedgerAccountID(params *PutLedgerAccountIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerAccountIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerAccountIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerAccountID",
		Method:             "PUT",
		PathPattern:        "/ledger/account/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerAccountIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerAccountIDOK), nil

}

/*
PutLedgerAccountList bs e t a update multiple accounts
*/
func (a *Client) PutLedgerAccountList(params *PutLedgerAccountListParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerAccountListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerAccountListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerAccountList",
		Method:             "PUT",
		PathPattern:        "/ledger/account/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerAccountListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerAccountListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
