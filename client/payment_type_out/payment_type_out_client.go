// Code generated by go-swagger; DO NOT EDIT.

package payment_type_out

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new payment type out API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment type out API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteLedgerPaymentTypeOutID bs e t a delete payment type for outgoing payments by ID
*/
func (a *Client) DeleteLedgerPaymentTypeOutID(params *DeleteLedgerPaymentTypeOutIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLedgerPaymentTypeOutIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteLedgerPaymentTypeOutID",
		Method:             "DELETE",
		PathPattern:        "/ledger/paymentTypeOut/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteLedgerPaymentTypeOutIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetLedgerPaymentTypeOut bs e t a gets payment types for outgoing payments

This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI
*/
func (a *Client) GetLedgerPaymentTypeOut(params *GetLedgerPaymentTypeOutParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerPaymentTypeOutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerPaymentTypeOutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerPaymentTypeOut",
		Method:             "GET",
		PathPattern:        "/ledger/paymentTypeOut",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerPaymentTypeOutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerPaymentTypeOutOK), nil

}

/*
GetLedgerPaymentTypeOutID bs e t a get payment type for outgoing payments by ID
*/
func (a *Client) GetLedgerPaymentTypeOutID(params *GetLedgerPaymentTypeOutIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetLedgerPaymentTypeOutIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLedgerPaymentTypeOutIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetLedgerPaymentTypeOutID",
		Method:             "GET",
		PathPattern:        "/ledger/paymentTypeOut/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLedgerPaymentTypeOutIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLedgerPaymentTypeOutIDOK), nil

}

/*
PostLedgerPaymentTypeOut bs e t a create new payment type for outgoing payments
*/
func (a *Client) PostLedgerPaymentTypeOut(params *PostLedgerPaymentTypeOutParams, authInfo runtime.ClientAuthInfoWriter) (*PostLedgerPaymentTypeOutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerPaymentTypeOutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerPaymentTypeOut",
		Method:             "POST",
		PathPattern:        "/ledger/paymentTypeOut",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerPaymentTypeOutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLedgerPaymentTypeOutCreated), nil

}

/*
PostLedgerPaymentTypeOutList bs e t a create multiple payment types for outgoing payments at once
*/
func (a *Client) PostLedgerPaymentTypeOutList(params *PostLedgerPaymentTypeOutListParams, authInfo runtime.ClientAuthInfoWriter) (*PostLedgerPaymentTypeOutListCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLedgerPaymentTypeOutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostLedgerPaymentTypeOutList",
		Method:             "POST",
		PathPattern:        "/ledger/paymentTypeOut/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostLedgerPaymentTypeOutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLedgerPaymentTypeOutListCreated), nil

}

/*
PutLedgerPaymentTypeOutID bs e t a update existing payment type for outgoing payments
*/
func (a *Client) PutLedgerPaymentTypeOutID(params *PutLedgerPaymentTypeOutIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerPaymentTypeOutIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerPaymentTypeOutIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerPaymentTypeOutID",
		Method:             "PUT",
		PathPattern:        "/ledger/paymentTypeOut/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerPaymentTypeOutIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerPaymentTypeOutIDOK), nil

}

/*
PutLedgerPaymentTypeOutList bs e t a update multiple payment types for outgoing payments at once
*/
func (a *Client) PutLedgerPaymentTypeOutList(params *PutLedgerPaymentTypeOutListParams, authInfo runtime.ClientAuthInfoWriter) (*PutLedgerPaymentTypeOutListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutLedgerPaymentTypeOutListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutLedgerPaymentTypeOutList",
		Method:             "PUT",
		PathPattern:        "/ledger/paymentTypeOut/list",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutLedgerPaymentTypeOutListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutLedgerPaymentTypeOutListOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
