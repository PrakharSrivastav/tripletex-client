// Code generated by go-swagger; DO NOT EDIT.

package employment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new employment API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for employment API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetEmployeeEmployment finds all employments for employee
*/
func (a *Client) GetEmployeeEmployment(params *GetEmployeeEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmployment",
		Method:             "GET",
		PathPattern:        "/employee/employment",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentOK), nil

}

/*
GetEmployeeEmploymentID finds employment by ID
*/
func (a *Client) GetEmployeeEmploymentID(params *GetEmployeeEmploymentIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetEmployeeEmploymentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeEmploymentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeEmploymentID",
		Method:             "GET",
		PathPattern:        "/employee/employment/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeEmploymentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEmployeeEmploymentIDOK), nil

}

/*
PostEmployeeEmployment bs e t a create employment
*/
func (a *Client) PostEmployeeEmployment(params *PostEmployeeEmploymentParams, authInfo runtime.ClientAuthInfoWriter) (*PostEmployeeEmploymentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEmployeeEmploymentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostEmployeeEmployment",
		Method:             "POST",
		PathPattern:        "/employee/employment",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEmployeeEmploymentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostEmployeeEmploymentCreated), nil

}

/*
PutEmployeeEmploymentID bs e t a update employemnt
*/
func (a *Client) PutEmployeeEmploymentID(params *PutEmployeeEmploymentIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutEmployeeEmploymentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEmployeeEmploymentIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutEmployeeEmploymentID",
		Method:             "PUT",
		PathPattern:        "/employee/employment/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEmployeeEmploymentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutEmployeeEmploymentIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
