// Code generated by go-swagger; DO NOT EDIT.

package contact

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new contact API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for contact API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetContact finds contacts corresponding with sent data
*/
func (a *Client) GetContact(params *GetContactParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContact",
		Method:             "GET",
		PathPattern:        "/contact",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContactOK), nil

}

/*
GetContactID gets contact by ID
*/
func (a *Client) GetContactID(params *GetContactIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContactID",
		Method:             "GET",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetContactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContactIDOK), nil

}

/*
PostContact creates contact
*/
func (a *Client) PostContact(params *PostContactParams, authInfo runtime.ClientAuthInfoWriter) (*PostContactCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostContact",
		Method:             "POST",
		PathPattern:        "/contact",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostContactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostContactCreated), nil

}

/*
PutContactID bs e t a update contact
*/
func (a *Client) PutContactID(params *PutContactIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutContactID",
		Method:             "PUT",
		PathPattern:        "/contact/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutContactIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutContactIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
