// Code generated by go-swagger; DO NOT EDIT.

package unit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new unit API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for unit API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetProductUnit finds product units corresponding with sent data
*/
func (a *Client) GetProductUnit(params *GetProductUnitParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductUnitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductUnitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProductUnit",
		Method:             "GET",
		PathPattern:        "/product/unit",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductUnitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductUnitOK), nil

}

/*
GetProductUnitID gets product unit by ID
*/
func (a *Client) GetProductUnitID(params *GetProductUnitIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProductUnitIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProductUnitIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProductUnitID",
		Method:             "GET",
		PathPattern:        "/product/unit/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProductUnitIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProductUnitIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
