// Code generated by go-swagger; DO NOT EDIT.

package travel_expense

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new travel expense API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for travel expense API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteTravelExpenseID bs e t a delete travel expense
*/
func (a *Client) DeleteTravelExpenseID(params *DeleteTravelExpenseIDParams, authInfo runtime.ClientAuthInfoWriter) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTravelExpenseIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteTravelExpenseID",
		Method:             "DELETE",
		PathPattern:        "/travelExpense/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTravelExpenseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetTravelExpense bs e t a find travel expenses corresponding with sent data
*/
func (a *Client) GetTravelExpense(params *GetTravelExpenseParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpense",
		Method:             "GET",
		PathPattern:        "/travelExpense",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpenseOK), nil

}

/*
GetTravelExpenseID bs e t a get travel expense by ID
*/
func (a *Client) GetTravelExpenseID(params *GetTravelExpenseIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpenseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpenseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpenseID",
		Method:             "GET",
		PathPattern:        "/travelExpense/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpenseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpenseIDOK), nil

}

/*
PostTravelExpense bs e t a create travel expense
*/
func (a *Client) PostTravelExpense(params *PostTravelExpenseParams, authInfo runtime.ClientAuthInfoWriter) (*PostTravelExpenseCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTravelExpenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostTravelExpense",
		Method:             "POST",
		PathPattern:        "/travelExpense",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostTravelExpenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTravelExpenseCreated), nil

}

/*
PutTravelExpenseApprove bs e t a approve travel expenses
*/
func (a *Client) PutTravelExpenseApprove(params *PutTravelExpenseApproveParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseApproveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseApproveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseApprove",
		Method:             "PUT",
		PathPattern:        "/travelExpense/:approve",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseApproveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseApproveOK), nil

}

/*
PutTravelExpenseCopy bs e t a copy travel expense
*/
func (a *Client) PutTravelExpenseCopy(params *PutTravelExpenseCopyParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseCopyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseCopyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseCopy",
		Method:             "PUT",
		PathPattern:        "/travelExpense/:copy",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseCopyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseCopyOK), nil

}

/*
PutTravelExpenseCreateVouchers bs e t a create vouchers
*/
func (a *Client) PutTravelExpenseCreateVouchers(params *PutTravelExpenseCreateVouchersParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseCreateVouchersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseCreateVouchersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseCreateVouchers",
		Method:             "PUT",
		PathPattern:        "/travelExpense/:createVouchers",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseCreateVouchersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseCreateVouchersOK), nil

}

/*
PutTravelExpenseDeliver bs e t a deliver travel expenses
*/
func (a *Client) PutTravelExpenseDeliver(params *PutTravelExpenseDeliverParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseDeliverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseDeliverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseDeliver",
		Method:             "PUT",
		PathPattern:        "/travelExpense/:deliver",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseDeliverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseDeliverOK), nil

}

/*
PutTravelExpenseID bs e t a update travel expense
*/
func (a *Client) PutTravelExpenseID(params *PutTravelExpenseIDParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseID",
		Method:             "PUT",
		PathPattern:        "/travelExpense/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json; charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseIDOK), nil

}

/*
PutTravelExpenseUnapprove bs e t a unapprove travel expenses
*/
func (a *Client) PutTravelExpenseUnapprove(params *PutTravelExpenseUnapproveParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseUnapproveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseUnapproveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseUnapprove",
		Method:             "PUT",
		PathPattern:        "/travelExpense/:unapprove",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseUnapproveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseUnapproveOK), nil

}

/*
PutTravelExpenseUndeliver bs e t a undeliver travel expenses
*/
func (a *Client) PutTravelExpenseUndeliver(params *PutTravelExpenseUndeliverParams, authInfo runtime.ClientAuthInfoWriter) (*PutTravelExpenseUndeliverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTravelExpenseUndeliverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutTravelExpenseUndeliver",
		Method:             "PUT",
		PathPattern:        "/travelExpense/:undeliver",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutTravelExpenseUndeliverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutTravelExpenseUndeliverOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
