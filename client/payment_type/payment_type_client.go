// Code generated by go-swagger; DO NOT EDIT.

package payment_type

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new payment type API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payment type API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetBankReconciliationPaymentType bs e t a find payment type corresponding with sent data
*/
func (a *Client) GetBankReconciliationPaymentType(params *GetBankReconciliationPaymentTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankReconciliationPaymentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankReconciliationPaymentTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankReconciliationPaymentType",
		Method:             "GET",
		PathPattern:        "/bank/reconciliation/paymentType",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankReconciliationPaymentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankReconciliationPaymentTypeOK), nil

}

/*
GetBankReconciliationPaymentTypeID bs e t a get payment type by ID
*/
func (a *Client) GetBankReconciliationPaymentTypeID(params *GetBankReconciliationPaymentTypeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetBankReconciliationPaymentTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBankReconciliationPaymentTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBankReconciliationPaymentTypeID",
		Method:             "GET",
		PathPattern:        "/bank/reconciliation/paymentType/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBankReconciliationPaymentTypeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBankReconciliationPaymentTypeIDOK), nil

}

/*
GetInvoicePaymentType finds payment type corresponding with sent data
*/
func (a *Client) GetInvoicePaymentType(params *GetInvoicePaymentTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvoicePaymentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoicePaymentTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvoicePaymentType",
		Method:             "GET",
		PathPattern:        "/invoice/paymentType",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoicePaymentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvoicePaymentTypeOK), nil

}

/*
GetInvoicePaymentTypeID gets payment type by ID
*/
func (a *Client) GetInvoicePaymentTypeID(params *GetInvoicePaymentTypeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetInvoicePaymentTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoicePaymentTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetInvoicePaymentTypeID",
		Method:             "GET",
		PathPattern:        "/invoice/paymentType/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInvoicePaymentTypeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetInvoicePaymentTypeIDOK), nil

}

/*
GetTravelExpensePaymentType bs e t a find payment type corresponding with sent data
*/
func (a *Client) GetTravelExpensePaymentType(params *GetTravelExpensePaymentTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpensePaymentTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpensePaymentTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpensePaymentType",
		Method:             "GET",
		PathPattern:        "/travelExpense/paymentType",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpensePaymentTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpensePaymentTypeOK), nil

}

/*
GetTravelExpensePaymentTypeID bs e t a get payment type by ID
*/
func (a *Client) GetTravelExpensePaymentTypeID(params *GetTravelExpensePaymentTypeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetTravelExpensePaymentTypeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTravelExpensePaymentTypeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetTravelExpensePaymentTypeID",
		Method:             "GET",
		PathPattern:        "/travelExpense/paymentType/{id}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTravelExpensePaymentTypeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTravelExpensePaymentTypeIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
