{
  "swagger": "2.0",
  "info": {
    "description": "The Tripletex API is a **RESTful API**, which does not implement PATCH, but uses a PUT with optional fields.\n\n**Actions** or commands are represented in our RESTful path with a prefixed `:`. Example: `/v2/hours/123/:approve`.\n\n**Summaries** or aggregated results are represented in our RESTful path with a prefixed \u003ccode\u0026gt;\u003c/code. Example: \u003ccode/v2/hours/\u0026gt;thisWeeksBillables\u003c/code.\n\n**\"requestID\"** is a key found in all validation and error responses. If additional log information is absolutely necessary, our support division can locate the key value.\n\n**Download** the [swagger.json](/v2/swagger.json) file [OpenAPI Specification](https://github.com/OAI/OpenAPI-Specification) to [generate code](https://github.com/swagger-api/swagger-codegen). This document was generated from the Swagger JSON file.\n\n**version:** This is a versioning number found on all DB records. If included, it will prevent your PUT/POST from overriding any updates to the record since your GET.\n\n**Date \u0026 DateTime** follows the **ISO 8601** standard. Date: `YYYY-MM-DD`. DateTime: `YYYY-MM-DDThh:mm:ssZ`\n\n**Sorting** is done by specifying a comma separated list, where a `-` prefix denotes descending. You can sort by sub object with the following format: `project.name, -date`.\n\n**Searching:** is done by entering values in the optional fields for each API call. The values fall into the following categories: range, in, exact and like.\n\n**Missing fields or even no response data** can occur because result objects and fields are filtered on authorization.\n\n**See [FAQ](https://tripletex.no/execute/docViewer?articleId=906\u0026language=0) for more additional information.**\n\n\n## Authentication:\n- **Tokens:** The Tripletex API uses 3 different tokens - **consumerToken**, **employeeToken** and **sessionToken**.\n\n- **consumerToken** is a token provided to the consumer by Tripletex after the API 2.0 registration is completed.\n\n- **employeeToken** is a token created by an administrator in your Tripletex account via the user settings and the tab \"API access\". Each employee token must be given a set of entitlements. [Read more here.](https://tripletex.no/execute/docViewer?articleId=853\u0026language=0)\n\n- **sessionToken** is the token from `/token/session/:create` which requires a consumerToken and an employeeToken created with the same consumer token, but not an authentication header. See how to create a sessionToken [here](https://tripletex.no/execute/docViewer?articleId=855\u0026language=0).\n- The session token is used as the password in \"Basic Authentication Header\" for API calls.\n\n- Use blank or `0` as username for accessing the account with regular employee token, or if a company owned employee token accesses \u003ccode/company/\u0026gt;withLoginAccess\u003c/code or \u003ccode/token/session/\u0026gt;whoAmI\u003c/code.\n\n- For company owned employee tokens (accounting offices) the ID from \u003ccode/company/\u0026gt;withLoginAccess\u003c/code can be used as username for accessing client accounts.\n\n- If you need to create the header yourself use \u003ccodeAuthorization: Basic \u0026lt;base64encode('0:sessionToken')\u0026gt;\u003c/code.\n\n\n## Tags:\n- \u003cdiv class=\"tag-icon-beta\"\u003c/div **[BETA]** This is a beta endpoint and can be subject to change.\n- \u003cdiv class=\"tag-icon-deprecated\"\u003c/div **[DEPRECATED]** Deprecated means that we intend to remove/change this feature or capability in a future \"major\" API release. We therefore discourage all use of this feature/capability.\n\n## Fields:\nUse the `fields` parameter to specify which fields should be returned. This also supports fields from sub elements. Example values:\n- `project,activity,hours`  returns `{project:..., activity:...., hours:...}`.\n- just `project` returns `\"project\" : { \"id\": 12345, \"url\": \"tripletex.no/v2/projects/12345\"  }`.\n- `project(*)` returns `\"project\" : { \"id\": 12345 \"name\":\"ProjectName\" \"number.....startDate\": \"2013-01-07\" }`.\n- `project(name)` returns `\"project\" : { \"name\":\"ProjectName\" }`.\n- All elements and some subElements :  `*,activity(name),employee(*)`.\n\n## Changes:\nTo get the changes for a resource, `changes` have to be explicitly specified as part of the `fields` parameter, e.g. `*,changes`.\nThere are currently two types of change available: \n- `CREATE` for when the resource was created\n- `UPDATE` for when the resource was updated\n\nNOTE: For objects created prior to October 24th 2018 the list may be incomplete, but will always contain the CREATE and the last change (if the object has been changed after creation).\n\n## Rate limiting in each response header:\nRate limiting is performed on the API calls for an employee for each API consumer. Status regarding the rate limit is returned as headers:\n- `X-Rate-Limit-Limit` - The number of allowed requests in the current period.\n- `X-Rate-Limit-Remaining` - The number of remaining requests.\n- `X-Rate-Limit-Reset` - The number of seconds left in the current period.\n\nOnce the rate limit is hit, all requests will return HTTP status code `429` for the remainder of the current period.\n\n\n## Response envelope:\n```\n{\n  \"fullResultSize\": ###,\n  \"from\": ###, // Paging starting from\n  \"count\": ###, // Paging count\n  \"versionDigest\": \"Hash of full result\",\n  \"values\": [...list of objects...]\n}\n{\n  \"value\": {...single object...}\n}\n```\n\n\n## WebHook envelope:\n```\n{\n  \"subscriptionId\": ###,\n  \"event\": \"object.verb\", // As listed from /v2/event/\n  \"id\": ###, // Object id\n  \"value\": {... single object, null if object.deleted ...}\n}\n```\n\n\n\n## Error/warning envelope:\n```\n{\n  \"status\": ###, // HTTP status code\n  \"code\": #####, // internal status code of event\n  \"message\": \"Basic feedback message in your language\",\n  \"link\": \"Link to doc\",\n  \"developerMessage\": \"More technical message\",\n  \"validationMessages\": [ // Will be null if Error\n    {\n      \"field\": \"Name of field\",\n      \"message\": \"Validation failure information\"\n    }\n  ],\n  \"requestId\": \"UUID used in any logs\"\n}\n```\n\n\n## Status codes / Error codes:\n- **200 OK**\n- **201 Created** - From POSTs that create something new.\n- **204 No Content** - When there is no answer, ex: \"/:anAction\" or DELETE.\n- **400 Bad request** -\n  - **4000**\tBad Request Exception\n  - **11000**\tIllegal Filter Exception\n  - **12000**\tPath Param Exception\n  - **24000**   Cryptography Exception\n- **401 Unauthorized** - When authentication is required and has failed or has not yet been provided\n  -  **3000**\tAuthentication Exception\n  -  **9000**\tSecurity Exception\n- **403 Forbidden** - When AuthorisationManager says no.\n- **404 Not Found** - For content/IDs that does not exist.\n  -  **6000**\tNot Found Exception\n- **409 Conflict** - Such as an edit conflict between multiple simultaneous updates\n  -  **7000**\tObject Exists Exception\n  -  **8000**\tRevision Exception\n  - **10000**\tLocked Exception\n  - **14000**\tDuplicate entry\n- **422 Bad Request** - For Required fields or things like malformed payload.\n  - **15000**\tValue Validation Exception\n  - **16000**\tMapping Exception\n  - **17000**\tSorting Exception\n  - **18000**\tValidation Exception\n  - **21000**\tParam Exception\n  - **22000**\tInvalid JSON Exception\n  - **23000**   Result Set Too Large Exception\n- **429 Too Many Requests** - Request rate limit hit\n- **500 Internal Error** -  Unexpected condition was encountered and no more specific message is suitable\n  -  **1000**\tException",
    "title": "Tripletex API",
    "version": "2.31.1"
  },
  "host": "tripletex.no",
  "basePath": "/v2",
  "paths": {
    "/activity": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "activity"
        ],
        "summary": "Find activities corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "number",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isProjectActivity",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isGeneral",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isChargeable",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isTask",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        }
      }
    },
    "/activity/forTimeSheet": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "activity"
        ],
        "summary": "Find applicable time sheet activities for an employee on a specific day.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Project ID",
            "name": "projectId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "yyyy-MM-dd. Defaults to today.",
            "name": "date",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        }
      }
    },
    "/activity/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "activity"
        ],
        "summary": "Find activity by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperActivity"
            }
          }
        }
      }
    },
    "/address": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "address"
        ],
        "summary": "Find addresses corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "addressLine1",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "addressLine2",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "postalCode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "city",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAddress"
            }
          }
        }
      }
    },
    "/address/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "address"
        ],
        "summary": "Get address by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAddress"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "address"
        ],
        "summary": "Update address. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAddress"
            }
          }
        }
      }
    },
    "/bank": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank"
        ],
        "summary": "[BETA] Find bank corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Bank register number (four digits)",
            "name": "registerNumbers",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBank"
            }
          }
        }
      }
    },
    "/bank/reconciliation": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Find bank reconciliation corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "accountingPeriodId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "accountId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliation"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Post a bank reconciliation.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        }
      }
    },
    "/bank/reconciliation/:fetchFromBank": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Create a bank reconciliation by fetching bank statement from the bank.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "accountId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "accountingPeriodId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        }
      }
    },
    "/bank/reconciliation/lastClosed": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Get last closed reconciliation by account ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Account ID",
            "name": "accountId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format is yyyy-MM-dd",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        }
      }
    },
    "/bank/reconciliation/match": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Find bank reconciliation match corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of bank reconciliation IDs",
            "name": "bankReconciliationId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Create a bank reconciliation match.",
        
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        }
      }
    },
    "/bank/reconciliation/match/:suggest": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Suggest matches for a bank reconciliation by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "bankReconciliationId",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationMatch"
            }
          }
        }
      }
    },
    "/bank/reconciliation/match/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Get bank reconciliation match by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Update a bank reconciliation match by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BankReconciliationMatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationMatch"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation/match"
        ],
        "summary": "[BETA] Delete a bank reconciliation match by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/bank/reconciliation/paymentType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation/paymentType"
        ],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationPaymentType"
            }
          }
        }
      }
    },
    "/bank/reconciliation/paymentType/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation/paymentType"
        ],
        "summary": "[BETA] Get payment type by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliationPaymentType"
            }
          }
        }
      }
    },
    "/bank/reconciliation/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Get bank reconciliation.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Update a bank reconciliation.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/BankReconciliation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankReconciliation"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Delete bank reconciliation by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/bank/reconciliation/{id}/:adjustment": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "bank/reconciliation"
        ],
        "summary": "[BETA] Add an adjustment to reconciliation by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Adjustments",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BankReconciliationAdjustment"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankReconciliationAdjustment"
            }
          }
        }
      }
    },
    "/bank/statement": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Find bank statement corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankStatement"
            }
          }
        }
      }
    },
    "/bank/statement/import": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Upload bank statement file.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Bank ID",
            "name": "bankId",
            "in": "query"
          },
          {
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "DANSKE_BANK_CSV"
            ],
            "type": "string",
            "description": "File format",
            "name": "fileFormat",
            "in": "query",
            "required": true
          },
          {
            "type": "file",
            "description": "The bank statement file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        }
      }
    },
    "/bank/statement/transaction": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Find bank transaction corresponding with sent data.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Bank statement ID",
            "name": "bankStatementId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseBankTransaction"
            }
          }
        }
      }
    },
    "/bank/statement/transaction/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Get bank transaction by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankTransaction"
            }
          }
        }
      }
    },
    "/bank/statement/transaction/{id}/details": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "bank/statement/transaction"
        ],
        "summary": "[BETA] Get additional details about transaction by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperObject"
            }
          }
        }
      }
    },
    "/bank/statement/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Get bank statement.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperBankStatement"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "bank/statement"
        ],
        "summary": "[BETA] Delete bank statement by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/company": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "company"
        ],
        "summary": "Update company information.",
        
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        }
      }
    },
    "/company/withLoginAccess": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "company"
        ],
        "summary": "Returns client customers (with accountant/auditor relation) where the current user has login access (proxy login).",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompany"
            }
          }
        }
      }
    },
    "/company/divisions": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "company"
        ],
        "summary": "[DEPRECATED] Find divisions.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompany"
            }
          }
        }
      }
    },
    "/company/settings/altinn": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "company/altinn"
        ],
        "summary": "[BETA] Find Altinn id for login in company.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "company/altinn"
        ],
        "summary": "[BETA] Update AltInn id and password.",
        
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AltinnCompanyModule"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAltinnCompanyModule"
            }
          }
        }
      }
    },
    "/company/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "company"
        ],
        "summary": "Find company by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompany"
            }
          }
        }
      }
    },
    "/contact": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "contact"
        ],
        "summary": "Find contacts corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "firstName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseContact"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "contact"
        ],
        "summary": "Create contact.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        }
      }
    },
    "/contact/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "contact"
        ],
        "summary": "Get contact by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "contact"
        ],
        "summary": "[BETA] Update contact.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperContact"
            }
          }
        }
      }
    },
    "/country": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "country"
        ],
        "summary": "Find countries corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "code",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCountry"
            }
          }
        }
      }
    },
    "/country/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "country"
        ],
        "summary": "Get country by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCountry"
            }
          }
        }
      }
    },
    "/crm/prospect": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "crm/prospect"
        ],
        "summary": "Find prospects corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "createdDateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "createdDateTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "salesEmployeeId",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isClosed",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "closedReason",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "closedDateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "closedDateTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "competitor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "prospectType",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "projectOfferId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProspect"
            }
          }
        }
      }
    },
    "/crm/prospect/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "crm/prospect"
        ],
        "summary": "Get prospect by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProspect"
            }
          }
        }
      }
    },
    "/currency": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "currency"
        ],
        "summary": "Find currencies corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Currency codes",
            "name": "code",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCurrency"
            }
          }
        }
      }
    },
    "/currency/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "currency"
        ],
        "summary": "Get currency by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCurrency"
            }
          }
        }
      }
    },
    "/customer": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "customer"
        ],
        "summary": "Find customers corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "customerAccountNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "organizationNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "invoiceEmail",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Equals",
            "name": "isInactive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "accountManagerId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Create customer. Related customer addresses may also be created.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        }
      }
    },
    "/customer/category": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "customer/category"
        ],
        "summary": "Find customer/supplier categories corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "number",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "type",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomerCategory"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "customer/category"
        ],
        "summary": "Add new customer/supplier category.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        }
      }
    },
    "/customer/category/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "customer/category"
        ],
        "summary": "Find customer/supplier category by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "customer/category"
        ],
        "summary": "Update customer/supplier category.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CustomerCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomerCategory"
            }
          }
        }
      }
    },
    "/customer/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "customer"
        ],
        "summary": "[BETA] Update multiple customers. Addresses can also be updated.",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "customer"
        ],
        "summary": "[BETA] Create multiple customers. Related supplier addresses may also be created.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCustomer"
            }
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "customer"
        ],
        "summary": "Get customer by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "customer"
        ],
        "summary": "Update customer. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCustomer"
            }
          }
        }
      }
    },
    "/department": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "department"
        ],
        "summary": "Find department corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "departmentNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "departmentManagerId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "department"
        ],
        "summary": "[BETA] Add new department.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        }
      }
    },
    "/department/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "department"
        ],
        "summary": "[BETA] Update multiple departments.",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "department"
        ],
        "summary": "[BETA] Register new departments.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Department"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDepartment"
            }
          }
        }
      }
    },
    "/department/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "department"
        ],
        "summary": "Get department by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "department"
        ],
        "summary": "[BETA] Update department.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Department"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDepartment"
            }
          }
        }
      }
    },
    "/division": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "division"
        ],
        "summary": "[BETA] Get divisions.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "division"
        ],
        "summary": "[BETA] Create division.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        }
      }
    },
    "/division/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "division"
        ],
        "summary": "[BETA] Update multiple divisions.",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Division"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "division"
        ],
        "summary": "[BETA] Create divisions.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Division"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseDivision"
            }
          }
        }
      }
    },
    "/division/{id}": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "division"
        ],
        "summary": "[BETA] Update division information.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Division"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDivision"
            }
          }
        }
      }
    },
    "/document/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "document"
        ],
        "summary": "[BETA] Get document by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDocument"
            }
          }
        }
      }
    },
    "/document/{id}/content": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "document"
        ],
        "summary": "[BETA] Get content of document given by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of document to download content from.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      }
    },
    "/employee": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee"
        ],
        "summary": "Find employees corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "firstName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "lastName",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "employeeNumber",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "allowInformationRegistration",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Equals",
            "name": "includeContacts",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "onlyProjectManagers",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee"
        ],
        "summary": "[BETA] Create one employee.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        }
      }
    },
    "/employee/employment": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment"
        ],
        "summary": "Find all employments for employee.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployment"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/employment"
        ],
        "summary": "[BETA] Create employment.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        }
      }
    },
    "/employee/employment/details": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Find all employmentdetails for employment.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "employmentId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentDetails"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Create employment details.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        }
      }
    },
    "/employee/employment/details/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Find employment details by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/employment/details"
        ],
        "summary": "[BETA] Update employment details. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EmploymentDetails"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmploymentDetails"
            }
          }
        }
      }
    },
    "/employee/employment/employmentType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all employment type IDs.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        }
      }
    },
    "/employee/employment/employmentType/maritimeEmploymentType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all maritime employment type IDs.",
        
        "parameters": [
          {
            "enum": [
              "SHIP_REGISTER",
              "SHIP_TYPE",
              "TRADE_AREA"
            ],
            "type": "string",
            "description": "maritimeEmploymentType",
            "name": "type",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        }
      }
    },
    "/employee/employment/employmentType/salaryType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all salary type IDs.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        }
      }
    },
    "/employee/employment/employmentType/scheduleType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/employmentType"
        ],
        "summary": "[BETA] Find all schedule type IDs.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEmploymentType"
            }
          }
        }
      }
    },
    "/employee/employment/leaveOfAbsence": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Create leave of absence.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        }
      }
    },
    "/employee/employment/leaveOfAbsence/list": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Create multiple leave of absences.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LeaveOfAbsence"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsence"
            }
          }
        }
      }
    },
    "/employee/employment/leaveOfAbsence/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Find leave of absence by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/employment/leaveOfAbsence"
        ],
        "summary": "[BETA] Update leave of absence. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/LeaveOfAbsence"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLeaveOfAbsence"
            }
          }
        }
      }
    },
    "/employee/employment/leaveOfAbsenceType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/leaveOfAbsenceType"
        ],
        "summary": "[BETA] Find all leave of absence type IDs.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLeaveOfAbsenceType"
            }
          }
        }
      }
    },
    "/employee/employment/occupationCode": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/occupationCode"
        ],
        "summary": "[BETA] Find all profession codes.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Containing",
            "name": "nameNO",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "code",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOccupationCode"
            }
          }
        }
      }
    },
    "/employee/employment/remunerationType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/remunerationType"
        ],
        "summary": "[BETA] Find all remuneration type IDs.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseRemunerationType"
            }
          }
        }
      }
    },
    "/employee/employment/workingHoursScheme": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment/workingHoursScheme"
        ],
        "summary": "[BETA] Find working hours scheme ID.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseWorkingHoursScheme"
            }
          }
        }
      }
    },
    "/employee/employment/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/employment"
        ],
        "summary": "Find employment by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/employment"
        ],
        "summary": "[BETA] Update employemnt. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Employment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployment"
            }
          }
        }
      }
    },
    "/employee/entitlement": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/entitlement"
        ],
        "summary": "Find all entitlements for user.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        }
      }
    },
    "/employee/entitlement/:grantClientEntitlementsByTemplate": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Update employee entitlements in client account.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID",
            "name": "employeeId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Client ID",
            "name": "customerId",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "NONE_PRIVILEGES",
              "STANDARD_PRIVILEGES_ACCOUNTANT",
              "STANDARD_PRIVILEGES_AUDITOR",
              "ALL_PRIVILEGES",
              "AGRO_READ_ONLY",
              "AGRO_READ_APPROVE",
              "AGRO_READ_WRITE",
              "AGRO_READ_WRITE_APPROVE",
              "MAMUT_PAYROLL_ADMIN",
              "MAMUT_PAYROLL_CLERK",
              "AGRO_PAYROLL_ADMIN",
              "AGRO_PAYROLL_CLERK"
            ],
            "type": "string",
            "description": "Template",
            "name": "template",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Add template to existing entitlements",
            "name": "addToExisting",
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/employee/entitlement/:grantEntitlementsByTemplate": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "description": "The user will only receive the entitlements which are possible with the registered user type",
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Update employee entitlements.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID",
            "name": "employeeId",
            "in": "query",
            "required": true
          },
          {
            "enum": [
              "NONE_PRIVILEGES",
              "ALL_PRIVILEGES",
              "INVOICING_MANAGER",
              "PERSONELL_MANAGER",
              "ACCOUNTANT",
              "AUDITOR",
              "DEPARTMENT_LEADER"
            ],
            "type": "string",
            "description": "Template",
            "name": "template",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/employee/entitlement/client": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/entitlement"
        ],
        "summary": "[BETA] Find all entitlements at client for user.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Client ID",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseEntitlement"
            }
          }
        }
      }
    },
    "/employee/entitlement/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/entitlement"
        ],
        "summary": "Get entitlement by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEntitlement"
            }
          }
        }
      }
    },
    "/employee/list": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee"
        ],
        "summary": "[BETA] Create several employees.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Employee"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseEmployee"
            }
          }
        }
      }
    },
    "/employee/nextOfKin": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "Find all next of kin for employee.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseNextOfKin"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Create next of kin.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        }
      }
    },
    "/employee/nextOfKin/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Find next of kin by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/nextOfKin"
        ],
        "summary": "[BETA] Update next of kin. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/NextOfKin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperNextOfKin"
            }
          }
        }
      }
    },
    "/employee/standardTime": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Find all standard times for employee.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseStandardTime"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Create standard time.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        }
      }
    },
    "/employee/standardTime/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Find standard time by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee/standardTime"
        ],
        "summary": "[BETA] Update standard time. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/StandardTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperStandardTime"
            }
          }
        }
      }
    },
    "/employee/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "employee"
        ],
        "summary": "Get employee by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "employee"
        ],
        "summary": "Update employee.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Employee"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployee"
            }
          }
        }
      }
    },
    "/event": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "event"
        ],
        "summary": "[BETA] Get all (WebHook) event keys.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMapStringEventInfoDescription"
            }
          }
        }
      }
    },
    "/event/subscription": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Find all ongoing subscriptions.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSubscription"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Create a new subscription for current EmployeeToken.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        }
      }
    },
    "/event/subscription/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Get subscription by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Change a current subscription, based on id.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSubscription"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "event/subscription"
        ],
        "summary": "[BETA] Delete the given subscription.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/inventory": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "inventory"
        ],
        "summary": "Find inventory corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isMainInventory",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isInactive",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInventory"
            }
          }
        }
      }
    },
    "/inventory/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "inventory"
        ],
        "summary": "Get inventory by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInventory"
            }
          }
        }
      }
    },
    "/invoice": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice"
        ],
        "summary": "Find invoices corresponding with sent data. Includes charged outgoing invoices only.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "invoiceDateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "invoiceDateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "invoiceNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "kid",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "voucherId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseInvoice"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "invoice"
        ],
        "summary": "Create invoice.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Invoice"
            }
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Equals",
            "name": "sendToCustomer",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "name": "paymentTypeId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "name": "paidAmount",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        }
      }
    },
    "/invoice/details": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice/details"
        ],
        "summary": "Find ProjectInvoiceDetails corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "invoiceDateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "invoiceDateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectInvoiceDetails"
            }
          }
        }
      }
    },
    "/invoice/details/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice/details"
        ],
        "summary": "[BETA] Get ProjectInvoiceDetails by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectInvoiceDetails"
            }
          }
        }
      }
    },
    "/invoice/paymentType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice/paymentType"
        ],
        "summary": "Find payment type corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentType"
            }
          }
        }
      }
    },
    "/invoice/paymentType/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice/paymentType"
        ],
        "summary": "Get payment type by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentType"
            }
          }
        }
      }
    },
    "/invoice/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice"
        ],
        "summary": "Get invoice by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        }
      }
    },
    "/invoice/{id}/:createCreditNote": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice"
        ],
        "summary": "[BETA] Creates a new Invoice representing a credit memo that nullifies the given invoice. Updates this invoice and any pre-existing inverse invoice.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Invoice id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Credit note date",
            "name": "date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Comment",
            "name": "comment",
            "in": "query"
          },
          {
            "type": "string",
            "description": "The credit note will be sent electronically if this field is filled out",
            "name": "creditNoteEmail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        }
      }
    },
    "/invoice/{id}/:createReminder": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice"
        ],
        "summary": "[BETA] Create invoice reminder and sends it by the given dispatch type. Supports the reminder types SOFT_REMINDER, REMINDER and NOTICE_OF_DEBT_COLLECTION. DispatchType NETS_PRINT must have type NOTICE_OF_DEBT_COLLECTION. SMS and NETS_PRINT must be activated prior to usage in the API.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "SOFT_REMINDER",
              "REMINDER",
              "NOTICE_OF_DEBT_COLLECTION",
              "DEBT_COLLECTION"
            ],
            "type": "string",
            "description": "type",
            "name": "type",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "yyyy-MM-dd. Defaults to today.",
            "name": "date",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Equals",
            "name": "includeCharge",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Equals",
            "name": "includeInterest",
            "in": "query"
          },
          {
            "enum": [
              "NETS_PRINT",
              "EMAIL",
              "SMS"
            ],
            "type": "string",
            "description": "dispatchType",
            "name": "dispatchType",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "SMS number (must be a valid Norwegian telephone number)",
            "name": "smsNumber",
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/invoice/{id}/:payment": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice"
        ],
        "summary": "Update invoice. The invoice is updated with payment information. The amount is in the invoice’s currency.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Invoice id",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Payment date",
            "name": "paymentDate",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "PaymentType id",
            "name": "paymentTypeId",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "Amount paid by customer in the company currency, typically NOK.",
            "name": "paidAmount",
            "in": "query",
            "required": true
          },
          {
            "type": "number",
            "description": "Amount paid by customer in the invoice currency. Optional, but required for invoices in alternate currencies.",
            "name": "paidAmountCurrency",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        }
      }
    },
    "/invoice/{id}/:send": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "invoice"
        ],
        "summary": "[BETA] Send invoice by ID and sendType. Optionally override email recipient.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "EMAIL",
              "EHF"
            ],
            "type": "string",
            "description": "SendType",
            "name": "sendType",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Will override email address if sendType = EMAIL",
            "name": "overrideEmailAddress",
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/invoice/{invoiceId}/pdf": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "invoice"
        ],
        "summary": "Get invoice document by invoice ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Invoice ID from which PDF is downloaded.",
            "name": "invoiceId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      }
    },
    "/ledger": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger"
        ],
        "summary": "Get ledger (hovedbok).",
        
        "parameters": [
          {
            "type": "string",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "name": "dateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "name": "dateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Deprecated",
            "name": "openPostings",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "accountId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "supplierId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "productId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        }
      }
    },
    "/ledger/account": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "Find accounts corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "number",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isBankAccount",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isInactive",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Create a new account.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        }
      }
    },
    "/ledger/account/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Update multiple accounts.",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Create several accounts.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Account"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseAccount"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Delete multiple accounts.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "ids",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ledger/account/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "Get account by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Update account.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Account"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccount"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/account"
        ],
        "summary": "[BETA] Delete account.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ledger/accountingPeriod": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/accountingPeriod"
        ],
        "summary": "Find accounting periods corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "numberFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "numberTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "startFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "startTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "endFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "endTo",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1400,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccountingPeriod"
            }
          }
        }
      }
    },
    "/ledger/accountingPeriod/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/accountingPeriod"
        ],
        "summary": "Get accounting period by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccountingPeriod"
            }
          }
        }
      }
    },
    "/ledger/annualAccount": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/annualAccount"
        ],
        "summary": "Find annual accounts corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "yearFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "yearTo",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAnnualAccount"
            }
          }
        }
      }
    },
    "/ledger/annualAccount/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/annualAccount"
        ],
        "summary": "Get annual account by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAnnualAccount"
            }
          }
        }
      }
    },
    "/ledger/closeGroup": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/closeGroup"
        ],
        "summary": "Find close groups corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCloseGroup"
            }
          }
        }
      }
    },
    "/ledger/closeGroup/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/closeGroup"
        ],
        "summary": "Get close group by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCloseGroup"
            }
          }
        }
      }
    },
    "/ledger/openPost": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger"
        ],
        "summary": "Find open posts corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "name": "date",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "accountId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "supplierId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "productId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseLedgerAccount"
            }
          }
        }
      }
    },
    "/ledger/paymentTypeOut": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "description": "This is an API endpoint for getting payment types for outgoing payments. This is equivalent to the section 'Outgoing Payments' under Accounts Settings in Tripletex. These are the payment types listed in supplier invoices, vat returns, salary payments and Tax/ENI",
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Gets payment types for outgoing payments",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isInactive",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Create new payment type for outgoing payments",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        }
      }
    },
    "/ledger/paymentTypeOut/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Update multiple payment types for outgoing payments at once",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Create multiple payment types for outgoing payments at once",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentTypeOut"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponsePaymentTypeOut"
            }
          }
        }
      }
    },
    "/ledger/paymentTypeOut/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Get payment type for outgoing payments by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Update existing payment type for outgoing payments",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PaymentTypeOut"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPaymentTypeOut"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/paymentTypeOut"
        ],
        "summary": "[BETA] Delete payment type for outgoing payments by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ledger/posting": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find postings corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Format is yyyy-MM-dd (from and incl.).",
            "name": "dateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Format is yyyy-MM-dd (to and excl.).",
            "name": "dateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Deprecated",
            "name": "openPostings",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "accountId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "supplierId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "productId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        }
      }
    },
    "/ledger/posting/openPost": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find open posts corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Invoice date. Format is yyyy-MM-dd (to and excl.).",
            "name": "date",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "accountId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "supplierId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "productId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePosting"
            }
          }
        }
      }
    },
    "/ledger/posting/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/posting"
        ],
        "summary": "Find postings by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPosting"
            }
          }
        }
      }
    },
    "/ledger/vatType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/vatType"
        ],
        "summary": "Find vat types corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "number",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVatType"
            }
          }
        }
      }
    },
    "/ledger/vatType/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/vatType"
        ],
        "summary": "Get vat type by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVatType"
            }
          }
        }
      }
    },
    "/ledger/voucher": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Find vouchers corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "number",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "numberFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "numberTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "typeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VoucherSearchResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Add new voucher. IMPORTANT: Also creates postings. Only the gross amounts will be used",
        
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "name": "sendToLedger",
            "in": "query"
          },
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        }
      }
    },
    "/ledger/voucher/nonPosted": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Find non-posted vouchers.",
        
        "parameters": [
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Include non-approved vouchers in the result.",
            "name": "includeNonApproved",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Only return elements that have changed since this date and time",
            "name": "changedSince",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        }
      }
    },
    "/ledger/voucher/importDocument": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Upload a document to create one or more vouchers. Valid document formats are PDF, PNG, JPEG, TIFF and EHF. Send as multipart form.",
        
        "parameters": [
          {
            "type": "file",
            "description": "The file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional description to use for the voucher(s). If omitted the file name will be used.",
            "name": "description",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "If the document consists of several pages, should the document be split into one voucher per page?",
            "name": "split",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        }
      }
    },
    "/ledger/voucher/importGbat10": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Import GBAT10. Send as multipart form.",
        
        "parameters": [
          {
            "type": "boolean",
            "description": "If the import should generate VAT postings",
            "name": "generateVatPostings",
            "in": "formData",
            "required": true
          },
          {
            "type": "file",
            "description": "The file",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "default": "utf-8",
            "description": "The file encoding",
            "name": "encoding",
            "in": "formData"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ledger/voucher/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Update multiple vouchers. Postings with guiRow==0 will be deleted and regenerated.",
        
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "name": "sendToLedger",
            "in": "query"
          },
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Voucher"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucher"
            }
          }
        }
      }
    },
    "/ledger/voucher/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Get voucher by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Update voucher. Postings with guiRow==0 will be deleted and regenerated.",
        
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "description": "Should the voucher be sent to ledger? Requires the \"Advanced Voucher\" permission.",
            "name": "sendToLedger",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Voucher"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Delete voucher by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ledger/voucher/{id}/:reverse": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Reverses the voucher, and returns the reversed voucher. Supports reversing most voucher types, except salary transactions.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of voucher that should be reversed.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Reverse voucher date",
            "name": "date",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        }
      }
    },
    "/ledger/voucher/{id}/:sendToInbox": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Send voucher to inbox.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of voucher that should be sent to inbox.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "Version of voucher that should be sent to inbox.",
            "name": "version",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Description of why the voucher was rejected. This parameter is only used if the approval feature is enabled.",
            "name": "comment",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        }
      }
    },
    "/ledger/voucher/{id}/:sendToLedger": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "[BETA] Send voucher to ledger.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of voucher that should be sent to ledger.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "Version of voucher that should be sent to ledger.",
            "name": "version",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Voucher number to use. If omitted or 0 the system will assign the number.",
            "name": "number",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucher"
            }
          }
        }
      }
    },
    "/ledger/voucher/{voucherId}/pdf": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Get attachment by voucher ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Voucher ID from which PDF is downloaded.",
            "name": "voucherId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      }
    },
    "/ledger/voucher/{voucherId}/pdf/{fileName}": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "ledger/voucher"
        ],
        "summary": "Upload attachment to voucher. Send as multipart form.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Voucher ID to upload PDF to.",
            "name": "voucherId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "File name to store the pdf under. Will not be the same as the filename on the file returned.",
            "name": "fileName",
            "in": "path",
            "required": true
          },
          {
            "type": "file",
            "description": "The file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/ledger/voucherType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucherType"
        ],
        "summary": "Find voucher types corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseVoucherType"
            }
          }
        }
      }
    },
    "/ledger/voucherType/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "ledger/voucherType"
        ],
        "summary": "Get voucher type by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperVoucherType"
            }
          }
        }
      }
    },
    "/municipality": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "municipality"
        ],
        "summary": "[BETA] Get municipalities.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMunicipality"
            }
          }
        }
      }
    },
    "/order": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "order"
        ],
        "summary": "Find orders corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "number",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "orderDateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "orderDateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isClosed",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseOrder"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "order"
        ],
        "summary": "Create order.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        }
      }
    },
    "/order/orderline": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "order/orderline"
        ],
        "summary": "Create order line. When creating several order lines, use /list for better performance.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/OrderLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        }
      }
    },
    "/order/orderline/list": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "order/orderline"
        ],
        "summary": "Create multiple order lines.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseOrderLine"
            }
          }
        }
      }
    },
    "/order/orderline/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "order/orderline"
        ],
        "summary": "Get order line by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrderLine"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "order/orderline"
        ],
        "summary": "[BETA] Delete order line by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/order/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "order"
        ],
        "summary": "Get order by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "order"
        ],
        "summary": "Update order.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperOrder"
            }
          }
        }
      }
    },
    "/order/{id}/:invoice": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "order"
        ],
        "summary": "Create new invoice from order.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of order to invoice.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The invoice date",
            "name": "invoiceDate",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Send invoice to customer",
            "name": "sendToCustomer",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Payment type to register prepayment of the invoice. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "name": "paymentTypeId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "Paid amount to register prepayment of the invoice, in invoice currency. paymentTypeId and paidAmount are optional, but both must be provided if the invoice has already been paid.",
            "name": "paidAmount",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperInvoice"
            }
          }
        }
      }
    },
    "/product": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "product"
        ],
        "summary": "Find products corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "DEPRECATED. List of product numbers (Integer only)",
            "name": "number",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "List of valid product numbers",
            "name": "productNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isInactive",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isStockItem",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "currencyId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "vatTypeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "productUnitId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "accountId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "costExcludingVatCurrencyFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "costExcludingVatCurrencyTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "priceExcludingVatCurrencyFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "priceExcludingVatCurrencyTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "priceIncludingVatCurrencyFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "priceIncludingVatCurrencyTo",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProduct"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "product"
        ],
        "summary": "Create new product.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        }
      }
    },
    "/product/external": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "product/external"
        ],
        "summary": "[BETA] Find external products corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "enum": [
              "AHLSELL",
              "BROEDRENE_DAHL",
              "ELEKTROSKANDIA",
              "HEIDENREICH",
              "ONNINEN",
              "OTRA",
              "SOLAR",
              "BERGAARD_AMUNDSEN",
              "BERGAARD_AMUNDSEN_STAVANGER",
              "SORLANDET_ELEKTRO",
              "ETMAN_DISTRIBUSJON",
              "ETM_OST",
              "CENIKA",
              "EP_ENGROS",
              "BETEK",
              "DGROUP",
              "FAGERHULT",
              "GLAMOX",
              "SCHNEIDER",
              "STOKKAN",
              "WURTH",
              "ELEKTROIMPORTOEREN",
              "THERMOFLOOR",
              "LYSKOMPONENTER",
              "NORDESIGN"
            ],
            "type": "string",
            "description": "Wholesaler",
            "name": "wholesaler",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Wholesaler organization number. Mandatory if Wholesaler is not selected. If Wholesaler is selected, this field is ignored.",
            "name": "organizationNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of valid el numbers",
            "name": "elNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of valid nrf numbers",
            "name": "nrfNumber",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isInactive",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseExternalProduct"
            }
          }
        }
      }
    },
    "/product/external/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "product/external"
        ],
        "summary": "[BETA] Get external product by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperExternalProduct"
            }
          }
        }
      }
    },
    "/product/unit": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "product/unit"
        ],
        "summary": "Find product units corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Names",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Short names",
            "name": "nameShort",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Common codes",
            "name": "commonCode",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProductUnit"
            }
          }
        }
      }
    },
    "/product/unit/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "product/unit"
        ],
        "summary": "Get product unit by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProductUnit"
            }
          }
        }
      }
    },
    "/product/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "product"
        ],
        "summary": "Get product by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "product"
        ],
        "summary": "Update product.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProduct"
            }
          }
        }
      }
    },
    "/project": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project"
        ],
        "summary": "Find projects corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "number",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isOffer",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "projectManagerId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "employeeInProjectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "startDateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "startDateTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "endDateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "endDateTo",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isClosed",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "externalAccountsNumber",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project"
        ],
        "summary": "[BETA] Add new project.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete multiple projects.",
        
        "parameters": [
          {
            "description": "JSON representing objects to delete. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/project/forTimeSheet": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project"
        ],
        "summary": "Find projects applicable for time sheet registration on a specific day.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "yyyy-MM-dd. Defaults to today.",
            "name": "date",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        }
      }
    },
    "/project/category": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project/category"
        ],
        "summary": "Find project categories corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "number",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectCategory"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/category"
        ],
        "summary": "Add new project category.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        }
      }
    },
    "/project/category/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project/category"
        ],
        "summary": "Find project category by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/category"
        ],
        "summary": "Update project category.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectCategory"
            }
          }
        }
      }
    },
    "/project/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project"
        ],
        "summary": "[BETA] Update multiple projects.",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project"
        ],
        "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Project"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete projects.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "ids",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/project/orderline": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Create order line. When creating several order lines, use /list for better performance.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        }
      }
    },
    "/project/orderline/list": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Create multiple order lines.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectOrderLine"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectOrderLine"
            }
          }
        }
      }
    },
    "/project/orderline/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Get order line by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Update project orderline.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectOrderLine"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectOrderLine"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project/orderline"
        ],
        "summary": "[BETA] Delete order line by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/project/participant": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Add new project participant.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        }
      }
    },
    "/project/participant/list": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Register new projects. Multiple projects for different users can be sent in the same request.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProjectParticipant"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseProjectParticipant"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Delete project participants.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "ids",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/project/participant/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Find project participant by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project/participant"
        ],
        "summary": "[BETA] Update project participant.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ProjectParticipant"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProjectParticipant"
            }
          }
        }
      }
    },
    "/project/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project"
        ],
        "summary": "Find project by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "project"
        ],
        "summary": "[BETA] Update project.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperProject"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "project"
        ],
        "summary": "[BETA] Delete project.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/reminder": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "reminder"
        ],
        "summary": "Find reminders corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "termOfPaymentTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "termOfPaymentFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Equals",
            "name": "invoiceId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Equals",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseReminder"
            }
          }
        }
      }
    },
    "/reminder/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "reminder"
        ],
        "summary": "Get reminder by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperReminder"
            }
          }
        }
      }
    },
    "/salary/payslip": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslips corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "wageTransactionId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "activityId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "yearFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "yearTo",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "monthFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "monthTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "voucherDateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "voucherDateTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "comment",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePayslip"
            }
          }
        }
      }
    },
    "/salary/payslip/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslip by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPayslip"
            }
          }
        }
      }
    },
    "/salary/payslip/{id}/pdf": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "salary/payslip"
        ],
        "summary": "[BETA] Find payslip (PDF document) by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      }
    },
    "/salary/settings": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/settings"
        ],
        "summary": "[BETA] Get salary settings of logged in company.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "salary/settings"
        ],
        "summary": "[BETA] Update settings of logged in company.",
        
        "parameters": [
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SalarySettings"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalarySettings"
            }
          }
        }
      }
    },
    "/salary/settings/holiday": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Find holiday settings of current logged in company.",
        
        "parameters": [
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Create a holiday setting of current logged in company.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        }
      }
    },
    "/salary/settings/holiday/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] update multiple holiday settings of current logged in company.",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] Create multiple holiday settings of current logged in company.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyHoliday"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseCompanyHoliday"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] delete multiple holiday settings of current logged in company.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "ids",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/salary/settings/holiday/{id}": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "salary/settings/holiday"
        ],
        "summary": "[BETA] update a holiday setting of current logged in company.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CompanyHoliday"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCompanyHoliday"
            }
          }
        }
      }
    },
    "/salary/transaction": {
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Create a new salary transaction.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SalaryTransaction"
            }
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Generate tax deduction",
            "name": "generateTaxDeduction",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        }
      }
    },
    "/salary/transaction/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Find salary transaction by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryTransaction"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/transaction"
        ],
        "summary": "[BETA] Delete salary transaction by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/salary/type": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/type"
        ],
        "summary": "[BETA] Find salary type corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "number",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSalaryType"
            }
          }
        }
      }
    },
    "/salary/type/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "salary/type"
        ],
        "summary": "[BETA] Find salary type by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSalaryType"
            }
          }
        }
      }
    },
    "/supplier": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "supplier"
        ],
        "summary": "Find suppliers corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "supplierNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "organizationNumber",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "invoiceEmail",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Equals",
            "name": "isInactive",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "accountManagerId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Only return elements that have changed since this date and time",
            "name": "changedSince",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isWholesaler",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "showProducts",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "supplier"
        ],
        "summary": "Create supplier. Related supplier addresses may also be created.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        }
      }
    },
    "/supplier/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "supplier"
        ],
        "summary": "[BETA] Update multiple suppliers. Addresses can also be updated.",
        
        "parameters": [
          {
            "description": "JSON representing updates to object. Should have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "supplier"
        ],
        "summary": "[BETA] Create multiple suppliers. Related supplier addresses may also be created.",
        
        "parameters": [
          {
            "description": "JSON representing a list of new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Supplier"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseSupplier"
            }
          }
        }
      }
    },
    "/supplier/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "supplier"
        ],
        "summary": "Get supplier by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "supplier"
        ],
        "summary": "Update supplier. ",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Supplier"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSupplier"
            }
          }
        }
      }
    },
    "/timesheet/entry": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find timesheet entry corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "activityId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "comment",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TimesheetEntrySearchResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Add new timesheet entry. Only one entry per employee/date/activity/project combination is supported.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        }
      }
    },
    "/timesheet/entry/recentActivities": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find recently used timesheet activities.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of employee to find activities for. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of project to find activities for",
            "name": "projectId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseActivity"
            }
          }
        }
      }
    },
    "/timesheet/entry/recentProjects": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find projects with recent activities (timesheet entry registered).",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of employee with recent project hours Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseProject"
            }
          }
        }
      }
    },
    "/timesheet/entry/totalHours": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find total hours registered on an employee in a specific period.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "ID of employee to find hours for. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format is yyyy-MM-dd (from and incl.). Defaults to today.",
            "name": "startDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Format is yyyy-MM-dd (to and excl.). Defaults to tomorrow.",
            "name": "endDate",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperDouble"
            }
          }
        }
      }
    },
    "/timesheet/entry/list": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Update timesheet entry. Multiple objects for different users can be sent in the same request.",
        
        "parameters": [
          {
            "description": "List of timesheet entry objects to update",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Add new timesheet entry. Multiple objects for several users can be sent in the same request.",
        
        "parameters": [
          {
            "description": "List of timesheet entry objects",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TimesheetEntry"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ListResponseTimesheetEntry"
            }
          }
        }
      }
    },
    "/timesheet/entry/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Find timesheet entry by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Update timesheet entry by ID. Note: Timesheet entry object fields which are present but not set, or set to 0, will be nulled.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TimesheetEntry"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetEntry"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/entry"
        ],
        "summary": "Delete timesheet entry by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Number of current version",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/timesheet/settings": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/settings"
        ],
        "summary": "[BETA] Get timesheet settings of logged in company.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimesheetSettings"
            }
          }
        }
      }
    },
    "/timesheet/timeClock": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find time clock entries corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "activityId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of IDs",
            "name": "hourId",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isRunning",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTimeClock"
            }
          }
        }
      }
    },
    "/timesheet/timeClock/:start": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Start time clock.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Project ID",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Activity ID",
            "name": "activityId",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional. Default is today’s date",
            "name": "date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        }
      }
    },
    "/timesheet/timeClock/present": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find a user’s present running time clock.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Employee ID. Defaults to ID of token owner.",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        }
      }
    },
    "/timesheet/timeClock/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Find time clock entry by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Update time clock by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TimeClock"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTimeClock"
            }
          }
        }
      }
    },
    "/timesheet/timeClock/{id}/:stop": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "timesheet/timeClock"
        ],
        "summary": "Stop time clock.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 0,
            "description": "Number of current version",
            "name": "version",
            "in": "query"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/token/consumer/byToken": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "token/consumer"
        ],
        "summary": "Get consumer token by token string.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Element ID",
            "name": "token",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperConsumerToken"
            }
          }
        }
      }
    },
    "/token/employee/:create": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "token/employee"
        ],
        "summary": "Create an employee token. Only selected consumers are allowed",
        
        "parameters": [
          {
            "type": "string",
            "description": "A user defined name for the new token",
            "name": "tokenName",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the consumer",
            "name": "consumerName",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "The id of the employee",
            "name": "employeeId",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Is the key company owned",
            "name": "companyOwned",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Expiration date for the employeeToken",
            "name": "expirationDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperEmployeeToken"
            }
          }
        }
      }
    },
    "/token/session/:create": {
      "put": {
        "tags": [
          "token/session"
        ],
        "summary": "Create session token.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Token of the API consumer",
            "name": "consumerToken",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The employees token",
            "name": "employeeToken",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Expiration date for the combined token",
            "name": "expirationDate",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperSessionToken"
            }
          }
        }
      }
    },
    "/token/session/whoAmI": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "token/session"
        ],
        "summary": "Find information about the current user.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperLoggedInUserInfoDTO"
            }
          }
        }
      }
    },
    "/token/session/{token}": {
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "token/session"
        ],
        "summary": "Delete session token.",
        
        "parameters": [
          {
            "type": "string",
            "description": "The login token string to delete",
            "name": "token",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/travelExpense": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Find travel expenses corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Equals",
            "name": "employeeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "departmentId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "projectId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "projectManagerId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "departureDateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "returnDateTo",
            "in": "query"
          },
          {
            "enum": [
              "ALL",
              "OPEN",
              "APPROVED",
              "SALARY_PAID",
              "DELIVERED"
            ],
            "type": "string",
            "default": "ALL",
            "description": "category",
            "name": "state",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Create travel expense.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        }
      }
    },
    "/travelExpense/:approve": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Approve travel expenses.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        }
      }
    },
    "/travelExpense/:copy": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Copy travel expense.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        }
      }
    },
    "/travelExpense/:createVouchers": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Create vouchers",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "yyyy-MM-dd. Defaults to today.",
            "name": "date",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        }
      }
    },
    "/travelExpense/:deliver": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Deliver travel expenses.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        }
      }
    },
    "/travelExpense/:unapprove": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Unapprove travel expenses.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        }
      }
    },
    "/travelExpense/:undeliver": {
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Undeliver travel expenses.",
        
        "parameters": [
          {
            "type": "string",
            "description": "ID of the elements",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpense"
            }
          }
        }
      }
    },
    "/travelExpense/accommodationAllowance": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Find accommodation allowances corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Equals",
            "name": "travelExpenseId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "rateTypeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "rateCategoryId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "rateFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "rateTo",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "countFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "countTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "amountFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "amountTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "location",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "address",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseAccommodationAllowance"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Create accommodation allowance.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        }
      }
    },
    "/travelExpense/accommodationAllowance/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Get travel accommodation allowance by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Update accommodation allowance.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AccommodationAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperAccommodationAllowance"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/accommodationAllowance"
        ],
        "summary": "[BETA] Delete accommodation allowance.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/travelExpense/cost": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Find costs corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Equals",
            "name": "travelExpenseId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "vatTypeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "currencyId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "rateFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "rateTo",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "countFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "countTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "amountFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "amountTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "location",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "address",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseCost"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Create cost.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        }
      }
    },
    "/travelExpense/cost/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Get cost by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Update cost.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Cost"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperCost"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/cost"
        ],
        "summary": "[BETA] Delete cost.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/travelExpense/costCategory": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/costCategory"
        ],
        "summary": "[BETA] Find cost category corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelCostCategory"
            }
          }
        }
      }
    },
    "/travelExpense/costCategory/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/costCategory"
        ],
        "summary": "[BETA] Get cost category by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelCostCategory"
            }
          }
        }
      }
    },
    "/travelExpense/mileageAllowance": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Find mileage allowances corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Equals",
            "name": "travelExpenseId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "rateTypeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "rateCategoryId",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "kmFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "kmTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "rateFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "rateTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "amountFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "amountTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "departureLocation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "destination",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isCompanyCar",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseMileageAllowance"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Create mileage allowance.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        }
      }
    },
    "/travelExpense/mileageAllowance/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Get mileage allowance by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Update mileage allowance.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MileageAllowance"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperMileageAllowance"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/mileageAllowance"
        ],
        "summary": "[BETA] Delete mileage allowance.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/travelExpense/passenger": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Find passengers corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Equals",
            "name": "mileageAllowance",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePassenger"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Create passenger.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        }
      }
    },
    "/travelExpense/passenger/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Get passenger by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Update passenger.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Passenger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPassenger"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/passenger"
        ],
        "summary": "[BETA] Delete passenger.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/travelExpense/paymentType": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/paymentType"
        ],
        "summary": "[BETA] Find payment type corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "List of IDs",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "description",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelPaymentType"
            }
          }
        }
      }
    },
    "/travelExpense/paymentType/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/paymentType"
        ],
        "summary": "[BETA] Get payment type by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelPaymentType"
            }
          }
        }
      }
    },
    "/travelExpense/perDiemCompensation": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Find per diem compensations corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Equals",
            "name": "travelExpenseId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "rateTypeId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "rateCategoryId",
            "in": "query"
          },
          {
            "enum": [
              "NONE",
              "HOTEL",
              "BOARDING_HOUSE_WITHOUT_COOKING",
              "BOARDING_HOUSE_WITH_COOKING"
            ],
            "type": "string",
            "description": "Equals",
            "name": "overnightAccommodation",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "From and including",
            "name": "countFrom",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "To and excluding",
            "name": "countTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "rateFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "rateTo",
            "in": "query"
          },
          {
            "type": "number",
            "description": "From and including",
            "name": "amountFrom",
            "in": "query"
          },
          {
            "type": "number",
            "description": "To and excluding",
            "name": "amountTo",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "location",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "address",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isDeductionForBreakfast",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isLunchDeduction",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isDinnerDeduction",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponsePerDiemCompensation"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Create per diem compensation.",
        
        "parameters": [
          {
            "description": "JSON representing the new object to be created. Should not have ID and version set.",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        }
      }
    },
    "/travelExpense/perDiemCompensation/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Get per diem compensation by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Update per diem compensation.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PerDiemCompensation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperPerDiemCompensation"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/perDiemCompensation"
        ],
        "summary": "[BETA] Delete per diem compensation.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/travelExpense/rate": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/rate"
        ],
        "summary": "[BETA] Find rates corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Equals",
            "name": "rateCategoryId",
            "in": "query"
          },
          {
            "enum": [
              "PER_DIEM",
              "ACCOMMODATION_ALLOWANCE",
              "MILEAGE_ALLOWANCE"
            ],
            "type": "string",
            "description": "Equals",
            "name": "type",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isValidDayTrip",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isValidAccommodation",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isValidDomestic",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isValidForeignTravel",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "requiresZone",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "requiresOvernightAccommodation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRate"
            }
          }
        }
      }
    },
    "/travelExpense/rate/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/rate"
        ],
        "summary": "[BETA] Get travel expense rate by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRate"
            }
          }
        }
      }
    },
    "/travelExpense/rateCategory": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/rateCategory"
        ],
        "summary": "[BETA] Find rate categories corresponding with sent data.",
        
        "parameters": [
          {
            "enum": [
              "PER_DIEM",
              "ACCOMMODATION_ALLOWANCE",
              "MILEAGE_ALLOWANCE"
            ],
            "type": "string",
            "description": "Equals",
            "name": "type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "Equals",
            "name": "travelReportRateCategoryGroupId",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Containing",
            "name": "ameldingWageCode",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Equals",
            "name": "wageCodeNumber",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isValidDayTrip",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isValidAccommodation",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isValidDomestic",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "requiresZone",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isRequiresOvernightAccommodation",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategory"
            }
          }
        }
      }
    },
    "/travelExpense/rateCategory/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/rateCategory"
        ],
        "summary": "[BETA] Get travel expense rate category by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategory"
            }
          }
        }
      }
    },
    "/travelExpense/rateCategoryGroup": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/rateCategoryGroup"
        ],
        "summary": "[BETA] Find rate categoriy groups corresponding with sent data.",
        
        "parameters": [
          {
            "type": "string",
            "description": "Containing",
            "name": "name",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Equals",
            "name": "isForeignTravel",
            "in": "query"
          },
          {
            "type": "string",
            "description": "From and including",
            "name": "dateFrom",
            "in": "query"
          },
          {
            "type": "string",
            "description": "To and excluding",
            "name": "dateTo",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "From index",
            "name": "from",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1000,
            "description": "Number of elements to return",
            "name": "count",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Sorting pattern",
            "name": "sorting",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ListResponseTravelExpenseRateCategoryGroup"
            }
          }
        }
      }
    },
    "/travelExpense/rateCategoryGroup/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense/rateCategoryGroup"
        ],
        "summary": "[BETA] Get travel report rate category group by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpenseRateCategoryGroup"
            }
          }
        }
      }
    },
    "/travelExpense/{id}": {
      "get": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Get travel expense by ID.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Fields filter pattern",
            "name": "fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Update travel expense.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Partial object describing what should be updated",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TravelExpense"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResponseWrapperTravelExpense"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "tokenAuthScheme": []
          }
        ],
        "tags": [
          "travelExpense"
        ],
        "summary": "[BETA] Delete travel expense.",
        
        "parameters": [
          {
            "type": "integer",
            "format": "int32",
            "description": "Element ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    }
  },
  "definitions": {
    "AbstractDTO": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "number": {
          "type": "string"
        }
      }
    },
    "AccommodationAllowance": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "location": {
          "type": "string",
          "maxLength": 255
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "zone": {
          "type": "string"
        }
      }
    },
    "Account": {
      "type": "object",
      "required": [
        "name",
        "number"
      ],
      "properties": {
        "bankAccountCountry": {
          "$ref": "#/definitions/Country"
        },
        "bankAccountIBAN": {
          "type": "string",
          "maxLength": 100
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 100
        },
        "bankAccountSWIFT": {
          "type": "string",
          "maxLength": 100
        },
        "bankName": {
          "type": "string",
          "maxLength": 255
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "currency": {
          "description": "If given, all entries on this account must have this currency.",
          "$ref": "#/definitions/Currency"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isApplicableForSupplierInvoice": {
          "description": "True if this account is applicable for supplier invoice registration.",
          "type": "boolean",
          "default": false
        },
        "isBankAccount": {
          "type": "boolean",
          "default": false
        },
        "isCloseable": {
          "description": "True if it should be possible to close entries on this account and it is possible to filter on open entries.",
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "description": "Inactive accounts will not show up in UI lists.",
          "type": "boolean",
          "default": false
        },
        "isInvoiceAccount": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "requireReconciliation": {
          "description": "True if this account must be reconciled before the accounting period closure.",
          "type": "boolean",
          "default": false
        },
        "type": {
          "type": "string",
          "enum": [
            "ASSETS",
            "EQUITY",
            "LIABILITIES",
            "OPERATING_REVENUES",
            "OPERATING_EXPENSES",
            "INVESTMENT_INCOME",
            "COST_OF_CAPITAL",
            "TAX_ON_ORDINARY_ACTIVITIES",
            "EXTRAORDINARY_INCOME",
            "EXTRAORDINARY_COST",
            "TAX_ON_EXTRAORDINARY_ACTIVITIES",
            "ANNUAL_RESULT",
            "TRANSFERS_AND_ALLOCATIONS"
          ],
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatLocked": {
          "description": "True if all entries on this account must have the vat type given by vatType.",
          "type": "boolean",
          "default": false
        },
        "vatType": {
          "description": "The default vat type for this account.",
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AccountingPeriod": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "end": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isClosed": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "readOnly": true
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "maximum": 11,
          "minimum": 0,
          "readOnly": true
        },
        "start": {
          "type": "string",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Activity": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "isGeneral": {
          "type": "boolean",
          "default": false
        },
        "isProjectActivity": {
          "type": "boolean",
          "default": false
        },
        "isTask": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "addressLine1": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0
        },
        "addressLine2": {
          "type": "string",
          "maxLength": 255,
          "minLength": 0
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "city": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0
        },
        "country": {
          "$ref": "#/definitions/Country"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        },
        "postalCode": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AltinnCompanyModule": {
      "type": "object",
      "required": [
        "altInnId",
        "altInnPassword"
      ],
      "properties": {
        "altInnId": {
          "type": "integer",
          "format": "int32"
        },
        "altInnPassword": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AnnualAccount": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "end": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "start": {
          "type": "string",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        }
      }
    },
    "ApiConsumer": {
      "type": "object",
      "required": [
        "consumerName",
        "emails"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "consumerName": {
          "type": "string",
          "maxLength": 100,
          "minLength": 5
        },
        "emails": {
          "type": "string",
          "format": "email",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ApiError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "developerMessage": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "requestId": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "validationMessages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApiValidationMessage"
          }
        }
      }
    },
    "ApiValidationMessage": {
      "type": "object",
      "properties": {
        "field": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AppSpecific": {
      "type": "object",
      "properties": {
        "electronicVouchersEnabled": {
          "type": "boolean",
          "default": false
        },
        "hourRegistrationEnabled": {
          "type": "boolean",
          "default": false
        },
        "payrollAccountingEnabled": {
          "type": "boolean",
          "default": false
        },
        "projectEnabled": {
          "type": "boolean",
          "default": false
        },
        "userIsAllowedToRegisterHours": {
          "type": "boolean",
          "default": false
        },
        "userIsAuthMySalary": {
          "type": "boolean",
          "default": false
        },
        "userIsAuthWageMenu": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Bank": {
      "type": "object",
      "properties": {
        "bankStatementFileFormatSupport": {
          "description": "Bank statement file formats supported.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DNB_CSV",
              "EIKA_TELEPAY",
              "SPAREBANK1_TELEPAY",
              "VISMA_ACCOUNT_STATEMENT",
              "DANSKE_BANK_CSV"
            ]
          },
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Bank name",
          "type": "string",
          "maxLength": 255,
          "readOnly": true
        },
        "registerNumbers": {
          "description": "Register numbers belonging to bank.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BankReconciliation": {
      "type": "object",
      "required": [
        "account",
        "accountingPeriod"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "accountingPeriod": {
          "$ref": "#/definitions/AccountingPeriod"
        },
        "bankAccountClosingBalanceCurrency": {
          "type": "number"
        },
        "bankStatement": {
          "$ref": "#/definitions/BankStatement"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "closedByContact": {
          "$ref": "#/definitions/Contact",
          "readOnly": true
        },
        "closedByEmployee": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "closedDate": {
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      }
    },
    "BankReconciliationAdjustment": {
      "type": "object",
      "required": [
        "paymentType"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "minimum": 0
        },
        "bankReconciliationMatch": {
          "$ref": "#/definitions/BankReconciliationMatch",
          "readOnly": true
        },
        "bankTransactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "paymentType": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        },
        "postingDate": {
          "type": "string"
        },
        "postings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        }
      }
    },
    "BankReconciliationMatch": {
      "type": "object",
      "required": [
        "bankReconciliation"
      ],
      "properties": {
        "bankReconciliation": {
          "$ref": "#/definitions/BankReconciliation"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "postings": {
          "description": "Match postings",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "transactions": {
          "description": "Match transactions",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "type": {
          "description": "Type of match, MANUAL and APPROVED_SUGGESTION are considered part of reconciliation.",
          "type": "string",
          "enum": [
            "MANUAL",
            "PENDING_SUGGESTION",
            "REJECTED_SUGGESTION",
            "APPROVED_SUGGESTION",
            "ADJUSTMENT",
            "AUTO_MATCHED",
            "REJECTED_AUTO_MATCH"
          ]
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "creditAccount": {
          "description": "Credit account",
          "$ref": "#/definitions/Account",
          "readOnly": true
        },
        "debitAccount": {
          "description": "Debit account",
          "$ref": "#/definitions/Account",
          "readOnly": true
        },
        "description": {
          "description": "Description",
          "type": "string",
          "maxLength": 255,
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isInactive": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BankStatement": {
      "type": "object",
      "properties": {
        "bank": {
          "description": "Bank",
          "$ref": "#/definitions/Bank",
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "closingBalanceCurrency": {
          "description": "Closing balance on the account.",
          "type": "number",
          "readOnly": true
        },
        "fileName": {
          "description": "Bank statement file name.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "openingBalanceCurrency": {
          "description": "Opening balance on the account.",
          "type": "number",
          "readOnly": true
        },
        "transactions": {
          "description": "Bank transactions tied to the bank statement",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          },
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BankTransaction": {
      "type": "object",
      "properties": {
        "amountCurrency": {
          "type": "number"
        },
        "bankStatement": {
          "$ref": "#/definitions/BankStatement"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "postedDate": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Banner": {
      "type": "object",
      "required": [
        "bannerType",
        "button",
        "done",
        "link",
        "message",
        "tag",
        "title"
      ],
      "properties": {
        "bannerType": {
          "type": "string",
          "readOnly": true
        },
        "button": {
          "type": "string",
          "maxLength": 255,
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "done": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "link": {
          "type": "string",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "tag": {
          "type": "string",
          "maxLength": 255,
          "readOnly": true
        },
        "title": {
          "type": "string",
          "maxLength": 255,
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CSVRecord": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "consistent": {
          "type": "boolean",
          "default": false
        },
        "recordNumber": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Change": {
      "type": "object",
      "properties": {
        "changeType": {
          "type": "string",
          "enum": [
            "CREATE",
            "UPDATE",
            "DELETE"
          ]
        },
        "employeeId": {
          "type": "integer",
          "format": "int32"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CloseGroup": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "postings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Company": {
      "type": "object",
      "required": [
        "address",
        "name",
        "type"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "endDate": {
          "type": "string"
        },
        "faxNumber": {
          "type": "string",
          "maxLength": 100
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "startDate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "Other"
          ]
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CompanyAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "companyCode": {
          "type": "string"
        },
        "companyType": {
          "type": "integer",
          "format": "int32"
        },
        "countryId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberMobile": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "score": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ]
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "CompanyHoliday": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "days": {
          "type": "number"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isMaxPercentage2Amount6G": {
          "type": "boolean",
          "default": false
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vacationPayPercentage1": {
          "type": "number"
        },
        "vacationPayPercentage2": {
          "type": "number"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ConsumerToken": {
      "type": "object",
      "properties": {
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "expirationDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "token": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Contact": {
      "type": "object",
      "required": [
        "firstName",
        "lastName"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 100,
          "minLength": 0
        },
        "firstName": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "lastName": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Cost": {
      "type": "object",
      "required": [
        "amountCurrencyIncVat",
        "costCategory",
        "date",
        "paymentType"
      ],
      "properties": {
        "amountCurrencyIncVat": {
          "type": "number"
        },
        "amountNOKInclVAT": {
          "type": "number",
          "readOnly": true
        },
        "amountNOKInclVATHigh": {
          "type": "number",
          "readOnly": true
        },
        "amountNOKInclVATLow": {
          "type": "number",
          "readOnly": true
        },
        "amountNOKInclVATMedium": {
          "type": "number",
          "readOnly": true
        },
        "category": {
          "type": "string",
          "maxLength": 100
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "comments": {
          "type": "string"
        },
        "costCategory": {
          "$ref": "#/definitions/TravelCostCategory"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "isPaidByEmployee": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "paymentType": {
          "$ref": "#/definitions/TravelPaymentType"
        },
        "rate": {
          "type": "number"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isoAlpha2Code": {
          "description": "The ISO 3166-1 Alpha2 code of the country (2 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "type": "string",
          "readOnly": true
        },
        "isoAlpha3Code": {
          "description": "The ISO 3166-1 Alpha3 code of the country (3 letters). https://en.wikipedia.org/wiki/ISO_3166-1",
          "type": "string",
          "maxLength": 3,
          "readOnly": true
        },
        "isoNumericCode": {
          "description": "The ISO 3166-1 numeric code of the country (3 digits). https://en.wikipedia.org/wiki/ISO_3166-1",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Currency": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "code": {
          "type": "string",
          "maxLength": 10
        },
        "description": {
          "type": "string",
          "maxLength": 100
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Customer": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "accountManager": {
          "$ref": "#/definitions/Employee"
        },
        "bankAccounts": {
          "description": "List of the bank account numbers for this customer. Norwegian bank account numbers only.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category1": {
          "description": "Category 1 of this customer",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category2": {
          "description": "Category 2 of this customer",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category3": {
          "description": "Category 3 of this customer",
          "$ref": "#/definitions/CustomerCategory"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "customerNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "minLength": 0
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "invoiceEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "minLength": 0
        },
        "isCustomer": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isInactive": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isPrivateIndividual": {
          "type": "boolean",
          "default": false
        },
        "isSupplier": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "supplierNumber": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CustomerCategory": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CustomerTripletexAccount": {
      "type": "object",
      "required": [
        "accountType",
        "modules",
        "numberOfVouchers",
        "type"
      ],
      "properties": {
        "accountType": {
          "type": "string",
          "enum": [
            "TEST",
            "PAYING"
          ]
        },
        "administrator": {
          "description": "Administrator user to create in the new company. Leave empty if calling this enpoint as an auditor og accountant company",
          "$ref": "#/definitions/Employee"
        },
        "administratorPassword": {
          "description": "The password of the administrator user.",
          "type": "string"
        },
        "autoValidateUserLogin": {
          "description": "Should the user be automatically validated?",
          "type": "boolean",
          "default": false
        },
        "chartOfAccountsType": {
          "description": "The chart of accounts to use for the new company",
          "type": "string",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ]
        },
        "createApiToken": {
          "description": "Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.",
          "type": "boolean",
          "default": false
        },
        "customerId": {
          "description": "The customer id to an already created customer to create a Tripletex account for.",
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "customerInvoiceEmail": {
          "description": "The address to send the invoice to at the customer.",
          "type": "string"
        },
        "modules": {
          "$ref": "#/definitions/Modules"
        },
        "numberOfEmployees": {
          "description": "The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet.",
          "type": "integer",
          "format": "int32"
        },
        "numberOfVouchers": {
          "description": "Number of vouchers each year. Used to calculate prices.",
          "type": "string",
          "enum": [
            "INTERVAL_0_100",
            "INTERVAL_101_500",
            "INTERVAL_0_500",
            "INTERVAL_501_1000",
            "INTERVAL_1001_2000",
            "INTERVAL_2001_3500",
            "INTERVAL_3501_5000",
            "INTERVAL_5001_10000",
            "INTERVAL_UNLIMITED"
          ]
        },
        "sendEmails": {
          "description": "Should the emails normally sent during creation be sent in this case?",
          "type": "boolean",
          "default": false
        },
        "sendInvoiceToCustomer": {
          "description": "Should the invoices for this account be sent to the customer?",
          "type": "boolean",
          "default": false
        },
        "type": {
          "type": "string",
          "enum": [
            "NONE",
            "ENK",
            "AS",
            "NUF",
            "ANS",
            "DA",
            "PRE",
            "KS",
            "ASA",
            "BBL",
            "BRL",
            "GFS",
            "SPA",
            "SF",
            "IKS",
            "KF_FKF",
            "FCD",
            "EOFG",
            "BA",
            "STI",
            "ORG",
            "ESEK",
            "SA",
            "SAM",
            "BO",
            "VPFO",
            "OS",
            "Other"
          ]
        }
      }
    },
    "Department": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "departmentManager": {
          "$ref": "#/definitions/Employee"
        },
        "departmentNumber": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Division": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Document": {
      "type": "object",
      "required": [
        "fileName",
        "size"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "fileName": {
          "description": "The name of the document.",
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "size": {
          "description": "The size of the document in bytes.",
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Employee": {
      "type": "object",
      "required": [
        "firstName",
        "lastName"
      ],
      "properties": {
        "address": {
          "description": "Address tied to the employee",
          "$ref": "#/definitions/Address"
        },
        "allowInformationRegistration": {
          "description": "Determines if salary information can be registered on the user including hours, travel expenses and employee expenses. The user may also be selected as a project member on projects.",
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 100
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "comments": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "dnumber": {
          "type": "string",
          "maxLength": 11
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 100
        },
        "employeeNumber": {
          "type": "string",
          "maxLength": 100,
          "minLength": 0
        },
        "employments": {
          "description": "Employments tied to the employee",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Employment"
          }
        },
        "firstName": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "internationalId": {
          "$ref": "#/definitions/InternationalId"
        },
        "isContact": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "lastName": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "nationalIdentityNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberHome": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "userType": {
          "description": "Define the employee's user type.\u003cbrSTANDARD: Reduced access. Users with limited system entitlements.\u003cbrEXTENDED: Users can be given all system entitlements.\u003cbrNO_ACCESS: User with no log on access.\u003cbrUsers with access to Tripletex must confirm the email address.",
          "type": "string",
          "enum": [
            "STANDARD",
            "EXTENDED",
            "NO_ACCESS"
          ]
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EmployeeToken": {
      "type": "object",
      "properties": {
        "apiConsumer": {
          "$ref": "#/definitions/ApiConsumer"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "expirationDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "token": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Employment": {
      "type": "object",
      "required": [
        "startDate"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "division": {
          "type": "integer",
          "format": "int32"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "employmentDetails": {
          "description": "Employment types tied to the employment",
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          }
        },
        "employmentId": {
          "description": "Existing employment ID used by the current accounting system",
          "type": "string",
          "maxLength": 255
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "lastSalaryChangeDate": {
          "type": "string"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EmploymentDetails": {
      "type": "object",
      "required": [
        "percentageOfFullTimeEquivalent"
      ],
      "properties": {
        "annualSalary": {
          "type": "number",
          "format": "double"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "employmentType": {
          "description": "Define the employment type.",
          "type": "string",
          "enum": [
            "ORDINARY",
            "MARITIME",
            "FREELANCE"
          ]
        },
        "hourlyWage": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "maritimeEmployment": {
          "$ref": "#/definitions/MaritimeEmployment"
        },
        "occupationCode": {
          "description": "To find the right value to enter in this field, you could go to GET /employee/employment/occupationCode to get a list of valid ID's.",
          "type": "integer",
          "format": "int32"
        },
        "payrollTaxMunicipalityId": {
          "type": "integer",
          "format": "int32"
        },
        "percentageOfFullTimeEquivalent": {
          "type": "number",
          "format": "double"
        },
        "remunerationType": {
          "description": "Define the remuneration type.",
          "type": "string",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ]
        },
        "shiftDurationHours": {
          "type": "number",
          "format": "double"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "workingHoursScheme": {
          "description": "Define the working hours scheme type. If you enter a value for SHIFT WORK, you must also enter value for shiftDurationHours",
          "type": "string",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS"
          ]
        }
      }
    },
    "EmploymentType": {
      "type": "object",
      "required": [
        "employmentType"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "code": {
          "type": "string",
          "maxLength": 100
        },
        "employmentType": {
          "description": "Defines the employment type option. ",
          "type": "string",
          "enum": [
            "ORDINARY",
            "MARITIME",
            "FREELANCE"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Entitlement": {
      "type": "object",
      "required": [
        "customer",
        "employee",
        "entitlementId"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "customer": {
          "description": "The company this role applies for",
          "$ref": "#/definitions/Company"
        },
        "employee": {
          "description": "Employee which has this privilege",
          "$ref": "#/definitions/Employee"
        },
        "entitlementId": {
          "description": "Unique id for the type of privilege.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "Descriptive name for the privilege. Might change between releases.",
          "type": "string",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EventInfoDescription": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "payloadModel": {
          "type": "string"
        }
      }
    },
    "ExternalProduct": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "costExcludingVatCurrency": {
          "description": "Price purchase (cost) excluding VAT in the product's currency",
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "discountPrice": {
          "type": "number",
          "readOnly": true
        },
        "elNumber": {
          "type": "string",
          "maxLength": 14
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "isStockItem": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "nrfNumber": {
          "type": "string",
          "maxLength": 14
        },
        "priceExcludingVatCurrency": {
          "description": "Price of purchase excluding VAT in the product's currency",
          "type": "number"
        },
        "priceIncludingVatCurrency": {
          "description": "Price of purchase including VAT in the product's currency",
          "type": "number"
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ImportConfigDTO": {
      "type": "object",
      "properties": {
        "onlyUsers": {
          "type": "boolean",
          "default": false
        },
        "skipAccounts": {
          "type": "boolean",
          "default": false
        },
        "skipUsers": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ImportReportDTO": {
      "type": "object",
      "properties": {
        "accountantAgreementNumber": {
          "type": "string"
        },
        "accountantCompanyId": {
          "type": "integer",
          "format": "int32"
        },
        "admins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "agreementNumber": {
          "type": "string"
        },
        "agreementType": {
          "type": "string"
        },
        "companyId": {
          "type": "integer",
          "format": "int32"
        },
        "companyName": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/ImportConfigDTO"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Result"
          }
        },
        "messages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Result"
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "success": {
          "type": "boolean",
          "default": false
        },
        "summary": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      }
    },
    "InternationalId": {
      "type": "object",
      "properties": {
        "country": {
          "$ref": "#/definitions/Country"
        },
        "intAmeldingType": {
          "description": "Define the employee's next of kin relationtype.\u003cbrPASSPORT_NO\u003cbrNATIONAL_INSURANCE_NO\u003cbrTAX_IDENTIFICATION_NO\u003cbrVALUE_ADDED_TAX_IDENTIFICATION_NO",
          "type": "string",
          "enum": [
            "PASSPORT_NO",
            "NATIONAL_INSURANCE_NO",
            "TAX_IDENTIFICATION_NO",
            "VALUE_ADDED_TAX_IDENTIFICATION_NO"
          ]
        },
        "number": {
          "type": "string",
          "maxLength": 100
        }
      }
    },
    "Inventory": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "isMainInventory": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "number": {
          "type": "string",
          "maxLength": 100,
          "minLength": 1
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Invoice": {
      "type": "object",
      "required": [
        "invoiceDate",
        "invoiceDueDate",
        "orders"
      ],
      "properties": {
        "amount": {
          "description": "In the company’s currency, typically NOK.",
          "type": "number",
          "readOnly": true
        },
        "amountCurrency": {
          "description": "In the specified currency.",
          "type": "number",
          "readOnly": true
        },
        "amountExcludingVat": {
          "description": "Amount excluding VAT (NOK).",
          "type": "number",
          "readOnly": true
        },
        "amountExcludingVatCurrency": {
          "description": "Amount excluding VAT in the specified currency.",
          "type": "number",
          "readOnly": true
        },
        "amountOutstanding": {
          "description": "The amount outstanding based on the history collection, excluding reminders and any existing remits, in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "amountOutstandingTotal": {
          "description": "The amount outstanding based on the history collection and including the last reminder and any existing remits. This is the total invoice balance including reminders and remittances, in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "amountRoundoff": {
          "description": "Amount of round off to nearest integer.",
          "type": "number",
          "readOnly": true
        },
        "amountRoundoffCurrency": {
          "description": "Amount of round off to nearest integer in the specified currency.",
          "type": "number",
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "comment": {
          "type": "string"
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "customer": {
          "description": "The invoice customer",
          "$ref": "#/definitions/Customer",
          "readOnly": true
        },
        "deliveryDate": {
          "description": "The delivery date.",
          "type": "string",
          "readOnly": true
        },
        "ehfSendStatus": {
          "type": "string",
          "enum": [
            "DO_NOT_SEND",
            "SEND",
            "SENT",
            "SEND_FAILURE_RECIPIENT_NOT_FOUND"
          ]
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "invoiceDate": {
          "type": "string"
        },
        "invoiceDueDate": {
          "type": "string"
        },
        "invoiceNumber": {
          "description": "If value is set to 0, the invoice number will be generated.",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "isCharged": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isCreditNote": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "kid": {
          "description": "KID - Kundeidentifikasjonsnummer.",
          "type": "string",
          "maxLength": 25
        },
        "orders": {
          "description": "Related orders. Only one order per invoice is supported at the moment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "postings": {
          "description": "The invoice postings, which includes a posting for the invoice with a positive amount, and one or more posting for the payments with negative amounts.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true
        },
        "projectInvoiceDetails": {
          "description": "ProjectInvoiceDetails contains additional information about the invoice, in particular invoices for projects. It contains information about the charged project, the fee amount, extra percent and amount, extra costs, travel expenses, invoice and project comments, akonto amount and values determining if extra costs, akonto and hours should be included. ProjectInvoiceDetails is an object which represents the relation between an invoice and a Project, Orderline and OrderOut object.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          },
          "readOnly": true
        },
        "reminders": {
          "description": "Invoice debt collection and reminders.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reminder"
          },
          "readOnly": true
        },
        "sumRemits": {
          "description": "The sum of all open remittances of the invoice. Remittances are reimbursement payments back to the customer and are therefore relevant to the bookkeeping of the invoice in the accounts.",
          "type": "number",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "voucher": {
          "description": "The invoice voucher.",
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      }
    },
    "Job": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "interruptable": {
          "type": "boolean",
          "default": false
        },
        "jobDetail": {
          "$ref": "#/definitions/JobDetailDTO"
        },
        "name": {
          "type": "string"
        },
        "stateful": {
          "type": "boolean",
          "default": false
        },
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TriggerDTO"
          }
        }
      }
    },
    "JobDetailDTO": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "jobData": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "jobclass": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "LeaveOfAbsence": {
      "type": "object",
      "required": [
        "percentage",
        "startDate",
        "type"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "employment": {
          "$ref": "#/definitions/Employment"
        },
        "endDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isWageDeduction": {
          "type": "boolean",
          "default": false
        },
        "leaveOfAbsenceId": {
          "description": "Existing leave of absence ID used by the current accounting system",
          "type": "string",
          "maxLength": 255
        },
        "percentage": {
          "type": "number",
          "format": "double"
        },
        "startDate": {
          "type": "string"
        },
        "type": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LeaveOfAbsenceType": {
      "type": "object",
      "required": [
        "leaveOfAbsenceType"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "code": {
          "type": "string",
          "maxLength": 100
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "leaveOfAbsenceType": {
          "description": "Defines the leave of absence type option.",
          "type": "string",
          "enum": [
            "FURLOUGH",
            "SALARY_TYPE",
            "PARENTAL_BENEFITS",
            "EDUCATIONAL",
            "COMPASSIONATE"
          ]
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LedgerAccount": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account",
          "readOnly": true
        },
        "closingBalance": {
          "type": "number",
          "readOnly": true
        },
        "closingBalanceCurrency": {
          "type": "number",
          "readOnly": true
        },
        "currency": {
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "openingBalance": {
          "type": "number",
          "readOnly": true
        },
        "openingBalanceCurrency": {
          "type": "number",
          "readOnly": true
        },
        "postings": {
          "description": "Link to postings on this account.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          },
          "readOnly": true
        },
        "sumAmount": {
          "type": "number",
          "readOnly": true
        },
        "sumAmountCurrency": {
          "type": "number",
          "readOnly": true
        }
      }
    },
    "Link": {
      "type": "object",
      "properties": {
        "href": {
          "type": "string"
        },
        "rel": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "POST",
            "PUT",
            "GET",
            "DELETE"
          ]
        }
      }
    },
    "ListResponseAccommodationAllowance": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseAccount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Account"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseAccountingPeriod": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountingPeriod"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseActivity": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Activity"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseAddress": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseAnnualAccount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AnnualAccount"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBank": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Bank"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBankReconciliation": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliation"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBankReconciliationAdjustment": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliationAdjustment"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBankReconciliationMatch": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliationMatch"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankReconciliationPaymentType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBankStatement": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankStatement"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBankTransaction": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BankTransaction"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseBanner": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Banner"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCloseGroup": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloseGroup"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCompany": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Company"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCompanyAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyAutoCompleteDTO"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCompanyHoliday": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompanyHoliday"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseContact": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCost": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cost"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCountry": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Country"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCurrency": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Currency"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCustomer": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Customer"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseCustomerCategory": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerCategory"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseDepartment": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Department"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseDivision": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Division"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseEmployee": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Employee"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseEmployment": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Employment"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseEmploymentDetails": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentDetails"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseEmploymentType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EmploymentType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseEntitlement": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entitlement"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseExternalProduct": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalProduct"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseInventory": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Inventory"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseInvoice": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Invoice"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseLeaveOfAbsence": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaveOfAbsence"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseLeaveOfAbsenceType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LeaveOfAbsenceType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseLedgerAccount": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LedgerAccount"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseMileageAllowance": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseMunicipality": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Municipality"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseNextOfKin": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NextOfKin"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseNotification": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseOccupationCode": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OccupationCode"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseOrder": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseOrderLine": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLine"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseOrderOffer": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderOffer"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponsePassenger": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Passenger"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponsePaymentType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponsePaymentTypeOut": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentTypeOut"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponsePayslip": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Payslip"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponsePerDiemCompensation": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponsePersonAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PersonAutoCompleteDTO"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponsePosting": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProduct": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Product"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProductUnit": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductUnit"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProject": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProjectCategory": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectCategory"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectInvoiceDetails"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProjectOrderLine": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProjectParticipant": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseProspect": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Prospect"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseReminder": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reminder"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseRemunerationType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemunerationType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseSalarySpecification": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalarySpecification"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseSalaryTransaction": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalaryTransaction"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseSalaryType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalaryType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseSearchCompletionDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchCompletionDTO"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseStandardTime": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StandardTime"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseSubscription": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseSupplier": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Supplier"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseSupplierBalance": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupplierBalance"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTimeClock": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeClock"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTimesheetEntry": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTravelCostCategory": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelCostCategory"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTravelExpense": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpense"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTravelExpenseRate": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpenseRate"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTravelExpenseRateCategory": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategory"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTravelExpenseRateCategoryGroup": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseTravelPaymentType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TravelPaymentType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseVatType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VatType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseVoucher": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseVoucherType": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VoucherType"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseWeeklyStatus": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WeeklyStatus"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "ListResponseWorkingHoursScheme": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WorkingHoursScheme"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "LoggedInUserInfoDTO": {
      "type": "object",
      "properties": {
        "company": {
          "$ref": "#/definitions/Company"
        },
        "companyId": {
          "type": "integer",
          "format": "int32"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "employeeId": {
          "type": "integer",
          "format": "int32"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "MaritimeEmployment": {
      "type": "object",
      "properties": {
        "shipRegister": {
          "description": "Define the ship register. NIS: Norwegian International Ship Register, NOR: Norwegian Ordinary Ship Register, FOREIGN: Foreign Ship Register. ",
          "type": "string",
          "enum": [
            "NIS",
            "NOR",
            "FOREIGN"
          ]
        },
        "shipType": {
          "description": "Define the ship type.",
          "type": "string",
          "enum": [
            "OTHER",
            "DRILLING_PLATFORM",
            "TOURIST"
          ]
        },
        "tradeArea": {
          "description": "Define the trade area.",
          "type": "string",
          "enum": [
            "DOMESTIC",
            "FOREIGN"
          ]
        }
      }
    },
    "MaventaEventDataDTO": {
      "type": "object",
      "required": [
        "destination",
        "invoice_id",
        "invoice_number",
        "recipient_bid",
        "recipient_name"
      ],
      "properties": {
        "destination": {
          "type": "string",
          "readOnly": true
        },
        "error_message": {
          "type": "string",
          "readOnly": true
        },
        "invoice_id": {
          "type": "string",
          "readOnly": true
        },
        "invoice_number": {
          "type": "string",
          "readOnly": true
        },
        "recipient_bid": {
          "type": "string",
          "readOnly": true
        },
        "recipient_name": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "MaventaStatusDTO": {
      "type": "object",
      "required": [
        "company_id",
        "event",
        "event_data",
        "event_timestamp"
      ],
      "properties": {
        "company_id": {
          "type": "string",
          "readOnly": true
        },
        "event": {
          "type": "string",
          "readOnly": true
        },
        "event_data": {
          "$ref": "#/definitions/MaventaEventDataDTO",
          "readOnly": true
        },
        "event_timestamp": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "MileageAllowance": {
      "type": "object",
      "required": [
        "date",
        "departureLocation",
        "destination"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "departureLocation": {
          "type": "string"
        },
        "destination": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isCompanyCar": {
          "type": "boolean",
          "default": false
        },
        "km": {
          "type": "number"
        },
        "passengers": {
          "description": "Link to individual passengers.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Passenger"
          },
          "readOnly": true
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MobileAppLogin": {
      "type": "object",
      "required": [
        "appSecret",
        "expirationDate",
        "password",
        "username"
      ],
      "properties": {
        "appSecret": {
          "description": "App secret (temporary security mechanism during testing)",
          "type": "string"
        },
        "expirationDate": {
          "description": "Expiration date for the combined token",
          "type": "string"
        },
        "password": {
          "description": "Users password",
          "type": "string"
        },
        "username": {
          "description": "Users username (email)",
          "type": "string"
        }
      }
    },
    "Modules": {
      "type": "object",
      "properties": {
        "accounting": {
          "description": "Not readable. Only for input.",
          "type": "boolean",
          "default": false
        },
        "agro": {
          "type": "boolean",
          "default": false
        },
        "approveVoucher": {
          "description": "Only readable for now",
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "electro": {
          "description": "Not readable. Only for input.",
          "type": "boolean",
          "default": false
        },
        "electronicVouchers": {
          "description": "Not readable. Only for input.",
          "type": "boolean",
          "default": false
        },
        "invoice": {
          "description": "Not readable. Only for input.",
          "type": "boolean",
          "default": false
        },
        "mamut": {
          "type": "boolean",
          "default": false
        },
        "ocr": {
          "type": "boolean",
          "default": false
        },
        "project": {
          "description": "Not readable. Only for input.",
          "type": "boolean",
          "default": false
        },
        "remit": {
          "type": "boolean",
          "default": false
        },
        "salary": {
          "description": "Not readable. Only for input.",
          "type": "boolean",
          "default": false
        },
        "salaryStartDate": {
          "type": "string",
          "format": "date"
        },
        "vvs": {
          "description": "Not readable. Only for input.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "MonthlyStatus": {
      "type": "object",
      "required": [
        "employee"
      ],
      "properties": {
        "approved": {
          "type": "boolean",
          "default": false
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee"
        },
        "approvedDate": {
          "type": "string"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "completed": {
          "type": "boolean",
          "default": false
        },
        "date": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hoursPaid": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vacationPaid": {
          "type": "number",
          "format": "double"
        },
        "vacationTransferred": {
          "type": "number",
          "format": "double"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "wagePayment": {
          "$ref": "#/definitions/Payslip"
        }
      }
    },
    "Municipality": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "county": {
          "type": "string",
          "maxLength": 100,
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 100,
          "readOnly": true
        },
        "number": {
          "type": "string",
          "maxLength": 4,
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NextOfKin": {
      "type": "object",
      "required": [
        "name",
        "phoneNumber"
      ],
      "properties": {
        "address": {
          "type": "string",
          "maxLength": 255
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 20
        },
        "typeOfRelationship": {
          "description": "Define the employee's next of kin relationtype.\u003cbrSPOUSE\u003cbrPARTNER\u003cbrPARENT\u003cbrCHILD\u003cbrSIBLING",
          "type": "string",
          "enum": [
            "SPOUSE",
            "PARTNER",
            "PARENT",
            "CHILD",
            "SIBLING"
          ]
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "date",
        "message",
        "title",
        "type"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "link": {
          "type": "string",
          "maxLength": 255
        },
        "message": {
          "type": "string",
          "maxLength": 255
        },
        "title": {
          "type": "string",
          "maxLength": 100
        },
        "type": {
          "type": "string",
          "maxLength": 50
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OccupationCode": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "code": {
          "type": "string",
          "maxLength": 7
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Order": {
      "type": "object",
      "required": [
        "customer",
        "deliveryDate",
        "orderDate"
      ],
      "properties": {
        "attn": {
          "$ref": "#/definitions/Contact"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "contact": {
          "$ref": "#/definitions/Contact"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "deliveryAddress": {
          "description": "Delivery address of this order. This can be a new or existing address",
          "$ref": "#/definitions/Address"
        },
        "deliveryComment": {
          "type": "string"
        },
        "deliveryDate": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "invoiceComment": {
          "type": "string"
        },
        "invoicesDueIn": {
          "description": "Number of days/months in which invoices created from this order is due",
          "type": "integer",
          "format": "int32",
          "maximum": 10000,
          "minimum": 0
        },
        "invoicesDueInType": {
          "description": "Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this order. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.",
          "type": "string",
          "enum": [
            "DAYS",
            "MONTHS",
            "RECURRING_DAY_OF_MONTH"
          ]
        },
        "isClosed": {
          "description": "Denotes if this order is closed. A closed order can no longer be invoiced unless it is opened again.",
          "type": "boolean",
          "default": false
        },
        "isPrioritizeAmountsIncludingVat": {
          "type": "boolean",
          "default": false
        },
        "isShowOpenPostsOnInvoices": {
          "description": "Show account statement - open posts on invoices created from this order",
          "type": "boolean",
          "default": false
        },
        "isSubscription": {
          "description": "If true, the order is a subscription, which enables periodical invoicing of order lines",
          "type": "boolean",
          "default": false
        },
        "isSubscriptionAutoInvoicing": {
          "description": "Automatic invoicing. Starts when the subscription is approved",
          "type": "boolean",
          "default": false
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "orderDate": {
          "type": "string"
        },
        "orderLineSorting": {
          "type": "string",
          "enum": [
            "ID",
            "PRODUCT",
            "CUSTOM"
          ]
        },
        "orderLines": {
          "description": "Order lines tied to the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderLine"
          },
          "readOnly": true
        },
        "ourContact": {
          "description": "If the contact is not an employee",
          "$ref": "#/definitions/Contact"
        },
        "ourContactEmployee": {
          "description": "If the contact is an employee",
          "$ref": "#/definitions/Employee"
        },
        "overdueNoticeEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "receiverEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254
        },
        "reference": {
          "type": "string",
          "maxLength": 255
        },
        "subscriptionDuration": {
          "description": "Number of months/years the subscription shall run",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "subscriptionDurationType": {
          "description": "The time unit of subscriptionDuration",
          "type": "string",
          "enum": [
            "MONTHS",
            "YEAR"
          ]
        },
        "subscriptionInvoicingTime": {
          "description": "Number of days/months invoicing in advance/in arrears",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "subscriptionInvoicingTimeInAdvanceOrArrears": {
          "description": "Invoicing in advance/in arrears",
          "type": "string",
          "enum": [
            "ADVANCE",
            "ARREARS"
          ]
        },
        "subscriptionInvoicingTimeType": {
          "description": "The time unit of subscriptionInvoicingTime",
          "type": "string",
          "enum": [
            "DAYS",
            "MONTHS"
          ]
        },
        "subscriptionPeriodsOnInvoice": {
          "description": "Number of periods on each invoice",
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "subscriptionPeriodsOnInvoiceType": {
          "description": "The time unit of subscriptionPeriodsOnInvoice",
          "type": "string",
          "enum": [
            "MONTHS"
          ],
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OrderLine": {
      "type": "object",
      "required": [
        "order"
      ],
      "properties": {
        "amountExcludingVatCurrency": {
          "description": "Total amount on order line excluding VAT in the order's currency",
          "type": "number",
          "readOnly": true
        },
        "amountIncludingVatCurrency": {
          "description": "Total amount on order line including VAT in the order's currency",
          "type": "number",
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "count": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "The order line's currency. Determined by the order's currency.",
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "discount": {
          "description": "Discount given as a percentage (%)",
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "isSubscription": {
          "type": "boolean",
          "default": false
        },
        "markup": {
          "description": "Markup given as a percentage (%)",
          "type": "number",
          "format": "double"
        },
        "order": {
          "$ref": "#/definitions/Order"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "subscriptionPeriodEnd": {
          "type": "string"
        },
        "subscriptionPeriodStart": {
          "type": "string"
        },
        "unitCostCurrency": {
          "description": "Unit price purchase (cost) excluding VAT in the order's currency",
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "description": "Unit price of purchase excluding VAT in the order's currency",
          "type": "number"
        },
        "unitPriceIncludingVatCurrency": {
          "description": "Unit price of purchase including VAT in the order's currency",
          "type": "number"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "OrderOffer": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "customer": {
          "description": "The offer's customer",
          "$ref": "#/definitions/Customer"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "offerDate": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Passenger": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "mileageAllowance": {
          "$ref": "#/definitions/MileageAllowance"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PaymentType": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "customer": {
          "$ref": "#/definitions/Customer",
          "readOnly": true
        },
        "debitAccount": {
          "$ref": "#/definitions/Account"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "supplier": {
          "$ref": "#/definitions/Supplier",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PaymentTypeOut": {
      "type": "object",
      "required": [
        "creditAccount",
        "description"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "creditAccount": {
          "$ref": "#/definitions/Account"
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isBruttoWageDeduction": {
          "description": "true if it should be a deduction from the wage. The module PROVISIONSALARY is required to both view and change this setting",
          "type": "boolean",
          "default": false
        },
        "isInactive": {
          "description": "true if the payment type should be hidden from available payment types",
          "type": "boolean",
          "default": false
        },
        "requiresSeparateVoucher": {
          "description": "true if a separate voucher is required",
          "type": "boolean",
          "default": false
        },
        "sequence": {
          "description": "determines in which order the types should be listed. No 1 is listed first",
          "type": "integer",
          "format": "int32"
        },
        "showIncomingInvoice": {
          "description": "true if the payment type should be available in supplier invoices",
          "type": "boolean",
          "default": false
        },
        "showVatReturns": {
          "description": "true if the payment type should be available in vat returns",
          "type": "boolean",
          "default": false
        },
        "showWagePayment": {
          "description": "true if the payment type should be available in wage payments. The wage module is required to both view and change this setting",
          "type": "boolean",
          "default": false
        },
        "showWagePeriodTransaction": {
          "description": "true if the payment type should be available in period transactionsThe wage module is required to both view and change this setting",
          "type": "boolean",
          "default": false
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Payslip": {
      "type": "object",
      "required": [
        "employee"
      ],
      "properties": {
        "amount": {
          "type": "number",
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "description": "Voucher date.",
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "grossAmount": {
          "type": "number",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "readOnly": true
        },
        "specifications": {
          "description": "Link to salary specifications.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalarySpecification"
          }
        },
        "transaction": {
          "$ref": "#/definitions/SalaryTransaction"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vacationAllowanceAmount": {
          "type": "number",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PerDiemCompensation": {
      "type": "object",
      "required": [
        "location"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isDeductionForBreakfast": {
          "type": "boolean",
          "default": false
        },
        "isDeductionForDinner": {
          "type": "boolean",
          "default": false
        },
        "isDeductionForLunch": {
          "type": "boolean",
          "default": false
        },
        "location": {
          "type": "string",
          "maxLength": 255
        },
        "overnightAccommodation": {
          "description": "Set what sort of accommodation was had overnight.",
          "type": "string",
          "enum": [
            "NONE",
            "HOTEL",
            "BOARDING_HOUSE_WITHOUT_COOKING",
            "BOARDING_HOUSE_WITH_COOKING"
          ]
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "rateType": {
          "$ref": "#/definitions/TravelExpenseRate"
        },
        "travelExpense": {
          "$ref": "#/definitions/TravelExpense"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "zone": {
          "type": "string"
        }
      }
    },
    "PersonAutoCompleteDTO": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "countryId": {
          "type": "integer",
          "format": "int32"
        },
        "email": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "phoneNumberMobile": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "reserved": {
          "type": "boolean",
          "default": false
        },
        "score": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ]
          }
        },
        "url": {
          "type": "string"
        }
      }
    },
    "Posting": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "amount": {
          "type": "number"
        },
        "amountCurrency": {
          "type": "number"
        },
        "amountGross": {
          "type": "number"
        },
        "amountGrossCurrency": {
          "type": "number"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "closeGroup": {
          "$ref": "#/definitions/CloseGroup"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "date": {
          "type": "string"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "invoiceNumber": {
          "type": "string",
          "maxLength": 100
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "row": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "systemGenerated": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "termOfPayment": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      }
    },
    "Product": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "costExcludingVatCurrency": {
          "description": "Price purchase (cost) excluding VAT in the product's currency",
          "type": "number"
        },
        "currency": {
          "$ref": "#/definitions/Currency"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "discountPrice": {
          "type": "number",
          "readOnly": true
        },
        "elNumber": {
          "type": "string",
          "maxLength": 14,
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isInactive": {
          "type": "boolean",
          "default": false
        },
        "isStockItem": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "nrfNumber": {
          "type": "string",
          "maxLength": 14,
          "readOnly": true
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "priceExcludingVatCurrency": {
          "description": "Price of purchase excluding VAT in the product's currency",
          "type": "number"
        },
        "priceIncludingVatCurrency": {
          "description": "Price of purchase including VAT in the product's currency",
          "type": "number"
        },
        "productUnit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "resaleProduct": {
          "$ref": "#/definitions/Product"
        },
        "stockOfGoods": {
          "type": "number",
          "readOnly": true
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProductUnit": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "commonCode": {
          "type": "string",
          "maxLength": 50
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        },
        "nameShort": {
          "type": "string",
          "maxLength": 50
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Project": {
      "type": "object",
      "required": [
        "isInternal",
        "name",
        "projectManager",
        "startDate"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "customer": {
          "description": "The project's customer",
          "$ref": "#/definitions/Customer"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address",
          "readOnly": true
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "discountPercentage": {
          "description": "Project discount percentage.",
          "type": "number",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "readOnly": true
        },
        "displayNameFormat": {
          "description": "Defines project name presentation in overviews.",
          "type": "string",
          "enum": [
            "NAME_STANDARD",
            "NAME_INCL_CUSTOMER_NAME",
            "NAME_INCL_PARENT_NAME",
            "NAME_INCL_PARENT_NUMBER",
            "NAME_INCL_PARENT_NAME_AND_NUMBER"
          ]
        },
        "endDate": {
          "type": "string"
        },
        "externalAccountsNumber": {
          "type": "string",
          "maxLength": 100
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "isInternal": {
          "description": "Must be set to true.",
          "type": "boolean",
          "default": false
        },
        "isOffer": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isReadyForInvoicing": {
          "type": "boolean",
          "default": false
        },
        "mainProject": {
          "$ref": "#/definitions/Project",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "orderLines": {
          "description": "Order lines tied to the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectOrderLine"
          },
          "readOnly": true
        },
        "participants": {
          "description": "Link to individual project participants.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectParticipant"
          },
          "readOnly": true
        },
        "projectCategory": {
          "$ref": "#/definitions/ProjectCategory"
        },
        "projectManager": {
          "$ref": "#/definitions/Employee"
        },
        "startDate": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProjectCategory": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "number": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProjectInvoiceDetails": {
      "type": "object",
      "required": [
        "feeInvoiceText",
        "invoiceText"
      ],
      "properties": {
        "amountOrderLinesAndReinvoicing": {
          "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice.",
          "type": "number",
          "readOnly": true
        },
        "amountOrderLinesAndReinvoicingCurrency": {
          "description": "The amount of chargeable manual order lines and vendor invoices on the project invoice, in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "amountTravelReportsAndExpenses": {
          "description": "The amount of travel costs and expenses on the project invoice.",
          "type": "number",
          "readOnly": true
        },
        "amountTravelReportsAndExpensesCurrency": {
          "description": "The amount of travel costs and expenses on the project invoice, in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "feeAmount": {
          "description": "Fee amount of the project. For example: 100 NOK.",
          "type": "number",
          "readOnly": true
        },
        "feeAmountCurrency": {
          "description": "Fee amount of the project in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "feeInvoiceText": {
          "description": "The fee comment on the project invoice.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "includeHours": {
          "description": "Determines if hours should be included on the project invoice.",
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "includeOnAccountBalance": {
          "description": "Determines if akonto should be included on the project invoice.",
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "includeOrderLinesAndReinvoicing": {
          "description": "Determines if extra costs should be included on the project invoice.",
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "invoiceText": {
          "description": "The comment on the project invoice.",
          "type": "string",
          "readOnly": true
        },
        "markupAmount": {
          "description": "The amount value of mark-up of amountFee on the project invoice. For example: 10 NOK.",
          "type": "number",
          "readOnly": true
        },
        "markupAmountCurrency": {
          "description": "The amount value of mark-up of amountFee on the project invoice, in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "markupPercent": {
          "description": "The percentage value of mark-up of amountFee. For example: 10%.",
          "type": "number",
          "readOnly": true
        },
        "onAccountBalanceAmount": {
          "description": "The akonto amount on the project invoice.",
          "type": "number",
          "readOnly": true
        },
        "onAccountBalanceAmountCurrency": {
          "description": "The akonto amount on the project invoice in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "project": {
          "description": "The Project related to the Invoice and ProjectInvoiceAdditionalInfo.",
          "$ref": "#/definitions/Project",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "description": "The VAT type of the project invoice.",
          "$ref": "#/definitions/VatType",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProjectOrderLine": {
      "type": "object",
      "required": [
        "date",
        "project"
      ],
      "properties": {
        "amountExcludingVatCurrency": {
          "description": "Total amount on order line excluding VAT in the order's currency",
          "type": "number",
          "readOnly": true
        },
        "amountIncludingVatCurrency": {
          "description": "Total amount on order line including VAT in the order's currency",
          "type": "number",
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "count": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "description": "The order line's currency. Determined by the order's currency.",
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "discount": {
          "description": "Discount given as a percentage (%)",
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "inventory": {
          "$ref": "#/definitions/Inventory"
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "markup": {
          "description": "Markup given as a percentage (%)",
          "type": "number",
          "format": "double"
        },
        "product": {
          "$ref": "#/definitions/Product"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "unitCostCurrency": {
          "description": "Unit price purchase (cost) excluding VAT in the order's currency",
          "type": "number"
        },
        "unitPriceExcludingVatCurrency": {
          "description": "Unit price of purchase excluding VAT in the order's currency",
          "type": "number"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProjectParticipant": {
      "type": "object",
      "properties": {
        "adminAccess": {
          "type": "boolean",
          "default": false
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Prospect": {
      "type": "object",
      "required": [
        "createdDate"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "closedDate": {
          "type": "string"
        },
        "closedReason": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "competitor": {
          "type": "string",
          "maxLength": 255
        },
        "createdDate": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/Customer"
        },
        "description": {
          "type": "string"
        },
        "finalAdditionalServicesValue": {
          "description": "Tripletex specific.",
          "type": "number"
        },
        "finalIncomeDate": {
          "description": "The estimated start date for income on the prospect.",
          "type": "string"
        },
        "finalInitialValue": {
          "description": "The estimated startup fee on this prospect.",
          "type": "number"
        },
        "finalMonthlyValue": {
          "description": "The estimated monthly fee on this prospect.",
          "type": "number"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isClosed": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "project": {
          "description": "The project connected to this prospect.",
          "$ref": "#/definitions/Project"
        },
        "projectOffer": {
          "description": "The project offer connected to this prospect.",
          "$ref": "#/definitions/Project"
        },
        "prospectType": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        },
        "salesEmployee": {
          "$ref": "#/definitions/Employee"
        },
        "totalValue": {
          "description": "The estimated total fee on this prospect.",
          "type": "number",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Reminder": {
      "type": "object",
      "required": [
        "reminderDate",
        "termOfPayment",
        "type"
      ],
      "properties": {
        "bank": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountIBAN": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountNumber": {
          "type": "string",
          "maxLength": 255
        },
        "bankAccountSWIFT": {
          "type": "string",
          "maxLength": 255
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "charge": {
          "description": "The fee part of the reminder, in the company's currency.",
          "type": "number",
          "readOnly": true
        },
        "chargeCurrency": {
          "description": "The fee part of the reminder, in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "comment": {
          "type": "string"
        },
        "currency": {
          "description": "The reminder currency.",
          "$ref": "#/definitions/Currency",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "interestRate": {
          "description": "The reminder interest rate.",
          "type": "number",
          "readOnly": true
        },
        "interests": {
          "description": "The interests part of the reminder.",
          "type": "number",
          "readOnly": true
        },
        "kid": {
          "description": "KID - Kundeidentifikasjonsnummer.",
          "type": "string",
          "maxLength": 25
        },
        "reminderDate": {
          "description": "Creation date of the invoice reminder.",
          "type": "string",
          "readOnly": true
        },
        "termOfPayment": {
          "description": "The reminder term of payment date.",
          "type": "string"
        },
        "totalAmountCurrency": {
          "description": "The total amount to pay in reminder's currency.",
          "type": "number",
          "readOnly": true
        },
        "totalCharge": {
          "description": "The total fee part of all reminders, in the company's currency.",
          "type": "number",
          "readOnly": true
        },
        "totalChargeCurrency": {
          "description": "The total fee part of all reminders, in the invoice currency.",
          "type": "number",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "enum": [
            "SOFT_REMINDER",
            "REMINDER",
            "NOTICE_OF_DEBT_COLLECTION",
            "DEBT_COLLECTION"
          ]
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RemunerationType": {
      "type": "object",
      "required": [
        "remunerationType"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "code": {
          "type": "string",
          "maxLength": 100
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "remunerationType": {
          "description": "Defines the remuneration type option. ",
          "type": "string",
          "enum": [
            "MONTHLY_WAGE",
            "HOURLY_WAGE",
            "COMMISION_PERCENTAGE",
            "FEE",
            "PIECEWORK_WAGE"
          ]
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseWrapperAccommodationAllowance": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AccommodationAllowance"
        }
      }
    },
    "ResponseWrapperAccount": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Account"
        }
      }
    },
    "ResponseWrapperAccountingPeriod": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AccountingPeriod"
        }
      }
    },
    "ResponseWrapperActivity": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Activity"
        }
      }
    },
    "ResponseWrapperAddress": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "ResponseWrapperAltinnCompanyModule": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AltinnCompanyModule"
        }
      }
    },
    "ResponseWrapperAnnualAccount": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AnnualAccount"
        }
      }
    },
    "ResponseWrapperApiConsumer": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ApiConsumer"
        }
      }
    },
    "ResponseWrapperAppSpecific": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/AppSpecific"
        }
      }
    },
    "ResponseWrapperBankReconciliation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliation"
        }
      }
    },
    "ResponseWrapperBankReconciliationMatch": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationMatch"
        }
      }
    },
    "ResponseWrapperBankReconciliationPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankReconciliationPaymentType"
        }
      }
    },
    "ResponseWrapperBankStatement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankStatement"
        }
      }
    },
    "ResponseWrapperBankTransaction": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/BankTransaction"
        }
      }
    },
    "ResponseWrapperBanner": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Banner"
        }
      }
    },
    "ResponseWrapperBoolean": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "ResponseWrapperCloseGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CloseGroup"
        }
      }
    },
    "ResponseWrapperCompany": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Company"
        }
      }
    },
    "ResponseWrapperCompanyHoliday": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CompanyHoliday"
        }
      }
    },
    "ResponseWrapperConsumerToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ConsumerToken"
        }
      }
    },
    "ResponseWrapperContact": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "ResponseWrapperCost": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Cost"
        }
      }
    },
    "ResponseWrapperCountry": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Country"
        }
      }
    },
    "ResponseWrapperCurrency": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Currency"
        }
      }
    },
    "ResponseWrapperCustomer": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Customer"
        }
      }
    },
    "ResponseWrapperCustomerCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/CustomerCategory"
        }
      }
    },
    "ResponseWrapperDepartment": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Department"
        }
      }
    },
    "ResponseWrapperDivision": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Division"
        }
      }
    },
    "ResponseWrapperDocument": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Document"
        }
      }
    },
    "ResponseWrapperDouble": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "ResponseWrapperEmployee": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Employee"
        }
      }
    },
    "ResponseWrapperEmployeeToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmployeeToken"
        }
      }
    },
    "ResponseWrapperEmployment": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Employment"
        }
      }
    },
    "ResponseWrapperEmploymentDetails": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/EmploymentDetails"
        }
      }
    },
    "ResponseWrapperEntitlement": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Entitlement"
        }
      }
    },
    "ResponseWrapperExternalProduct": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ExternalProduct"
        }
      }
    },
    "ResponseWrapperInteger": {
      "type": "object",
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResponseWrapperInventory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Inventory"
        }
      }
    },
    "ResponseWrapperInvoice": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Invoice"
        }
      }
    },
    "ResponseWrapperLeaveOfAbsence": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LeaveOfAbsence"
        }
      }
    },
    "ResponseWrapperListJob": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        }
      }
    },
    "ResponseWrapperLoggedInUserInfoDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/LoggedInUserInfoDTO"
        }
      }
    },
    "ResponseWrapperMapStringEventInfoDescription": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/EventInfoDescription"
          }
        }
      }
    },
    "ResponseWrapperMileageAllowance": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/MileageAllowance"
        }
      }
    },
    "ResponseWrapperModules": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Modules"
        }
      }
    },
    "ResponseWrapperMonthlyStatus": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/MonthlyStatus"
        }
      }
    },
    "ResponseWrapperNextOfKin": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/NextOfKin"
        }
      }
    },
    "ResponseWrapperNotification": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Notification"
        }
      }
    },
    "ResponseWrapperObject": {
      "type": "object",
      "properties": {
        "value": {
          "type": "object"
        }
      }
    },
    "ResponseWrapperOrder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Order"
        }
      }
    },
    "ResponseWrapperOrderLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderLine"
        }
      }
    },
    "ResponseWrapperOrderOffer": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/OrderOffer"
        }
      }
    },
    "ResponseWrapperPassenger": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Passenger"
        }
      }
    },
    "ResponseWrapperPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentType"
        }
      }
    },
    "ResponseWrapperPaymentTypeOut": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PaymentTypeOut"
        }
      }
    },
    "ResponseWrapperPayslip": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Payslip"
        }
      }
    },
    "ResponseWrapperPerDiemCompensation": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/PerDiemCompensation"
        }
      }
    },
    "ResponseWrapperPosting": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Posting"
        }
      }
    },
    "ResponseWrapperProduct": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Product"
        }
      }
    },
    "ResponseWrapperProductUnit": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProductUnit"
        }
      }
    },
    "ResponseWrapperProject": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Project"
        }
      }
    },
    "ResponseWrapperProjectCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectCategory"
        }
      }
    },
    "ResponseWrapperProjectInvoiceDetails": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectInvoiceDetails"
        }
      }
    },
    "ResponseWrapperProjectOrderLine": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectOrderLine"
        }
      }
    },
    "ResponseWrapperProjectParticipant": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/ProjectParticipant"
        }
      }
    },
    "ResponseWrapperProspect": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Prospect"
        }
      }
    },
    "ResponseWrapperReminder": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Reminder"
        }
      }
    },
    "ResponseWrapperSalarySettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySettings"
        }
      }
    },
    "ResponseWrapperSalarySpecification": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalarySpecification"
        }
      }
    },
    "ResponseWrapperSalaryTransaction": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryTransaction"
        }
      }
    },
    "ResponseWrapperSalaryType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SalaryType"
        }
      }
    },
    "ResponseWrapperSessionToken": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SessionToken"
        }
      }
    },
    "ResponseWrapperStandardTime": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/StandardTime"
        }
      }
    },
    "ResponseWrapperString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "ResponseWrapperSubscription": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Subscription"
        }
      }
    },
    "ResponseWrapperSupplier": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Supplier"
        }
      }
    },
    "ResponseWrapperSystemMessage": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/SystemMessage"
        }
      }
    },
    "ResponseWrapperTimeClock": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimeClock"
        }
      }
    },
    "ResponseWrapperTimesheetEntry": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetEntry"
        }
      }
    },
    "ResponseWrapperTimesheetSettings": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TimesheetSettings"
        }
      }
    },
    "ResponseWrapperTravelCostCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelCostCategory"
        }
      }
    },
    "ResponseWrapperTravelExpense": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpense"
        }
      }
    },
    "ResponseWrapperTravelExpenseRate": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRate"
        }
      }
    },
    "ResponseWrapperTravelExpenseRateCategory": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        }
      }
    },
    "ResponseWrapperTravelExpenseRateCategoryGroup": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelExpenseRateCategoryGroup"
        }
      }
    },
    "ResponseWrapperTravelPaymentType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TravelPaymentType"
        }
      }
    },
    "ResponseWrapperTripDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TripDTO"
        }
      }
    },
    "ResponseWrapperTripletexAccountReturn": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/TripletexAccountReturn"
        }
      }
    },
    "ResponseWrapperUnreadCountDTO": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/UnreadCountDTO"
        }
      }
    },
    "ResponseWrapperVatType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VatType"
        }
      }
    },
    "ResponseWrapperVoucher": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/Voucher"
        }
      }
    },
    "ResponseWrapperVoucherType": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/VoucherType"
        }
      }
    },
    "ResponseWrapperWeeklyStatus": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/WeeklyStatus"
        }
      }
    },
    "Result": {
      "type": "object",
      "properties": {
        "dbId": {
          "type": "integer",
          "format": "int32"
        },
        "dto": {
          "$ref": "#/definitions/AbstractDTO"
        },
        "file": {
          "type": "string",
          "enum": [
            "DEPARTMENTS",
            "EMPLOYEES",
            "VATCODES",
            "ACCOUNTS",
            "CUSTOMERS",
            "CUSTOMERS_CATEGORIES",
            "VENDORS",
            "VENDORS_CATEGORIES",
            "CONTACTS",
            "DELIVERY_ADDRESSES",
            "PRODUCTS",
            "PRODUCTS_CATEGORIES",
            "PROJECTS",
            "PROJECTS_CATEGORIES"
          ]
        },
        "input": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "line": {
          "type": "integer",
          "format": "int64"
        },
        "log": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "number": {
          "type": "string"
        },
        "output": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "record": {
          "$ref": "#/definitions/CSVRecord"
        },
        "type": {
          "type": "string",
          "enum": [
            "IGNORED",
            "UPDATED",
            "CREATED",
            "ERROR"
          ]
        }
      }
    },
    "SalarySettings": {
      "type": "object",
      "required": [
        "payrollTaxCalcMethod"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "municipality": {
          "$ref": "#/definitions/Municipality"
        },
        "payrollTaxCalcMethod": {
          "description": "Define the Payroll Tax Calculation Method. AA General industries,BB Central government administration and health trusts, CC Exempted business sectors (and undertakings in economic difficulty),DD Agriculture and forestry, fisheries etc., EE Reporting of payroll withholding tax only,GG Road freight transport",
          "type": "string",
          "maxLength": 2,
          "enum": [
            "AA",
            "BB",
            "CC",
            "DD",
            "EE",
            "GG",
            "JJ",
            "EMPTY"
          ]
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SalarySpecification": {
      "type": "object",
      "required": [
        "count",
        "rate",
        "salaryType"
      ],
      "properties": {
        "amount": {
          "type": "number"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "count": {
          "type": "number"
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "description": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "payslip": {
          "$ref": "#/definitions/Payslip"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "rate": {
          "type": "number"
        },
        "salaryType": {
          "$ref": "#/definitions/SalaryType"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SalaryTransaction": {
      "type": "object",
      "required": [
        "month",
        "payslips",
        "year"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "description": "Voucher date.",
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isHistorical": {
          "description": "With historical wage vouchers you can update the wage system with information dated before the opening balance.",
          "type": "boolean",
          "default": false
        },
        "month": {
          "type": "integer",
          "format": "int32"
        },
        "payslips": {
          "description": "Link to individual payslip objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Payslip"
          }
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SalaryType": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 10
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SearchCompletionDTO": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "alternateName": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "name": {
          "type": "string"
        },
        "postalArea": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "score": {
          "type": "integer",
          "format": "int32"
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SEARCH1881",
              "TRIPLETEX",
              "NICKNAME",
              "EMPLOYEE",
              "CONTACT",
              "ACTIVITY",
              "PROJECT",
              "ORDER",
              "OFFER",
              "CUSTOMER",
              "COMPANY",
              "CONTROLSCHEMA",
              "HOUR",
              "TRAVELEXPENSE"
            ]
          }
        }
      }
    },
    "SessionToken": {
      "type": "object",
      "required": [
        "expirationDate"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "consumerToken": {
          "$ref": "#/definitions/ConsumerToken"
        },
        "employeeToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "encryptionKey": {
          "type": "string",
          "maxLength": 100,
          "readOnly": true
        },
        "expirationDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "token": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SmartScanWebhook": {
      "type": "object",
      "properties": {
        "ClientDocumentId": {
          "type": "string"
        },
        "DocumentId": {
          "type": "string"
        },
        "Self": {
          "type": "string"
        }
      }
    },
    "StandardTime": {
      "type": "object",
      "required": [
        "fromDate",
        "hoursPerDay"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "fromDate": {
          "type": "string"
        },
        "hoursPerDay": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Subscription": {
      "type": "object",
      "required": [
        "event",
        "targetUrl"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "event": {
          "description": "Event name (from v2/event) you wish to subscribe to. Form should be: *subject.verb*.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "fields": {
          "description": "The fields in the object delivered with the notification callback, nested as in other API calls.",
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "description": "The status of the subscription.",
          "type": "string",
          "maxLength": 50,
          "enum": [
            "ACTIVE",
            "DISABLED",
            "DISABLED_TOO_MANY_ERRORS",
            "DISABLED_RATE_LIMIT_EXCEEDED",
            "DISABLED_MISUSE"
          ],
          "readOnly": true
        },
        "targetUrl": {
          "description": "The callback URL used for subscriptions (including authentication tokens). Must be absolute and use HTTPS.",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Supplier": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "accountManager": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "bankAccounts": {
          "description": "List of the bank account numbers for this supplier.  Norwegian bank account numbers only.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "category1": {
          "description": "Category 1 of this supplier",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category2": {
          "description": "Category 2 of this supplier",
          "$ref": "#/definitions/CustomerCategory"
        },
        "category3": {
          "description": "Category 3 of this supplier",
          "$ref": "#/definitions/CustomerCategory"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "customerNumber": {
          "type": "integer",
          "format": "int32"
        },
        "deliveryAddress": {
          "$ref": "#/definitions/Address"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "minLength": 0
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "invoiceEmail": {
          "type": "string",
          "format": "email",
          "maxLength": 254,
          "minLength": 0
        },
        "isCustomer": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isInactive": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isPrivateIndividual": {
          "type": "boolean",
          "default": false
        },
        "isSupplier": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "organizationNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumber": {
          "type": "string",
          "maxLength": 100
        },
        "phoneNumberMobile": {
          "type": "string",
          "maxLength": 100
        },
        "physicalAddress": {
          "$ref": "#/definitions/Address"
        },
        "postalAddress": {
          "$ref": "#/definitions/Address"
        },
        "showProducts": {
          "type": "boolean",
          "default": false
        },
        "supplierNumber": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SupplierBalance": {
      "type": "object",
      "properties": {
        "balanceChange": {
          "type": "number",
          "readOnly": true
        },
        "balanceIn": {
          "type": "number",
          "readOnly": true
        },
        "balanceInCurrencies": {
          "description": "Currencies that have been used prior to this period, for the given filter",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Currency"
          },
          "readOnly": true
        },
        "balanceOut": {
          "type": "number",
          "readOnly": true
        },
        "sumAmountNegative": {
          "type": "number",
          "readOnly": true
        },
        "supplier": {
          "$ref": "#/definitions/Supplier"
        }
      }
    },
    "SystemMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "TimeClock": {
      "type": "object",
      "required": [
        "date",
        "employee",
        "timeStart"
      ],
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hoursStart": {
          "type": "number",
          "format": "double",
          "minimum": 0
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "timeStart": {
          "type": "string"
        },
        "timeStop": {
          "type": "string"
        },
        "timesheetEntry": {
          "$ref": "#/definitions/TimesheetEntry"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TimesheetEntry": {
      "type": "object",
      "required": [
        "activity",
        "chargeableHours",
        "date",
        "employee",
        "hours"
      ],
      "properties": {
        "activity": {
          "$ref": "#/definitions/Activity"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "chargeable": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "chargeableHours": {
          "type": "number",
          "format": "double",
          "readOnly": true
        },
        "comment": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "hourlyCost": {
          "type": "number",
          "readOnly": true
        },
        "hourlyRate": {
          "type": "number",
          "readOnly": true
        },
        "hours": {
          "type": "number",
          "format": "double"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice",
          "readOnly": true
        },
        "locked": {
          "description": "Indicates if the hour can be changed.",
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "timeClocks": {
          "description": "Link to stop watches on this hour.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimeClock"
          },
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TimesheetEntrySearchResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "sumAllHours": {
          "type": "number",
          "format": "double"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TimesheetEntry"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "TimesheetSettings": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "timeClock": {
          "type": "boolean",
          "default": false
        },
        "timesheetCompleted": {
          "type": "boolean",
          "default": false
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TravelCostCategory": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isInactive": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isVatLocked": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "showOnEmployeeExpenses": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "showOnTravelExpenses": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TravelDetails": {
      "type": "object",
      "properties": {
        "departureDate": {
          "type": "string"
        },
        "departureFrom": {
          "type": "string",
          "maxLength": 255
        },
        "departureTime": {
          "type": "string",
          "maxLength": 20
        },
        "destination": {
          "type": "string",
          "maxLength": 255
        },
        "detailedJourneyDescription": {
          "type": "string"
        },
        "isCompensationFromRates": {
          "type": "boolean",
          "default": false
        },
        "isDayTrip": {
          "type": "boolean",
          "default": false
        },
        "isForeignTravel": {
          "type": "boolean",
          "default": false
        },
        "purpose": {
          "type": "string"
        },
        "returnDate": {
          "type": "string"
        },
        "returnTime": {
          "type": "string",
          "maxLength": 20
        }
      }
    },
    "TravelExpense": {
      "type": "object",
      "required": [
        "employee"
      ],
      "properties": {
        "accommodationAllowances": {
          "description": "Link to individual accommodation allowances.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccommodationAllowance"
          },
          "readOnly": true
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "readOnly": true
        },
        "amount": {
          "type": "number"
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "approvedDate": {
          "type": "string",
          "readOnly": true
        },
        "attachmentCount": {
          "type": "integer",
          "format": "int32",
          "maximum": 2147483647,
          "minimum": 0,
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "completedBy": {
          "$ref": "#/definitions/Employee",
          "readOnly": true
        },
        "completedDate": {
          "type": "string",
          "readOnly": true
        },
        "costs": {
          "description": "Link to individual costs.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cost"
          },
          "readOnly": true
        },
        "date": {
          "type": "string",
          "readOnly": true
        },
        "department": {
          "$ref": "#/definitions/Department"
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "fixedInvoicedAmount": {
          "type": "number"
        },
        "highRateVAT": {
          "type": "number",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "invoice": {
          "$ref": "#/definitions/Invoice",
          "readOnly": true
        },
        "isApproved": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isChargeable": {
          "type": "boolean",
          "default": false
        },
        "isCompleted": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "isFixedInvoicedAmount": {
          "type": "boolean",
          "default": false
        },
        "isIncludeAttachedReceiptsWhenReinvoicing": {
          "type": "boolean",
          "default": false
        },
        "lowRateVAT": {
          "type": "number",
          "readOnly": true
        },
        "mediumRateVAT": {
          "type": "number",
          "readOnly": true
        },
        "mileageAllowances": {
          "description": "Link to individual mileage allowances.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MileageAllowance"
          },
          "readOnly": true
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "paymentAmount": {
          "type": "number",
          "readOnly": true
        },
        "paymentAmountCurrency": {
          "type": "number",
          "readOnly": true
        },
        "paymentCurrency": {
          "$ref": "#/definitions/Currency"
        },
        "payslip": {
          "$ref": "#/definitions/Payslip",
          "readOnly": true
        },
        "perDiemCompensations": {
          "description": "Link to individual per diem compensations.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerDiemCompensation"
          },
          "readOnly": true
        },
        "project": {
          "$ref": "#/definitions/Project"
        },
        "state": {
          "type": "string",
          "enum": [
            "ALL",
            "OPEN",
            "APPROVED",
            "SALARY_PAID",
            "DELIVERED"
          ],
          "readOnly": true
        },
        "title": {
          "type": "string",
          "maxLength": 255
        },
        "travelAdvance": {
          "type": "number"
        },
        "travelDetails": {
          "$ref": "#/definitions/TravelDetails"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "vatType": {
          "$ref": "#/definitions/VatType"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "voucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        }
      }
    },
    "TravelExpenseRate": {
      "type": "object",
      "required": [
        "rateCategory",
        "zone"
      ],
      "properties": {
        "breakfastDeductionRate": {
          "type": "number"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "dinnerDeductionRate": {
          "type": "number"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "lunchDeductionRate": {
          "type": "number"
        },
        "rate": {
          "type": "number"
        },
        "rateCategory": {
          "$ref": "#/definitions/TravelExpenseRateCategory"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "zone": {
          "type": "string"
        }
      }
    },
    "TravelExpenseRateCategory": {
      "type": "object",
      "required": [
        "fromDate",
        "toDate"
      ],
      "properties": {
        "ameldingWageCode": {
          "type": "integer",
          "format": "int32"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "fromDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isRequiresOvernightAccommodation": {
          "type": "boolean",
          "default": false
        },
        "isRequiresZone": {
          "type": "boolean",
          "default": false
        },
        "isValidAccommodation": {
          "type": "boolean",
          "default": false
        },
        "isValidDayTrip": {
          "type": "boolean",
          "default": false
        },
        "isValidForeignTravel": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "toDate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "PER_DIEM",
            "ACCOMMODATION_ALLOWANCE",
            "MILEAGE_ALLOWANCE"
          ]
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "validDomestic": {
          "type": "boolean",
          "default": false
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "wageCodeNumber": {
          "type": "string",
          "maxLength": 10
        }
      }
    },
    "TravelExpenseRateCategoryGroup": {
      "type": "object",
      "required": [
        "fromDate",
        "toDate"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "fromDate": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isForeignTravel": {
          "type": "boolean",
          "default": false
        },
        "name": {
          "type": "string",
          "readOnly": true
        },
        "toDate": {
          "type": "string"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TravelPaymentType": {
      "type": "object",
      "required": [
        "description"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/Account"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "description": {
          "type": "string",
          "maxLength": 255
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "isInactive": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "showOnEmployeeExpenses": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "showOnTravelExpenses": {
          "type": "boolean",
          "default": false,
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TriggerDTO": {
      "type": "object",
      "properties": {
        "calendarName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nextFireTime": {
          "type": "string",
          "format": "date-time"
        },
        "previousFireTime": {
          "type": "string",
          "format": "date-time"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "TripDTO": {
      "type": "object",
      "properties": {
        "distance": {
          "type": "number"
        },
        "sumTollNOK": {
          "type": "number"
        },
        "travelTimeInMinutes": {
          "type": "number"
        }
      }
    },
    "TripletexAccount": {
      "type": "object",
      "required": [
        "accountType",
        "administratorPassword",
        "company",
        "modules",
        "numberOfVouchers"
      ],
      "properties": {
        "accountType": {
          "description": "Is this a test account or a paying account?",
          "type": "string",
          "enum": [
            "TEST",
            "PAYING"
          ]
        },
        "accountingOffice": {
          "type": "boolean",
          "default": false
        },
        "administrator": {
          "description": "Employee to create. Department on this object will also be created if supplied. If null a dummy user and department will be created instead",
          "$ref": "#/definitions/Employee"
        },
        "administratorPassword": {
          "description": "Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)",
          "type": "string"
        },
        "auditor": {
          "type": "boolean",
          "default": false
        },
        "autoValidateUserLogin": {
          "description": "If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS.",
          "type": "boolean",
          "default": false
        },
        "chartOfAccountsType": {
          "description": "The chart of accounts to use for the new company",
          "type": "string",
          "enum": [
            "DEFAULT",
            "MAMUT_STD_PAYROLL",
            "MAMUT_NARF_PAYROLL",
            "AGRO_FORRETNING_PAYROLL",
            "AGRO_LANDBRUK_PAYROLL",
            "AGRO_FISKE_PAYROLL",
            "AGRO_FORSOKSRING_PAYROLL",
            "AGRO_IDRETTSLAG_PAYROLL",
            "AGRO_FORENING_PAYROLL"
          ]
        },
        "company": {
          "description": "Information about the company to create. Supply as much info as you have, but at least name, type and address.",
          "$ref": "#/definitions/Company"
        },
        "createAdministratorApiToken": {
          "description": "Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response.",
          "type": "boolean",
          "default": false
        },
        "createCompanyOwnedApiToken": {
          "description": "Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response.",
          "type": "boolean",
          "default": false
        },
        "mayCreateTripletexAccounts": {
          "description": "Should the company we are creating be able to create new Tripletex accounts?",
          "type": "boolean",
          "default": false
        },
        "modules": {
          "description": "Modules (functionality in the application) to activate for the newly created account. Some modules have extra costs.",
          "$ref": "#/definitions/Modules"
        },
        "numberOfVouchers": {
          "description": "Used to calculate prices.",
          "type": "string",
          "enum": [
            "INTERVAL_0_100",
            "INTERVAL_101_500",
            "INTERVAL_0_500",
            "INTERVAL_501_1000",
            "INTERVAL_1001_2000",
            "INTERVAL_2001_3500",
            "INTERVAL_3501_5000",
            "INTERVAL_5001_10000",
            "INTERVAL_UNLIMITED"
          ]
        },
        "reseller": {
          "type": "boolean",
          "default": false
        },
        "sendEmails": {
          "description": "Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true",
          "type": "boolean",
          "default": false
        }
      }
    },
    "TripletexAccountReturn": {
      "type": "object",
      "properties": {
        "administrator": {
          "$ref": "#/definitions/Employee"
        },
        "administratorApiToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "company": {
          "$ref": "#/definitions/Company"
        },
        "companyOwnedApiToken": {
          "$ref": "#/definitions/EmployeeToken"
        },
        "companyOwnedApiTokenRobotId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UnreadCountDTO": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "readCursor": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VNTCStatusDTO": {
      "type": "object",
      "required": [
        "ExternalMessageId",
        "ExternalSenderId",
        "MessageId",
        "Operator",
        "Status"
      ],
      "properties": {
        "ExternalMessageId": {
          "type": "string",
          "readOnly": true
        },
        "ExternalSenderId": {
          "type": "string",
          "readOnly": true
        },
        "MessageId": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "Operator": {
          "type": "string",
          "readOnly": true
        },
        "PartCount": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "Status": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VatType": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 255
        },
        "number": {
          "type": "string",
          "maxLength": 10
        },
        "percentage": {
          "type": "number",
          "format": "double"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Voucher": {
      "type": "object",
      "required": [
        "date",
        "description",
        "postings"
      ],
      "properties": {
        "attachment": {
          "description": "If the documentation for the voucher has been provided from an external source (e.g. another system via API or a user upload) then this is a reference to the document. This is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "$ref": "#/definitions/Document",
          "readOnly": true
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "date": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "document": {
          "description": "If the documentation for the voucher has been generated by the system (e.g. an invoice) then this is a reference to the generated document. This document is always a PDF. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "$ref": "#/definitions/Document",
          "readOnly": true
        },
        "ediDocument": {
          "description": "If the voucher is created based on a machine readable document (such as EHF or EFO/NELFO) then this is a reference to that document. Note that a voucher may have both a document, an attachment and an ediDocument.",
          "$ref": "#/definitions/Document",
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "number": {
          "description": "System generated number that cannot be changed.",
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "readOnly": true
        },
        "postings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Posting"
          }
        },
        "reverseVoucher": {
          "$ref": "#/definitions/Voucher",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "voucherType": {
          "description": "Voucher type. Must not be of type 'Utgående faktura' ('Outgoing Invoice') on new vouchers, instead use voucherType=null or use the Invoice endpoint.",
          "$ref": "#/definitions/VoucherType"
        },
        "year": {
          "description": "System generated number that cannot be changed.",
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "readOnly": true
        }
      }
    },
    "VoucherSearchResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32"
        },
        "from": {
          "type": "integer",
          "format": "int32"
        },
        "fullResultSize": {
          "description": "[DEPRECATED] Indicates whether there are more values available. Note: The value is not exact",
          "type": "integer",
          "format": "int32"
        },
        "totalNumberOfPostings": {
          "description": "[DEPRECATED] Number of postings returned (if postings are returned)",
          "type": "integer",
          "format": "int32"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Voucher"
          }
        },
        "versionDigest": {
          "description": "Used to know if the paginated list has changed.",
          "type": "string"
        }
      }
    },
    "VoucherType": {
      "type": "object",
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WeeklyStatus": {
      "type": "object",
      "required": [
        "employee"
      ],
      "properties": {
        "approved": {
          "type": "boolean",
          "default": false
        },
        "approvedBy": {
          "$ref": "#/definitions/Employee"
        },
        "approvedDate": {
          "type": "string"
        },
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "completed": {
          "type": "boolean",
          "default": false
        },
        "employee": {
          "$ref": "#/definitions/Employee"
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "week": {
          "type": "integer",
          "format": "int32"
        },
        "year": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "WorkingHoursScheme": {
      "type": "object",
      "required": [
        "workingHoursScheme"
      ],
      "properties": {
        "changes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Change"
          },
          "readOnly": true
        },
        "code": {
          "type": "string",
          "maxLength": 100
        },
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "nameNO": {
          "type": "string",
          "maxLength": 100
        },
        "url": {
          "type": "string",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int32"
        },
        "workingHoursScheme": {
          "description": "Defines the working hours scheme option.",
          "type": "string",
          "enum": [
            "NOT_SHIFT",
            "ROUND_THE_CLOCK",
            "SHIFT_365",
            "OFFSHORE_336",
            "CONTINUOUS"
          ]
        }
      }
    }
  },
  "securityDefinitions": {
    "tokenAuthScheme": {
      "description": "Basic AUTH where username is company/customer id for proxy use (or 0 for default), password should be set to the session token",
      "type": "basic"
    }
  },
  "tags": [
    {
      "name": "salaryspecification"
    },
    {
      "name": "eventsubscription"
    },
    {
      "name": "event/subscription"
    },
    {
      "name": "projectparticipant"
    },
    {
      "name": "project/participant"
    },
    {
      "name": "employeenextOfKin"
    },
    {
      "name": "employee/nextOfKin"
    },
    {
      "name": "bankreconciliationmatch"
    },
    {
      "name": "bank/reconciliation/match"
    },
    {
      "name": "salarysettings"
    },
    {
      "name": "salary/settings"
    },
    {
      "name": "eventnotification"
    },
    {
      "name": "travelExpenserate"
    },
    {
      "name": "travelExpense/rate"
    },
    {
      "name": "supplier"
    },
    {
      "name": "employeeemploymentdetails"
    },
    {
      "name": "employee/employment/details"
    },
    {
      "name": "salarytransaction"
    },
    {
      "name": "salary/transaction"
    },
    {
      "name": "productunit"
    },
    {
      "name": "product/unit"
    },
    {
      "name": "employeeemploymentleaveOfAbsence"
    },
    {
      "name": "employee/employment/leaveOfAbsence"
    },
    {
      "name": "ledgervoucher"
    },
    {
      "name": "ledger/voucher"
    },
    {
      "name": "reminder"
    },
    {
      "name": "customercategory"
    },
    {
      "name": "customer/category"
    },
    {
      "name": "smartscan"
    },
    {
      "name": "ledgerposting"
    },
    {
      "name": "ledger/posting"
    },
    {
      "name": "employeestandardTime"
    },
    {
      "name": "employee/standardTime"
    },
    {
      "name": "internalsystemMessage"
    },
    {
      "name": "productexternal"
    },
    {
      "name": "product/external"
    },
    {
      "name": "orderorderline"
    },
    {
      "name": "order/orderline"
    },
    {
      "name": "travelExpenseperDiemCompensation"
    },
    {
      "name": "travelExpense/perDiemCompensation"
    },
    {
      "name": "address"
    },
    {
      "name": "employeeemploymentworkingHoursScheme"
    },
    {
      "name": "employee/employment/workingHoursScheme"
    },
    {
      "name": "travelExpenserateCategoryGroup"
    },
    {
      "name": "travelExpense/rateCategoryGroup"
    },
    {
      "name": "mobileapp"
    },
    {
      "name": "tokenemployee"
    },
    {
      "name": "token/employee"
    },
    {
      "name": "bank"
    },
    {
      "name": "ledgercloseGroup"
    },
    {
      "name": "ledger/closeGroup"
    },
    {
      "name": "invoicedetails"
    },
    {
      "name": "invoice/details"
    },
    {
      "name": "travelExpensepassenger"
    },
    {
      "name": "travelExpense/passenger"
    },
    {
      "name": "ledgervoucherType"
    },
    {
      "name": "ledger/voucherType"
    },
    {
      "name": "contact"
    },
    {
      "name": "invoice"
    },
    {
      "name": "project"
    },
    {
      "name": "internalscheduling"
    },
    {
      "name": "companysettingsaltinn"
    },
    {
      "name": "company/altinn"
    },
    {
      "name": "department"
    },
    {
      "name": "bankreconciliationpaymentType"
    },
    {
      "name": "bank/reconciliation/paymentType"
    },
    {
      "name": "customer"
    },
    {
      "name": "integrationfactoringaprila"
    },
    {
      "name": "salarysettingsholiday"
    },
    {
      "name": "salary/settings/holiday"
    },
    {
      "name": "ledgervatType"
    },
    {
      "name": "ledger/vatType"
    },
    {
      "name": "travelExpensemileageAllowance"
    },
    {
      "name": "travelExpense/mileageAllowance"
    },
    {
      "name": "timesheettimeClock"
    },
    {
      "name": "timesheet/timeClock"
    },
    {
      "name": "travelExpenseaccommodationAllowance"
    },
    {
      "name": "travelExpense/accommodationAllowance"
    },
    {
      "name": "travelExpenserateCategory"
    },
    {
      "name": "travelExpense/rateCategory"
    },
    {
      "name": "banner"
    },
    {
      "name": "activity"
    },
    {
      "name": "integrationvntcstatus"
    },
    {
      "name": "monthlyStatus"
    },
    {
      "name": "ledgeraccountingPeriod"
    },
    {
      "name": "ledger/accountingPeriod"
    },
    {
      "name": "employeeemploymentremunerationType"
    },
    {
      "name": "employee/employment/remunerationType"
    },
    {
      "name": "employeeemployment"
    },
    {
      "name": "employee/employment"
    },
    {
      "name": "country"
    },
    {
      "name": "tripletexAccount"
    },
    {
      "name": "inventory"
    },
    {
      "name": "company"
    },
    {
      "name": "municipality"
    },
    {
      "name": "employeeentitlement"
    },
    {
      "name": "employee/entitlement"
    },
    {
      "name": "division"
    },
    {
      "name": "travelExpensecostCategory"
    },
    {
      "name": "travelExpense/costCategory"
    },
    {
      "name": "projectcategory"
    },
    {
      "name": "project/category"
    },
    {
      "name": "travelExpense"
    },
    {
      "name": "bankstatementtransaction"
    },
    {
      "name": "bank/statement/transaction"
    },
    {
      "name": "travelExpensecost"
    },
    {
      "name": "travelExpense/cost"
    },
    {
      "name": "bankstatement"
    },
    {
      "name": "bank/statement"
    },
    {
      "name": "integrationmaventastatus"
    },
    {
      "name": "companymodules"
    },
    {
      "name": "tokensession"
    },
    {
      "name": "token/session"
    },
    {
      "name": "exceptiontest"
    },
    {
      "name": "tokenconsumer"
    },
    {
      "name": "token/consumer"
    },
    {
      "name": "product"
    },
    {
      "name": "ledgerpaymentTypeOut"
    },
    {
      "name": "ledger/paymentTypeOut"
    },
    {
      "name": "order"
    },
    {
      "name": "employeeemploymentleaveOfAbsenceType"
    },
    {
      "name": "employee/employment/leaveOfAbsenceType"
    },
    {
      "name": "crmprospect"
    },
    {
      "name": "crm/prospect"
    },
    {
      "name": "ledgeraccount"
    },
    {
      "name": "ledger/account"
    },
    {
      "name": "projectorderline"
    },
    {
      "name": "project/orderline"
    },
    {
      "name": "employee"
    },
    {
      "name": "salarypayslip"
    },
    {
      "name": "salary/payslip"
    },
    {
      "name": "orderoffer"
    },
    {
      "name": "lookup"
    },
    {
      "name": "timesheetsettings"
    },
    {
      "name": "timesheet/settings"
    },
    {
      "name": "event"
    },
    {
      "name": "currency"
    },
    {
      "name": "weeklyStatus"
    },
    {
      "name": "document"
    },
    {
      "name": "employeeemploymentoccupationCode"
    },
    {
      "name": "employee/employment/occupationCode"
    },
    {
      "name": "travelExpensepaymentType"
    },
    {
      "name": "travelExpense/paymentType"
    },
    {
      "name": "eventbanner"
    },
    {
      "name": "timesheetentry"
    },
    {
      "name": "timesheet/entry"
    },
    {
      "name": "employeeemploymentemploymentType"
    },
    {
      "name": "employee/employment/employmentType"
    },
    {
      "name": "invoicepaymentType"
    },
    {
      "name": "invoice/paymentType"
    },
    {
      "name": "salarytype"
    },
    {
      "name": "salary/type"
    },
    {
      "name": "bankreconciliation"
    },
    {
      "name": "bank/reconciliation"
    },
    {
      "name": "apiConsumer"
    },
    {
      "name": "ledgerannualAccount"
    },
    {
      "name": "ledger/annualAccount"
    },
    {
      "name": "ledger"
    }
  ]
}